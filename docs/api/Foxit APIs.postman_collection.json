{
	"info": {
		"_postman_id": "cf493b43-b2fc-4d4f-9527-4543d06dac6e",
		"name": "Foxit APIs",
		"description": "# Overview\n\nFoxit APIs offer a comprehensive suite of REST APIs built on Foxit‚Äôs industry-leading document technology and scalable cloud infrastructure. These APIs provide unmatched control for developers to tailor and optimize document workflows, enabling seamless integration with modern software environments.\n\nWith powerful capabilities such as document conversion, content extraction, and advanced PDF editing and viewing, Foxit APIs empower developers to build secure, efficient, and scalable document solutions tailored to specific business needs.\n\n---\n\n## Foxit PDF Services APIs\n\nFoxit PDF Services APIs provides a set of REST APIs that allow you to perform powerful PDF operations, such as conversion, editing, merging, and more by simply making HTTP requests. These APIs are platform-independent and can be integrated into any application with ease.\n\n## Available Features\n\n### üìÑ Format Conversions\n\n- Convert to/from:\n    \n    - PDF ‚áÑ Word\n        \n    - PDF ‚áÑ Excel\n        \n    - PDF ‚áÑ PowerPoint\n        \n    - PDF ‚áÑ HTML\n        \n    - PDF ‚áÑ Text\n        \n    - PDF ‚áÑ RTF\n        \n    - PDF ‚áÑ Images\n        \n\n### üõ†Ô∏è PDF Operations\n\n- Merge multiple PDFs\n    \n- Split PDFs into parts\n    \n- Compare document versions\n    \n- Compress file size\n    \n- Add or remove password protection\n    \n- Reorganize pages\n    \n- Flatten form fields and annotations\n    \n- Optimize for web with linearization\n    \n\n### [Read more about PDF APIs](#pdf-services-apis)\n\n## Foxit Document Generation APIs\n\nThe Document Generation APIs are built to simplify and automate the creation, formatting, and manipulation of documents in a scalable and reliable manner. Designed as a standalone solution, they are ideal for organizations that need to dynamically generate documents from templates, merge data into PDFs, or automate workflows across various departments.\n\nThese APIs can be seamlessly integrated into applications or enterprise platforms, enabling:\n\n- On-demand generation of standardized documents\n    \n- Data-driven document population from structured sources (e.g., JSON)\n    \n- Output in multiple formats such as PDF and DOCX.\n    \n\nBy leveraging these APIs, businesses can reduce manual effort, ensure document consistency, and accelerate time-to-delivery for customer-facing or internal documents.\n\n## ‚≠ê Key Features\n\n- **Document Template Management** üìù‚öôÔ∏è\n    \n    - Use predefined template documents with tags for dynamic data insertion.\n        \n    - Analyze a template document for text tags identification.\n        \n    - Embed text tags directly in document templates to automate content placement.\n        \n- **Input Data** üìÉ‚ûï\n    \n    - Include your template document as a Base64 encoded file string.\n        \n    - Text tags are replaced with actual values from input data. It maps values directly to text tags within your template document.\n        \n- **Document Generation** üîßüìÉ\n    \n    - Combines structured data and template documents to produce polished, ready-to-use documents.\n        \n    - Choose your desired output format, such as PDF or DOCX.\n        \n\n### [Read more about Document Generation APIs](#document-generation-apis)\n\n---\n\n## eSign APIs\n\nFoxit eSign is the #1 easiest and most collaborative contract management and eSignature solution, offering a wide range of robust features for seamless agreement workflows.\n\n### ‚úÖ Key Features\n\n- Collaborative contract and agreement building\n    \n- Template-based contract creation\n    \n- eSignature workflows supporting single or multiple users\n    \n- Advanced bulk eSignature with dashboard and notification controls\n    \n- API integration for seamless connectivity with other software or websites\n    \n- Developer tools to embed Foxit eSign in custom applications or workflows\n    \n\n---\n\n## üõ†Ô∏è Ways to Build with eSign\n\nFoxit eSign provides flexible integration options to suit your development environment:\n\n### 1\\. üîó REST API\n\n- Allows data exchange over HTTPS\n    \n- Easily integrates with web, server-side, or native applications\n    \n- Commonly used for:\n    \n    - Generating documents server-side\n        \n    - Automating eSignature workflows\n        \n\n### 2\\. üíª SDKs (Software Development Kits)\n\n- Available for .NET, Java, PHP, Python, Ruby, and TypeScript\n    \n- Wraps API calls for frequently used development scenarios\n    \n- Simplifies embedding Foxit eSign in custom web apps\n    \n\n### 3\\. üåê Embed Foxit eSign\n\n- Use an to embed Foxit eSign templates in your web views\n    \n- Customize and complete document signing directly within your application\n    \n- Ideal for allowing users to:\n    \n    - Review\n        \n    - Fill\n        \n    - Sign\n        \n    - Save document copies seamlessly\n        \n\n### 4\\. üîå Platform Integrations\n\n- Native integration with popular CRM, financial, helpdesk, and productivity tools\n    \n- Lets you access Foxit eSign features directly from your existing platforms\n    \n\n---\n\n## üîî Webhooks ‚Äì Real-Time System Updates\n\nKeep your internal systems in sync with automatic updates via Webhooks.\n\n- Webhooks notify your system about document events (e.g., signer completed, document executed)\n    \n- Foxit eSign sends an HTTP POST with a JSON payload containing:\n    \n    - `event_name`\n        \n    - `event_date`\n        \n    - `data` (event-specific details)\n        \n\n### [Read more about eSign APIs](#esign-apis)\n\n# Getting Started\n\nTo get started with the Document Generation APIs, first sign up for a Foxit Developer account. Once registered, you‚Äôll receive your API credentials. Follow the steps below to quickly configure your environment and begin integrating the APIs.\n\nüëâ **Start here**: [Foxit Developer Portal](https://app.developer-api.foxit.com/)\n\n---\n\n## Step 1: Create Account\n\n- Visit the Foxit Developer Portal.\n    \n- Click **Register** and fill in the required details.\n    \n- Verify your email address to activate your account.\n    \n- After login, you'll be taken to the Foxit APIs Dashboard.\n    \n\n> üéâ All new accounts are eligible for a 365-day free trial of Foxit APIs. \n  \n\n<img src=\"https://content.pstmn.io/cf5e4948-2c26-4dda-9797-18992fda2edd/aW1hZ2UucG5n\" alt=\"Foxit%20Developer%20Portal\" width=\"596\" height=\"442\">\n\n## Step 2: Request API Access Credentials\n\nOnce logged in:\n\n- Navigate to the Foxit APIs Dashboard.\n    \n- On the left panel, click `Orders`.\n    \n- It will show all the plans along for their respective set of APIs.\n    \n\n<img src=\"https://content.pstmn.io/2556e43c-a016-48ab-9ec4-34da5e19a509/aW1hZ2UucG5n\" alt=\"Orders%20section\" width=\"597\" height=\"187\">\n\n- Choose the APIs you want to use:\n    \n    - PDF Services API\n        \n    - PDF Embed API\n        \n    - Document Generation API\n        \n    - eSign API\n        \n\n<img src=\"https://content.pstmn.io/04c8b6ce-5afe-42ab-96ef-410b3448625b/aW1hZ2UucG5n\" width=\"580\" height=\"381\">\n\n- Select your plan type:\n    \n    - 365-Day API Free Trial Access ‚Äì Start testing instantly.\n        \n    - Request API Access ‚Äì Submit a request for production use by clicking on **\"Buy Now\"**.\n        \n\n> üí° Choosing Request API Access will prompt the Foxit team to review your application. Approval typically takes 24 hours. \n  \n\n## Step 3: Get Your API Sandbox Credentials\n\nIf you selected the Free Trial Access option:\n\n- Your temporary Client ID and Client Secret will be generated instantly after project creation.\n    \n- Copy your credentials and store them securely.\n    \n- Use the credentials in your integration to begin making API calls.\n    \n\n<img src=\"https://content.pstmn.io/8acd819c-ad7e-4ca1-8eaf-a8240931cb87/VW50aXRsZWQgKDMpLnBuZw==\" width=\"481\" height=\"565\">\n\n> üîí Note: Trial credentials are valid for 365 days and grant access to all supported API features. \n  \n\n## Step 4: Complete Purchase (For Production Access)\n\nIf you selected Buy Now for API Access:\n\n- You will be prompted to **Contact Sales**.\n    \n\n<img src=\"https://content.pstmn.io/8ed1a674-a709-44bf-b0fc-7b4702cb3bd7/aW1hZ2UucG5n\" alt=\"Contact%20Sales\" width=\"576\" height=\"297\">\n\n- Click on **\"contact sales\"** to send the email. Provide your purchase details.\n    \n- The Foxit team will review your request and grant access within **24 hours**.\n    \n- You will receive an email confirmation along with your **API credentials**.\n    \n\n---\n\n## Environments\n\nOur APIs use environment-specific URLs for seamless integration across PDF, Document Generation, and eSign services.  \nEnsure you use the correct server and authentication credentials for reliable and secure access.\n\n### PDF APIs\n\n#### US Server\n\nPlease use this US Region if you are US Client.\n\n| Server | Base URI |\n| --- | --- |\n| default | `https://na1.fusion.foxit.com` |\n\n### Document Generation APIs\n\n#### US Server\n\nPlease use this US Region if you are US Client.\n\n| Server | Base URI |\n| --- | --- |\n| default | `https://na1.fusion.foxit.com` |\n\n### eSign APIs\n\n#### US Server\n\nPlease use this US Region if you are a US Client.\n\n| Server | Base URI |\n| --- | --- |\n| default | `https://na1.foxitesign.foxit.com/api` |\n\n#### EU Server\n\nPlease use this EU Server if you are an EU Client.\n\n| Server | Base URI |\n| --- | --- |\n| default | `https://eu1.foxitesign.foxit.com/api` |\n\n---\n\n## üîê Authentication\n\nFoxit APIs use header-based authentication. To authorize your API requests, you'll need to obtain a Client ID and Client Secret.\n\n### PDF APIs\n\nFoxit PDF Services APIs use Basic Authentication via custom headers. To authenticate your API requests, you must include your Client ID and Client Secret in the request headers.\n\n#### Required Headers:\n\n- `client_id`: Your unique Client ID\n    \n- `client_secret`: Your associated Client Secret\n    \n\n> ‚ö†Ô∏è Important: Keep your credentials secure. Never expose them in public repositories or client-side code. \n  \n\n#### Header Example\n\n``` curl\ncurl {BASEURI}/{endpoint} \\\n--header \"client_id: YOUR_CLIENT_ID\" \\\n--header \"client_secret: YOUR_CLIENT_SECRET\" \\\n\n ```\n\n> Replace YOUR_CLIENT_ID and YOUR_CLIENT_SECRET with your actual credentials. Replace {endpoint} with the specific API endpoint you're calling. \n  \n\n### Document Generation APIs\n\nFoxit Document Generation APIs use Basic Authentication via custom headers. To authenticate your API requests, you must include your Client ID and Client Secret in the request headers.\n\n#### Required Headers:\n\n- `client_id`: Your unique Client ID\n    \n- `client_secret`: Your associated Client Secret\n    \n\n> ‚ö†Ô∏è Important: Keep your credentials secure. Never expose them in public repositories or client-side code. \n  \n\n#### Header Example\n\n``` curl\ncurl {BASEURI}/{endpoint} \\\n--header \"client_id: YOUR_CLIENT_ID\" \\\n--header \"client_secret: YOUR_CLIENT_SECRET\" \\\n\n ```\n\n> Replace YOUR_CLIENT_ID and YOUR_CLIENT_SECRET with your actual credentials. Replace {endpoint} with the specific API endpoint you're calling. \n  \n\n### eSign APIs\n\nFoxit eSign APIs have OAuth2.0 based authentication. Generate an access token using your `client_id` and `client_secret` to access eSign APIs.\n\nGenerate your access token using below cURL request\n\n```\ncurl --location '{BASEURI}/api/oauth2/access_token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'client_id=YOUR_CLIENT_ID' \\\n--data-urlencode 'client_secret=YOUR_CLIENT_SECRET' \\\n--data-urlencode 'scope=read-write'\n\n ```\n\n> Replace YOUR_CLIENT_ID and YOUR_CLIENT_SECRET with your actual credentials. Replace {endpoint} with the specific API endpoint you're calling. \n  \n\nThe bearer token is sent in the API request like this:\n\n```\ncurl {BASEURI} -H 'Authorization: Bearer {OAUTH_TOKEN}'\n\n ```\n\n# PDF Services APIs\n\nFoxit PDF APIs offer a comprehensive suite of tools designed to streamline document processing, conversion, and management. Whether you're uploading source files, manipulating PDFs, or tracking document tasks, these APIs provide robust and flexible capabilities for developers.\n\n## API Categories\n\n### üìÑ Document Upload\n\n- Upload source files for processing\n    \n- Supports multiple input formats\n    \n- Returns a unique `documentId` for subsequent operations\n    \n\n### üì• Document Download\n\n- Retrieve processed documents\n    \n- Supports file streaming with appropriate headers\n    \n- Optionally specify custom filenames\n    \n\n### üõ†Ô∏è PDF Management\n\n- **Security**: Apply or remove password protection\n    \n- **Analysis**: Compare documents side-by-side\n    \n- **Modification**: Split, extract pages, flatten forms\n    \n- **Enhancement**: Add watermark, merge documents\n    \n- **Optimization**: Compress files, linearize for web\n    \n\n### üìÑ PDF Creation\n\n- Convert the following formats to PDF:\n    \n    - Microsoft Office files\n        \n    - Images (PNG, JPEG, etc.)\n        \n    - HTML pages\n        \n    - Text and RTF documents\n        \n\n### üîÑ PDF Conversion\n\n- Convert PDFs into other formats:\n    \n    - Word (.docx), Excel (.xlsx), PowerPoint (.pptx)\n        \n    - Images (JPEG, PNG)\n        \n    - HTML, Plain Text, RTF\n        \n\n### üìä Task Status\n\n- Track the progress of operations\n    \n- View real-time completion percentages\n    \n- Access final results or handle any errors gracefully\n    \n\n## üöÄ Quick Start Guide\n\nGetting started with Foxit PDF APIs is fast and simple. Whether you're working on a web or backend platform, you can integrate document workflows in just a few steps.\n\nFollow the steps below:\n\n### üîê API Keys for Authorization\n\nBefore making any API calls, you‚Äôll need your developer credentials. Follow these steps:\n\n- **Create Your Account**  \n    Sign up on the [Foxit API Developer Portal](https://developer-api.foxit.com/). This gives you access to API tools and dashboard, see detailed instructions at [Create Account](#getting-started).\n    \n\n- **Get API Trial Credentials**  \n    After account setup, retrieve your **Client ID** and **Client Secret** used for authenticating API requests. See detailed instructions at [Get Foxit API Trial Credentials](#get-foxit-cloud-api-trial-credentials).\n    \n\n### ‚öôÔ∏è Document Operation Workflow\n\n**1\\. üì§ Uploading a Document**\n\n- Use the `POST /pdf-services/api/documents/upload` endpoint to upload your source file.\n    \n- Submit your file using `multipart/form-data`.\n    \n- Include your Client ID and Client Secret in the request headers for authentication.\n    \n- Receive a unique `documentId` that will be used for all subsequent API calls.\n    \n\n**Sample cURL Request**\n\n``` bash\ncurl --location 'https://na1.fusion.foxit.com/pdf-services/api/documents/upload' \\\n--header 'Content-Type: multipart/form-data' \\\n--header 'client_id: YOUR_CLIENT_ID' \\\n--header 'client_secret: YOUR_CLIENT_SECRET' \\\n--form 'file=@\"/C:/Users/Downloads/FoxitAPISampleDoc.pdf\"'\n\n ```\n\n- **Supported formats:** PDF, Microsoft Office files, images, and plain text. extensions include: `.jfif`, `.pjpeg`, `.jpeg`, `.jpe`, `.pjp`, `.jpg`, `.jpx`, `.bmp`, `.dib`, `.png`, `.gif`, `.tiff`, `.tif`, `.pdf`, `.doc`, `.docx`, `.xls`, `.xlsx`, `.ppt`, `.pptx`, `.txt`, `.html`, `.htm`, `.shtml`, `.zip`, `.gd`, `.rtf`, `.dot`, `.dotx`, `.docm`, `.dotm`, `.wpd`, `.xlt`, `.xltx`, `.xlsm`, `.xlsb`, `.xltm`, `.csv`, `.pot`, `.potx`, `.pptm`, `.ppsx`, `.ppsm`, `.potm`, `.vsd`, `.vsdx`, `.wps`, `.hwp`, `.ofd`\n    \n\n**2\\. üõ†Ô∏è Perform Operation**\n\n- Create, Convert, Flatten, Split or Compress with their respective operation endpoints. Please check out [API reference](#place-holder) for endpoint details.\n    \n- Submit a request with `documentId` and operation-specific parameters.\n    \n- All operations are **asynchronous**.\n    \n- Receive a `taskId` to monitor the operation's progress.\n    \n\n**3\\. ‚úÖ Fetch Operation Status**\n\n- Use the `GET /pdf-services/api/tasks/:task-id` endpoint with the provided `taskId` to track the status of your operation.\n    \n- Monitor the current status, which could be one of the following:  \n    PENDING, PROCESSING, COMPLETED, or FAILED.\n    \n- Progress is tracked in real-time as a percentage (0‚Äì100%).\n    \n- Once the task is successfully completed, a `resultDocumentId` will be returned, which you‚Äôll use to download the final file.\n    \n\n**Sample cURL Request**\n\n``` bash\ncurl --location 'https://na1.fusion.foxit.com/pdf-services/api/tasks/6838c9c66b1cc44ab40040c5' \\\n--header 'client_id: YOUR_CLIENT_ID' \\\n--header 'client_secret: YOUR_CLIENT_SECRET' \\\n--header 'Authorization: Basic Og=='\n\n ```\n\n**Sample Response**\n\n``` json\n{\n    \"taskId\": \"6838c9cxxb1cc44abxxx40c5\",\n    \"status\": \"COMPLETED\",\n    \"progress\": 100,\n    \"resultDocumentId\": \"683xx9cf6b1ccxxxb40040cb\"\n}\n\n ```\n\n**4\\. üì• Download Result**\n\n- Use the `GET /api/documents/:document-id/download` endpoint with the `resultDocumentId` to retrieve the final processed document.\n    \n- Download supports content streaming with appropriate content-type headers.\n    \n- Optionally specify a custom filename.\n    \n\n``` bash\ncurl --location 'https://na1.fusion.foxit.com/pdf-services/api/documents/6838c9cf6b1cc44ab40040cb/download?filename=financial-report-2023' \\\n--header 'client_id: YOUR_CLIENT_ID' \\\n--header 'client_secret: YOUR_CLIENT_ID'\n\n ```\n\n---\n\n## ‚ö†Ô∏è Error Handling\n\nThe Foxit PDF API implements standard HTTP status codes to indicate the outcome of API requests. In the event of an error, a structured response is returned, making it easier for developers to diagnose and resolve issues.\n\n| Status Code | Meaning | Description |\n| --- | --- | --- |\n| `400` | Bad Request | The request parameters are missing or malformed. |\n| `401` | Unauthorized | The API key is missing or invalid. |\n| `404` | Not Found | The requested resource could not be located. |\n| `413` | Payload Too Large | The file exceeds the maximum allowed size. |\n| `500` | Internal Server Error | An unexpected error occurred on the server side. |\n\n### üßæ Error Response Format\n\nEach error response includes the following fields:\n\n- **Error Code**: Identifies the type of error.\n    \n- **Message**: A human-readable explanation of what went wrong.\n    \n- **Details (optional)**: Additional technical information or context to assist with debugging.\n    \n\n### ‚úÖ Best Practices\n\n### Asynchronous Operations:\n\n- Remember that all operations are asynchronous.\n    \n- Always confirm task status before attempting to download results.\n    \n- Integrate thoughtful retry logic for reliable task completion.\n    \n\n---\n\n## File Size Limits\n\n- The maximum file size supported for PDF Services APIs is **100 MB**.\n    \n- For Word to PDF conversion, the file size is limited to **50 MB**.\n    \n\n---\n\n## Support & Assistance\n\n- **Foxit Support Center:** Your first stop for comprehensive help resources, tutorials, and FAQs. For more details check out [Support Center.](https://kb.foxit.com/s/)\n    \n- **API Status Updates:** Keep an eye on the health and performance of our APIs.\n    \n- **Direct Technical Support:** For personalized troubleshooting and issue resolution, connect with our technical experts at [<b>support@foxitsoftware.com</b>](https://mailto:support@foxitsoftware.com)**.**\n    \n\n---\n\n## Next Steps\n\nTo get the most out of your integration, here's what we recommend:\n\n- **Dive into the API Reference:** For comprehensive details on every endpoint, request, and response, explore our full API documentation.\n    \n- **Try the Quick Start Example:** Get up and running fast by working through our quick start guide. It's the best way to see the API in action.\n    \n- **Contact Sales for Production Keys:** When you're ready to go live, reach out to our sales team to acquire your production API keys.  \n    [Contact Sales](https://mailto:jason_welch@foxitsoftware.com)\n    \n\n# Document Generation APIs\n\nThe Document Generation API enables dynamic creation of professional, data-driven documents using pre-defined templates. By embedding smart text tags within your documents and supplying structured data, you can automate the generation of PDF or DOCX files with precision and efficiency.\n\nTo automate the creation of documents with dynamic data, Foxit offers two powerful APIs designed to work together seamlessly:\n\n1. **üîç Analyze Document API**  \n    This API scans your uploaded template document to detect all embedded text tags (placeholders). It returns a detailed list of identified tags, enabling you to understand which variables need to be mapped and how to structure your input data.\n    \n2. **üìÑ Generate Document API**  \n    This API takes your Word template (as a Base64-encoded string) and structured input data (JSON), and dynamically injects values into the corresponding text tags. The result is a fully formatted, ready-to-use document output in PDF or DOCX format.\n    \n\nThese APIs streamline the entire document automation process from understanding your template structure to generating polished, data-populated documents.\n\n---\n\n## üìù How to Generate Documents\n\nWe offer RESTful APIs for document generation, enabling users to send requests and receive dynamic document outputs. These endpoints support key operations such as template creation, data submission, and document generation. All communications are secured, with built-in mechanisms to ensure authentication and authorization of each request.  \nOur APIs empower you to generate documents efficiently through the following key steps:\n\n‚úîÔ∏è Prepare Word template with text tags\n\n‚úîÔ∏è Prepare JSON with matching keys\n\n‚úîÔ∏è Convert document to Base64\n\n‚úîÔ∏è Make API call to generate final document\n\nLet's dive into the step by step process\n\n## üß© Step 1: Create Your Template\n\nTo generate a document, the first step is to create a template where values can be dynamically inserted.  \nThis template could be any document such as a contract, agreement, or form.\n\n### Add Text Tags on Document\n\nText tags act as placeholders that will be replaced with actual values when data is sent through the API.  \nYou can add text tags directly within your Word document using double curly braces, like `{{Foxit}}`.\n\nThe invoice template below showcases the use of dynamic elements like styled tables, repeating data, calculations, and conditional logic. These features help generate fully customized documents during document generation.\n\n<img src=\"https://content.pstmn.io/306935ac-9052-4be7-b7d8-ac6eb0b17d42/V29yZCBUZW1wbGF0ZSBFeGFtcGxlLnBuZw==\" alt=\"Word%20Template%20Screenshot\" width=\"545\" height=\"431\">\n\n| Reference Number | Description |\n| --- | --- |\n| 1 | A page header. Each page can have its own header or you can repeat headers across pages. |\n| 2 | A reserved keyword, `today`, formatted in a specific data format. (reference here) |\n| 3 | A simple string `AccountName` which will pre-populated with a string value using the Document Generation API |\n| 4 | A Date Field formatted using the `\\@ MM/dd/yyyy` formatting parameter. |\n| 5 | A table defined within a table group which will create multiple tables depending on unique product codes. |\n| 6 | A `=SUM(ABOVE)` calculation field that will dynamically populate the total purchase price based on the values provided via `documentValues` of the last column in the table. |\n| 7 | A native merge field used to conditionally generate the terms and conditions depending on if the `ShowAgreement` field is passed as `true` when making the `GenerateDocument` call |\n| 8 | An eSignature text tag for dynamically creating an eSignature field. The signature field will be automatically placed when uploaded into Foxit eSign.  <br>  <br>Note that the signature field is declared as grey in this example, but can be fully transparent in an actual document. |\n\nWhen merged, the placeholder merge fields are replaced with the data provided from the `documentValues` JSON object from Generate Document API Request. This merged template appears as below:\n\n<img src=\"https://content.pstmn.io/e3cce981-512c-4ab2-9302-a2366f70a7aa/V29yZFRlbXBsYXRlR2VuZXJhdGVkLnBuZw==\" width=\"580\" height=\"524\">\n\n### How to Add Text Tags\n\nText tags in the document must match the variable names in your JSON payload. Here's how you can use them with different data formats:\n\n#### **Simple Strings**\n\nYou can directly insert simple string variables in your template using curly braces.  \nExample:\n\n```\nMy name is {{name}}; I am {{age}} years old.      \n\n ```\n\n**JSON Example**:\n\n```\n{\n    \"name\":\"Peter\", \n    \"age\":30\n}    \n\n ```\n\n_Output_: `My name is Peter; I am 30 years old.`\n\n#### **Dates**\n\nYou can insert the current date or format specific date fields using text tags in your document.  \nTo insert today's date use the following text tag:\n\n```\n{{today \\@ MM/dd/yyyy}}     \n\n ```\n\n> Note: You do not need to pass this value in the JSON. The tag will automatically insert the current system date in the specified format. \n  \n\nFor Date Field formatting: `{{FIELD_NAME \\\\@ DATE_FORMAT}}` text tag may be applied.  \nTo format a date from your JSON see the below example:\n\n```\nPayment Due Date is {{PaymentDueDate \\@ MM/dd/yyyy}}\n\n ```\n\n**JSON Example**:\n\n```\n{\n    \"PaymentDueDate\": \"06/02/2025\"\n}    \n\n ```\n\n_**Output**_: `Payment Due Date is 06/02/2025`\n\nThe following field codes are supported for Date Format:\n\n| **Date Format Supported** | **Field Codes** |\n| --- | --- |\n| Month/Day/Year | `MM/dd/yyyy` |\n| Non-padded month/day | `M/d/yyyy` |\n| Day/Month/Year (EU format) | `dd/MM/yyyy` |\n| ISO 8601 format | `yyyy-MM-dd` |\n| Full month name | `MMMM d, yyyy` |\n| Abbreviated month | `MMM d, yyyy` |\n| European text format | `d MMM yyyy` |\n| Full date + month names | `dddd, MMMM d, yyyy` |\n| Abbreviated weekday/month | `ddd, MMM d` |\n\n#### **Tables**\n\nYou can dynamically populate tables with rows and columns using text tags. To begin a table, use the `{{TableStart:field_name}}` tag. To close the table, add the `{{TableEnd:field_name}}` tag in the last column of the final row in your Word document.\n\nExample usage in a Word document:\n\n| SI | Qty | Total |\n| --- | --- | --- |\n| `{{TableStart:OpportunityLineItems}}` | `{{OpportunityLineItems.quantity}}` | `{{OpportunityLineItems.totalprice}}` `{{TableEnd:OpportunityLineItems}}` |\n\nThe tags like `{{OpportunityLineItems.quantity}}` and `{{OpportunityLineItems.totalprice}}` will be replaced with actual values from your JSON input during document generation. Each entry in the `OpportunityLineItems` array will generate a new row in the table.\n\n_Output_:\n\n<img src=\"https://content.pstmn.io/caf28a92-e031-4ca3-9fb2-5e8f302d6a78/aW1hZ2UucG5n\" alt=\"Output%20of%20Table%20Values\" width=\"604\" height=\"403\">\n\n#### **Formula for SUM**\n\nThe text tag `=SUM(ABOVE)` calculation fields are supported in tables. If a `=SUM(ABOVE)` field is added as its own row in a table, it will take the values of the last column in the table and dynamically calculate the total sum.\n\nExample usage of SUM formula:\n\n| SI | Qty | Total |\n| --- | --- | --- |\n| `{{TableStart:OpportunityLineItems}}` | `{{OpportunityLineItems.quantity}}` | `{{OpportunityLineItems.totalprice}}` `{{TableEnd:OpportunityLineItems}}` |\n|  |  | **Total Purchase Price**: `{{=SUM(ABOVE)}}` |\n\n_Output_:\n\n<img src=\"https://content.pstmn.io/8bbc1067-7bd6-4041-ba68-6ce171bb9aa2/aW1hZ2UucG5n\" alt=\"Output%20of%20SUM%20formula\" width=\"608\" height=\"414\">\n\n#### **eSignature Fields**\n\nAn eSignature text tag for dynamically creating an eSignature field. The signature field will be automatically placed when uploaded into Foxit eSign.\n\nExample of esignature field text tag:\n\n_For Signer 1_\n\n```\n${signfield:1:y:____}\n\n ```\n\n_For Signer 2_\n\n```\n${signfield:2:y:____}\n\n ```\n\nCheck out more examples from our eSign API documentation here(link)\n\n#### Adding Conditional Blocks\n\nTo add **conditional logic** in your Word template, you can use mail merge fields to render specific content based on the data you provide.\n\n##### Enable Field Code View\n\nFirst, enable the visibility of field codes in your document:\n\n- Press `ALT + F9` to toggle field code view.\n    \n\n##### Insert a Conditional Field\n\nNavigate to the part of the document where you want to add a condition. Then:\n\n1. Go to the **Insert** tab.\n    \n2. Click on **Quick Parts**.\n    \n3. Select **Field**.\n    \n\nThis opens the **Field Editor**. In the left-hand list, scroll down and select If:\n\n<img src=\"https://content.pstmn.io/71f7cb7e-9c71-48ef-b6ec-be62e9ed5ff1/c2hvdDEucG5n\" width=\"690\" height=\"446\">\n\nThis will insert an `IF` field into your document (make sure you're still viewing field codes). Right click and select toggle to view field:\n\n<img src=\"https://content.pstmn.io/eccedcb0-a5d4-4e06-9b96-4a399838d6b3/c2hvdDIucG5n\" width=\"258\" height=\"49\">\n\n##### IF Field Syntax\n\n```\n{ IF \"SOMEVALUE\" = \"SOMECONDITION\" \"text to be shown if true\" \"text to be shown if false\" }\n\n ```\n\nYou can also use other operations like `<`, `<=`, `>`, and `>=`.\n\n##### Insert the Field You Want to Evaluate\n\n1. Place your cursor after `IF` inside the brackets.\n    \n2. Go to **Insert > Quick Parts > Field**, and choose **MergeField**.\n    \n3. Enter the name of the field you want to check (e.g., a field from your JSON data).\n    \n\n<img src=\"https://content.pstmn.io/48a95e69-9465-4490-928f-33667e303db7/c2hvdDMucG5n\" width=\"690\" height=\"446\">\n\nClick OK, and it will be added to your IF condition.\n\n<img src=\"https://content.pstmn.io/ca68ed59-f3e1-417b-9e18-c03e4b2651ea/c2hvdDQucG5n\" width=\"720\" height=\"48\">\n\nExample:\n\n```\n{ IF \"Country\" }  \n\n ```\n\n##### Complete the IF Statement\n\nYou're almost there. The last step is to add the condition and define the output text for both the `true` and `false` cases. Technically both are optional and can be empty strings. Here we've added a check for the value of `country`:\n\n<img src=\"https://content.pstmn.io/4bb7b8d2-08e1-4e27-b47b-34dcd24c80d1/c2hvdDUucG5n\" width=\"857\" height=\"85\">\n\nExample:\n\n```\n{ IF \"Country\" = \"true\" \"Agreement text if true\" \"Some text if other than true\" }  \n\n ```\n\n## üóÇÔ∏è Step 2: Map Data with JSON\n\nThe next step is to prepare the JSON data that will be used to inject values into your Word document template.\n\nThis JSON should be included in the request body of the Document Generation API (`/document-generation/api/GenerateDocumentBase64`) under the `documentValues` parameter as key-value pairs.\n\nEach key in the JSON should match the corresponding text tag used in your template document.\n\nLets use example of real text tags and map their values in JSON.\n\n- **Simple String** - `{{AccountName}}`, `{{Name}}`\n    \n- **Table** - `{{TableStart:OpportunityLineItems}}`, `{{OpportunityLineItems.quantity}}`, `{{OpportunityLineItems.unitprice \\# Currency }}`, `{{OpportunityLineItems.totalprice \\# Currency}}`, `{{TableEnd:OpportunityLineItems}}`\n    \n- **Date** - `{{today \\@ MM/dd/yyyy}}`, `{{PaymentDueDate \\@ MM/dd/yyyy}}`\n    \n- **SUM formula** - `{{=SUM(ABOVE) \\# Currency}}`\n    \n- **Conditional Formula** - `ShowAgreement`\n    \n\n_JSON body request_:\n\n```\n{\n  \"outputFormat\": \"pdf\",\n  \"currencyCulture\": \"en-US\",\n  \"documentValues\": {\n    \"ShowAgreement\": \"true\",\n    \"PaymentDueDate\": \"06/02/2025\",\n    \"AccountName\": \"Jordan O'Connor\",\n    \"Name\": \"Jordan\"\n    \"OpportunityLineItems\": [\n    {\n        \"OpportunityLineItems.quantity\": \"1\",\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\n        \"OpportunityLineItems.totalprice\": \"3500.00\"\n    },\n    {\n        \"OpportunityLineItems.quantity\": \"2\",\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\n        \"OpportunityLineItems.totalprice\": \"7000.00\"\n    },\n    {\n        \"OpportunityLineItems.quantity\": \"1\",\n        \"OpportunityLineItems.unitprice\": \"2100.00\",\n        \"OpportunityLineItems.totalprice\": \"2100.00\"\n    }\n    ]\n  },\n  \"base64FileString\": \"YOUR_DOCUMENT_BASE64_STRING\"\n}\n\n ```\n\n## üöÄ Step 3: Upload and Generate Document\n\nThe final step is to **convert your Word document template to a Base64-encoded string** and include it in the request body of the **Document Generation API**  \n`/document-generation/api/GenerateDocumentBase64`.\n\nTo specify the output format:\n\n- Set the parameter **`outputFormat`** to `\"DOCX\"` to receive a **Word document** as output.\n    \n- Set it to `\"PDF\"` to receive a **PDF file** instead. (Default is PDF)\n    \n\nThe API will inject the values from your JSON into the template and return the generated document in the specified format.\n\n<img src=\"https://content.pstmn.io/c0e29d8f-414f-48c6-abb0-9ccc0e3b78a7/aW1hZ2UucG5n\" width=\"600\" height=\"655\">\n\n---\n\n## üöÄ Quick Start Guide\n\nGetting started with Foxit Document Generation APIs is designed to be **fast and simple**. Whether you're developing for a web or backend platform, you can seamlessly integrate our powerful document generation capabilities into your workflows in just a few steps.\n\n**Begin by following these steps:**\n\n### üîê API Keys for Authorization\n\nBefore we proceed, make sure you have finished the account creation step to get your trial or production credentials.  \nIf you haven't yet, you can do so by following the below:\n\n- **Create Your Account**  \n    Sign up on the [Foxit Cloud API Developer Portal](http://fusion-deployed.foxit.com/). This gives you access to API tools and dashboard, see detailed instructions at [Create Account](#create-account).\n    \n- **Get API Trial Credentials**  \n    After account setup, retrieve your **Client ID** and **Client Secret** used for authenticating API requests. See detailed instructions at [Get Foxit Cloud API Trial Credentials](#get-foxit-cloud-api-trial-credentials).\n    \n\n### üîÅ Add Text Tags on Document\n\nFor this example, we‚Äôll be using a DOCX file. You can create it using any preferred online or offline document editor. Once your DOCX is ready, insert the required text tags into the file. Refer to the screenshots and sample tags below for guidance.\n\n<img src=\"https://content.pstmn.io/b59c1204-c1a0-4d88-a8f4-ad30a789a519/aW1hZ2UucG5n\" width=\"606\" height=\"637\">\n\n### üõ†Ô∏è Prepare Documents with Text Tags\n\nText Tags allow you to dynamically populate documents by linking placeholder text with values from your JSON input data using the Document Generation API.\n\nA **Text Tag** is a plain text placeholder embedded in your document. It is wrapped with double curly braces ({{ }}), where the content inside represents a variable or field name from your JSON data.\n\nWhen a document is generated, these tags are automatically replaced with actual values.  \nExample Tags:\n\n- `Account Name: {{Account.Name}}`\n    \n- `Payment Due Date: {{CloseDate}}`\n    \n\n### üìä Analyze the Documents for Text Tags\n\nDo you have existing documents embedded with text tags and need to programmatically identify them? The **Analyze Document API** is your solution.\n\nThis API allows you to extract all defined text tags from your template documents. This capability is crucial for programmatically mapping field values, ensuring you have all the necessary variables to construct your JSON payload when generating new documents using the Document Generation API.\n\n#### How it Works\n\nSimply send your document (e.g., as a Base64 string) to the Analyze Document API. It will parse the document and return a structured list of all detected tags, categorized for easy use.\n\n#### Example cURL Request:\n\n```\ncurl --location 'https://na1.fusion.foxit.com/document-generation/api/AnalyzeDocumentBase64' \\\n--header 'client_id: 7bxxx0xx0dxx4xxdbxx5axx1axxf3xxe' \\\n--header 'client_secret: 9a8xxx4d0xx0xx2xx0xx9xx9xx90xxCx' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"base64FileString\": \"YOUR_DOCUMENT_BASE64_STRING\"\n}'\n\n ```\n\n#### Example of Text Tags Analysis:\n\n```\n{\n    \"singleTagsString\": \"AccountName,PaymentDueDate,ROW_NUMBER,OpportunityLineItems.quantity,OpportunityLineItems.unitprice,OpportunityLineItems.totalprice,Name,today,ShowAgreement\",\n    \"doubleTagsString\": \"OpportunityLineItems\"\n}\n\n ```\n\nIn this example:\n\n- `singleTagsString` lists all individual text tags found. These correspond to fields that expect a single value.\n    \n- `doubleTagsString` identifies tags that typically represent tables or repeating sections (e.g., `OpportunityineItems` suggests a list of line items).\n    \n\nThis output provides a ready-to-use list of all dynamic fields within your template, streamlining your integration process.\n\n## Generate Documents\n\nThis is the final step in the process: generating your documents by dynamically injecting data using a JSON input. This allows you to programmatically create fully populated documents from your templates.\n\nThe JSON payload you send will contain variables that directly match the text tags within your template document. The values you provide for each variable will then be mapped onto the document, enabling comprehensive content generation.\n\n#### Example cURL Request:\n\nUse the following cURL request to generate a document. Remember to replace `\"xx5exx5xxfdxxbxx9xxxxxba8xx98xx\"` with your actual Bearer Token and `\"YOUR_DOCUMENT_BASE64_STRING\"` with your Base64 encoded template file string.\n\n```\ncurl --location 'https://na1.fusion.foxit.com/document-generation/api/GenerateDocumentBase64' \\\n--header 'client_id: 7bxxx0xx0dxx4xxdbxx5axx1axxf3xxe' \\\n--header 'client_secret: 9a8xxx4d0xx0xx2xx0xx9xx9xx90xxCx' \\\n--header 'Content-Type: application/json' \\\n--data '{\n  \"outputFormat\": \"pdf\",\n  \"currencyCulture\": \"en-US\",\n  \"documentValues\": {\n    \"ShowAgreement\": \"true\",\n    \"PaymentDueDate\": \"06/02/2025\",\n    \"AccountName\": \"Jordan O'\\''Connor\",\n    \"Name\": \"Jordan\",\n    \"OpportunityLineItems\": [\n    {\n        \"OpportunityLineItems.quantity\": \"1\",\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\n        \"OpportunityLineItems.totalprice\": \"3500.00\"\n    },\n    {\n        \"OpportunityLineItems.quantity\": \"2\",\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\n        \"OpportunityLineItems.totalprice\": \"7000.00\"\n    },\n    {\n        \"OpportunityLineItems.quantity\": \"1\",\n        \"OpportunityLineItems.unitprice\": \"2100.00\",\n        \"OpportunityLineItems.totalprice\": \"2100.00\"\n    }\n    ]\n  },\n  \"base64FileString\": \"YOUR_DOCUMENT_BASE64_STRING\"\n}'\n\n ```\n\nThis process allows you to effectively automate the creation of documents by programmatically populating their content.\n\n## ‚ö†Ô∏è Error Handling\n\nThe Foxit Document Generation API implements standard HTTP status codes to indicate the outcome of API requests. In the event of an error, a structured response is returned, making it easier for developers to diagnose and resolve issues.\n\n| Status Code | Meaning | Description |\n| --- | --- | --- |\n| `400` | Bad Request | The request parameters are missing or malformed. |\n| `401` | Unauthorized | The API key is missing or invalid. |\n| `404` | Not Found | The requested resource could not be located. |\n| `413` | Payload Too Large | The file exceeds the maximum allowed size. |\n| `500` | Internal Server Error | An unexpected error occurred on the server side. |\n\n### üßæ Error Response Format\n\nEach error response includes the following fields:\n\n- **Error Code**: Identifies the type of error.\n    \n- **Message**: A human-readable explanation of what went wrong.\n    \n- **Details (optional)**: Additional technical information or context to assist with debugging.\n   \n---\n \n## File Size Limits\n\nThe initial template file must be less than **4 MB** in size to ensure optimal processing and performance.\n    \n\n---\n\n## Next Steps\n\nTo get the most out of your integration, here's what we recommend:\n\n- **Dive into the API Reference:** For comprehensive details on every endpoint, request, and response, explore our full API documentation.\n    \n- **Try the Quick Start Example:** Get up and running fast by working through our Quick Start guide. It's the best way to see the API in action.\n    \n- **Contact Sales for Production Keys:** When you're ready to go live, reach out to our sales team to acquire your production API keys.  \n    [Contact Sales](https://mailto:jason_welch@foxitsoftware.com)\n    \n\n# eSign APIs\n\nFoxit eSign is the #1 easiest and most collaborative contract management and eSignature software with the most robust functionality amongst its peers. This page will help you configure or install the Foxit eSign APIs and SDKs.\n\n## Prepare Documents\n\n### üìß Creating an Envelope from PDF Files\n\nWith Foxit eSign API you can create a folder of documents and send them for signature right from your own application.\n\nTo create a folder of documents from PDF files you can either provide publicly accessible URLs to PDF documents or pass PDF documents as multipart form data and other parameters about the recipient parties, etc.\n\nWhile creating the documents from PDF files you can define various fields like text field or signature field within the document using simple Text Tags. You can assign various properties for these fields like party responsible for filling the data etc. These Text Tags will then be converted to Foxit eSign document fields.\n\nOr if you don't want to use Text Fields within the document, then you can also request to create an embedded document preparing session where you can manually drag and drop each field on the document itself without leaving your application. PDF documents with text tags.\n\n### üîÑ Preparing PDF documents with text tags\n\nHere is a PDF file with Text Tag samples: [Sample Document](https://developersguide.foxitesign.foxit.com/uploads/FoxiteSignAPISampleDoc.pdf).\n\nTo send a PDF document from your application for signature, you need to define the signature and other Foxit eSign fields in the documents, and who is allowed to fill in the data. Foxit eSign supports simple Text Tags.\n\nA Text Tag is a simple text block within your PDF document which defines the field type, the party who is responsible for it, and other field specific options.\n\nQuick Tip: When you apply Text Tags to the document, Foxit eSign does not remove or replace the Text Tags text. You can hide codified Text Tags by using the same font color as the background of the document. So the Text Tags can be used by Foxit eSign processes and it will not be visible on the document.\n\n<img src=\"https://content.pstmn.io/04314e84-d70e-4c01-9a24-5532409ddd1e/aW1hZ2UucG5n\" width=\"775\" height=\"157\">\n\n1. Field Type: One of 'textfield', 'formulafield', 'signfield', 'initialfield', 'datefield', 'checkboxfield', 'attachmentfield', 'imagefield', 'accept', 'decline' or short notations.\n    \n2. Party Number (optional): the sequence number of the recipient party from the parties list which will be responsible for filling this field.\n    \n3. Required/Optional Field: 'y' makes the field mandatory to be filled before signing while 'n' makes it optional.\n    \n4. Field Name: Optional. Assign a name to this field. Assigning names to fields is a good practice for better productivity as named fields are downloaded in the document form data report and all same named fields in a document will automatically take up the value typed once in any one of those fields. Please note not to include any space character for the name of field (or anywhere else in the Text Tag) as it will then not recognize that word as a proper Text Tag syntax, instead you can use underscore which will then be replaced with space character in the final Foxit eSign field.\n    \n5. Underscores: Optional. A way to increase the field's width.\n    \n\nThere are other options that you can add before underscores for various other properties as follows:\n\n### Sizing\n\nBy default, the new field has the same width and height as the original text tag, however it can be overridden by adding custom width as 90 and height as 20 (in pixels):\n\n`${textfield:1:y:field_name:90:20}`\n\n### Validation\n\nYou also can validation information for text fields inside the tags. For example, the max number of characters required are 12 and only Numbers:\n\n`${textfield:1:y:field_name:90:20:12:Numbers}`\n\nAnd if you want to stick to default height and width for the new field (which is the height and width of the text tag)\n\n`${textfield:1:y:field_name:::12:Numbers}`\n\nNOTE: validation inputs are currently only available for textfields\n\n### Font Style\n\nYou can also control the font style for each new field via their text tags. For example, the following tag creates a textfield with 14 font size and gray as font color\n\n`${textfield:1:y:field_name:90:20:12:Numbers:14:gray}`\n\nYou can pass pre-filled value to the textfields via its text tags as shown below. Please make to replace any space character with '_' (underscore) else the system may not recognize that text tag.\n\n`${textfield:1:y:field_name:90:20:12:Numbers:14:gray:default_value}`\n\n**NOTE**: pre-filled values are currently only available for textfields\n\n### Mark as Dependent Field\n\nYou can make a field dependent on any other field value. To set a field dependent on another field, select the values of the independent field that will enable the signer to see the dependent field.\n\n`${t:1:y:field_name:90:20:12:Numbers:14:gray:default_value:parent_field_name:value_of_parent_field:options}`\n\n| Column | Description |\n| --- | --- |\n| parent_field_name | Name of the parent field.  <br>NOTE: Only the following type of fields are allowed as the parent or independent field: `textfields`, `textbox, checkbox`, `radiobutton`, `dropdown` |\n| value_of_parent_field | Value of the parent field.  <br>NOTE: In the case of radio button and checkbox, the value can be either checked or unchecked |\n| options (optional) | In the case of textfield, the value can be either `isblank` or `allowNull` or `contains` |\n|  |  |\n\n### **The full list of Field Types is:**\n\nTextField - `textfield` or `t` (short notation)  \nTextBox - `textboxfield` or `tb` (short notation)  \nSignature - `signfield` or `s`  \nFormulaField - `formulafield` or `ff`  \nInitial - `initialfield` or `i`  \nDate - `datefield` or `d`  \nCheckbox - `checkboxfield` or `c` (recommended)  \nRadio Button - `radiobuttonfield` or `rb` (recommended)  \nSecured Field - `securedfield` or `sc`  \nAttachment Field - `attachmentfield` or `a`  \nImage Field - `imagefield` or `img`  \nSigner Name Field - `textfield` or `t`  \nDate Signed - `datefield` or `d`  \nAccept Button - `accept` or `ab`  \nDecline Button - `decline` or `db`  \nPayField - `payfield` or `pf`  \nExamples\n\n- `${textfield:1:y:client_name:________}` - A mandatory textfield which is assigned to party number 1 with field name as 'client name'.\n    \n- `${tb:1:n:________________}`\\- An optional textbox assinged to party 1.\n    \n- `${signfield:1:y:____}` - A mandatory signature field assigned to party number 1.\n    \n- `${i:2:n}` - An optional initial field assigned to party number 2.\n    \n- `${datefield:2:n::____}` - An optional date field assigned to party number 2 with empty field name.\n    \n- `${c:2:y:male:gender}` - A checkbox assigned to party number 2 with initial value as checked with name 'male' and group 'gender'.\n    \n- `${c:1:y:yes:group-y}` - A checkbox assigned to party number 1 with initial value as checked with name 'yes' and group 'group'. 'group-y' means group mandatory.\n    \n- `${rb:1:n:yes:grp1}` - An un-selected radio button assigned to party 1 with name yes and grp 'grp1'.\n    \n- `${rb:1:y:no:group2-y}` - A radio button assigned to party number 1 with initial value as checked with name 'no' and group 'group2'. 'group2-y' means group mandatory.\n    \n- `${sc:2:n:Credit_Card_Number:4:____}` - A secured field assigned to party 2 which is optional with name 'Credit Card Number' and only last 4 characters to remain unmasked.\n    \n- `${attachmentfield:1:y:____}` - A mandatory attachment field assigned to party number 1.\n    \n- `${img:1:n:stamp_image:120:50:__}` - An optional image field is field name as 'stamp image' with 120-pixel width and 50-pixels height which is assigned to party number 1.\n    \n- `${textfield:1:y:Signer_Name:________}` - A mandatory signer name field which is assigned to party number 1 with field name as 'Signer_Name'. This field is auto-populated once the document is opened by the signer.\n    \n- `${datefield:1:y:Date_Signed:_______}` - A mandatory date signed field assigned to party number 1 with field name as 'Date_Signed'. This field will auto populate once the document is opened by the signer.\n    \n- `${accept:1:90:20}` - A accept button field with 90-pixel width and 20-pixel height assigned to party number 1.\n    \n- `${decline:1:90:20}` - A decline button field with 90-pixel width and 20-pixel height assigned to party number 1.\n    \n- `${payfield:1:paymentType:payeeOptions:productAndService:paymentDescription:paymentAmount}` - Tag consolidates Payment Type, Product/Service, Payment Description, and Payment Amount to utilize the payment field.\n    \n\n**Personalized Fields:**\n\nWe can use the personalized field tag while sending it via API in place of process tags. Personalized field creation instructions can be seen in the help center.\n\nExamples:\n\n- `${field_7:1}` - Using this format, you can simply use the existing personalized field name and properties assigned to party #1.\n    \n- `${field_15:1:y:field_name:90:20}` - Using this format, you can simply use the existing personalized field name.\n    \n\n## üßë‚Äçü§ù‚Äçüßë Preparing PDF documents with Recipient Party Tags\n\nTo send a PDF document from your application for signature, you can either define the recipient parties in the documents itself or send the recipients information via API call. Foxit eSign supports simple Text Tags for recipient party information. In case both API call and Tags on the PDF are provided with Recipient Party information, Foxit eSign will use API call values.\n\nA **Recipient Party Tag** is a simple text block within your PDF document that defines the party, who is responsible for filling the fields.\n\n**Quick Tip:** When you apply Recipient Party tags to the document, Foxit eSign does not remove or replace the Recipient Party Tags text. You can hide codified Recipient Party Tags by using the same font color as the background of the document, so the Recipient Party tags will be used by Foxit eSign to derive signers. Still, the tags will not be visible on the document.\n\n<img src=\"https://res.cloudinary.com/apimatic/image/upload/v1649285065/61dc3e7910159e19c2e42018/61dc3e7910159e19c2e42018--image.png\" alt=\"alt text\">\n\n1. **Tag Type:** Accepts only value as rp, which is an identifier of recipient party tags.\n    \n2. **Party First Name:** First name of the recipient party.\n    \n3. **Party Last Name:** Last name of the recipient party.\n    \n4. **Party email:** Email of the recipient party.\n    \n5. **Party permission:** Use this field to assign folder permissions to a recipient. Can be any one of the following values: FILL_FIELDS_AND_SIGN, FILL_FIELDS_ONLY, SIGN_ONLY, VIEW_ONLY\n    \n6. **Party workflow sequence:** If the document is signed in sequence, the recipient party will receive the notification as per the workflow sequence number. It should be starting with 1 like 1,2,3,4, etc.\n    \n7. **Party sequence:** Assign a sequence number to a recipient in the list of recipient parties. Use unique sequence numbers or party numbers for each party, starting with 1 like 1,2,3,4, etc.\n    \n\n## üíΩ Adding Fields in Documents via API\n\nFields can also be added on the documents via an array of JSON objects in the input data for the API request. This way of adding fields gives you more control over the size of fields, their font color and font size, etc.\n\nWhile adding the fields on each document page, the position of the fields is relative to the top left corner of that page.\n\nEach field object must contain the following values:\n\n1. type - (string) the type of field to be added at this place. Can be one of these values: text|signature|initial|textbox|date|secure|checkbox|radiobutton|dropdown|attachment|image|accept|decline.\n    \n2. x - (int) the x location coordinate of the top left corner of the field in pixels\n    \n3. y - (int) the y location coordinate of the top left corner of the field in pixels\n    \n4. width - (int) the width of field in pixel\n    \n5. height - (int) the height of field in pixel\n    \n6. documentNumber - (int) the document index in the document files array starting from 1\n    \n7. pageNumber - (int) page in the document where field needs to be added\n    \n\nThere are other parameters which can be optional and different for different field types.\n\n`text` or `textbox` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- value - (string)\n    \n- required - (boolean) value: either true or false\n    \n- textAlignment - (string) value: left, center, or right\n    \n- characterLimit - (int)\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- validation (string) value: any one from None(default) or Numbers or Letters or RegexValidation(in case of text type) or CanadianSin(Canadian SIN Number)\n    \n- hideFieldNameForRecipients - (boolean) value: either true or false\n    \n\n`formulafield` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- formulafieldName - (string)\n    \n- formula - (string)\n    \n- fontFamily - (string)\n    \n- documentNumber - (int)\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- x - (int) the x location coordinate of the top left corner of the field in pixels\n    \n- y - (int) the y location coordinate of the top left corner of the field in pixels\n    \n- width - (int) the width of the field in pixel\n    \n- height - (int) the height of the field in pixel\n    \n- pageNumber - (int) page in the document where field needs to be added\n    \n- tabOrder - (int)\n    \n- decimalPlaces - (int)\n    \n\n`payfield` type\n\n- payeeOptions - (string) Specify payment methods for the payee to choose from any of the following options:\\[\"CardPayment\"\\] or \\[\"AchBankPayment\"\\] or \\[\"CardPayment\", \"AchBankPayment\"\\]\n    \n- paymentType - (string) Determines payment amount type: \"Fixed\" or \"Payee decides\". Note: \"Payee_decides\" in case of text tag.\n    \n- paymentAmount - (string) Required for 'Fixed' payment type, must be an integer or have up to two decimal places\n    \n- paymentDescription - (string) Description of the payment (Character limit: 250)\n    \n- productAndService (string) Name of the product or service (Character limit: 75)\n    \n- documentNumber - (int)\n    \n- pageNumber - (int) page in the document where field needs to be added\n    \n- x - (int) the x location coordinate of the top left corner of the field in pixels\n    \n- y - (int) the y location coordinate of the top left corner of the field in pixels\n    \n- tabOrder - (int)\n    \n- width - (int) the width of the field in pixel\n    \n- height - (int) the height of the field in pixel\n    \n- party - (int) party index from the parties submitted in this request starting from 1  \n    **Note**:\n    \n    1. The Payment field is available exclusively in the US region and initially supports payments only in US Dollars.\n        \n    2. The Super Admin must create a merchant account to use the Payment field.\n        \n\n`signature` or `initial` type\n\n- party - (int)\n    \n- required - (boolean) value: either true or false\n    \n\n`date` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- value - (string)\n    \n- required - (boolean) value: either true or false\n    \n- textAlignment - (string) value: left, center, or right\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- dateFormat (string) example: MM-DD-YYYY for 04-30-2019\n    \n\n`secure` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- value - (string)\n    \n- required - (boolean) value: either true or false\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- charToDisplay (int)\n    \n- hideFieldNameForRecipients - (boolean) value: either true or false\n    \n\n`checkbox` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- group - (string)\n    \n- required - (boolean) value: either true or false\n    \n- multicheck - (boolean) value: either true or false\n    \n- hideCheckboxBorder - (boolean) value: either true or false\n    \n\n`dropdown` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- value - (string)\n    \n- required - (boolean) value: either true or false\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- options (array of strings)\n    \n\n`attachment` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- required - (boolean) value: either true or false\n    \n\n`image` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- required - (boolean) value: either true or false\n    \n- inputType - (string) value: either url or base64\n    \n- imageName - (string) image name with extension(png, jpg or jpeg)\n    \n- source - (string) value: either url or base64 value\n    \n\n`signer name` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- required - (boolean) value: either true or false\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- readOnly - (boolean) value: either true or false\n    \n- systemField - (boolean) value: either true or false\n    \n\n`date signed` type\n\n- party - (int) party index from the parties submitted in this request starting from 1\n    \n- name - (string)\n    \n- tooltip - (string)\n    \n- required - (boolean) value: either true or false\n    \n- textAlignment - (string) value: left, center, or right\n    \n- fontSize - (int)\n    \n- fontColor (string) example: #0000FF for blue\n    \n- dateFormat (string) example: MM-DD-YYYY for 04-30-2019\n    \n- readOnly - (boolean) value: either true or false\n    \n- systemField - (boolean) value: either true or false\n    \n\n`accept` or `decline` type\n\n- party - (int)\n    \n\n## Apply a Template while uploading the documents\n\n- You can copy template fields to the document via API while using the call: /folders/createfolder\n    \n- To copy template fields while uploading the document, add the following to your document folder creation API call:\n    \n\n| Parameter | Description |\n| --- | --- |\n| applyTemplate (default: `false`) | Value can be either `true` or `false`.  <br>If `true`, It will process the copy template fields. |\n| templateIds | An array of template IDs you want to use to copy template fields into the documents for this folder. You can determine the template ID from the template URL.(https://{{HOST_NAME}}/templates/prepareimmutabletemplate?template.templateId={TEMPLATE_ID})  <br>  <br>  <br>  <br>  <br>  <br><br><img src=\"https://res.cloudinary.com/apimatic/image/upload/v1649285065/61dc3e7910159e19c2e42018/61dc3e7910159e19c2e42018--image.png\" alt=\"\"> |\n| templateFieldsValues (optional) | You may pass of the field values used in the templates to prefill them in the documents created from the template.`FIELD_NAME` is the name of the field used in the template. `FIELD_VALUE` is the document field value. |\n\n## Fields JSON Object Example\n\n```\n\"fields\":\n[\n    {\n        \"type\":\"text\",\n        \"x\":100,\n        \"y\":50,\n        \"width\":60,\n        \"height\":20,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"tabOrder\":1,\n        \"party\":1,\n        \"name\":\"optional name\",\n        \"tooltip\":\"\",\n        \"value\":\"optional value\",\n        \"required\":true,\n        \"characterLimit\":100,\n        \"fontSize\":12,\n        \"fontColor\":\"#000000\",\n        \"validation\":\"Letters\",\n        \"hideFieldNameForRecipients\":false\n    },\n    {\n        \"type\":\"image\",\n        \"name\":\"Image_Field_Name\",\n        \"tooltip\":\"Image_Field_Description\",\n        \"party\":1,\n        \"required\":false,           \n        \"tabOrder\":1,\n        \"width\":220,\n        \"height\":150,\n        \"x\":350,\n        \"y\":350,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"inputType\":\"url or base64\",\n        \"imageName\":\"logo.png\",\n        \"source\": \"URL or BASE64 String\"           \n    },\n    {\n        \"type\":\"text\",\n        \"x\":552,\n        \"y\":150,\n        \"width\":60,\n        \"height\":20,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"tabOrder\":1,\n        \"party\":1,\n        \"fontSize\":8,\n        \"fontColor\":\"#eee\",\n        \"validation\":\"Numbers\"\n    },\n    {\n        \"type\":\"signature\",\n        \"x\":200,\n        \"y\":150,\n        \"width\":100,\n        \"height\":50,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"party\":1\n    },\n    {\n        \"type\":\"dropdown\",\n        \"x\":200,\n        \"y\":250,\n        \"width\":80,\n        \"height\":20,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"party\":1,\n        \"value\":\"US\",\n        \"options\":[\"UK\",\"Canada\",\"Australia\",\"US\",\"France\"]\n    },\n        \"type\":\"accept\",\n        \"party\":1,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"x\":350,\n        \"y\":505,\n        \"width\":90,\n        \"height\":15\n    },\n    {\n        \"type\":\"decline\",\n        \"party\":1,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"x\":450,\n        \"y\":505,\n        \"width\":90,\n        \"height\":15\n    },\n    {\n        \"type\":\"attachment\",\n        \"x\":200,\n        \"y\":250,\n        \"width\":80,\n        \"height\":20,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"party\":1,\n        \"required\":true,\n        \"name\":\"optional name\"\n    },\n    {\n        \"type\":\"text\",\n        \"textfieldName\": \"Signer Name\",\n        \"x\":300,\n        \"y\":250,\n        \"width\":60,\n        \"height\":20,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"tabOrder\":1,\n        \"party\":1,\n        \"name\":\"Signer Name\",\n        \"characterLimit\":100,\n        \"partyResponsible\": 1,\n        \"required\": true,\n        \"fontSize\": 12,\n        \"fontFamily\": \"default\",\n        \"fontColor\": \"#000000\",\n        \"readOnly\": true,\n        \"systemField\": true\n    },        \n    {\n        \"type\": \"date\",\n        \"x\":220,\n        \"y\":150,\n        \"width\":60,\n        \"height\":20,\n        \"documentNumber\":1,\n        \"pageNumber\":1,\n        \"tabOrder\":1,\n        \"party\":1,\n        \"name\":\"Date Signed\",\n        \"required\":true,\n        \"fontSize\":12,\n        \"dateFormat\": \"MM-DD-YYYY\",\n        \"readOnly\": true,\n        \"systemField\": true            \n    }\n\n ```\n\n## Embed Foxit eSign within your application\n\nThere are two different ways to embed a Foxit eSign view into an application or website.\n\n- Embedded Signing View\n    \n- Embedded Sending View\n    \n\n**Note:** In both Embedded Signing View and Embedded Sending view, please include the following script within your HTML for a better user experience:\n\n```\n<script type=\"text/javascript\" src=\"https://{{HOST_NAME}}/js/esignGeniePostMessageParent.js\">\n</script>\n\n ```\n\nPlease also set the iFrame ID as: `esignIframe`\n\n## Create embedded signing view\n\nWhen embedded signing view is enabled, you can show a document within your application.\n\nThe embedded signing view URL obtained via embeddedSessionURL will look like the following:  \n`https://{{HOST_NAME}}/embedded/embeddedsign?eetid={URL-ENCODED EMBEDDED-TOKEN}`\n\nYou can embed Foxit eSign in your application using iFrame like:\n\n``` html\n<divstyle=\"height: 100%; width: 100%; overflow: auto;\" data-role=\"content\">\n<iframe id=\"esignIframe\" src=\"[EMBED_SESSION_URL]\" style=\"width: 99% !important;height: 99% !important;position: absolute;\" frameborder=\"0\"></iframe>\n</div>\n\n ```\n\nYou can style the outer div element as per your application look and feel.\n\nFoxit eSign adds the following two more parameters to the original success url:\n\n| Parameter | Description |\n| --- | --- |\n| folderId | This is the id of the folder that was sent by the party in the embedded session. You can use this id to further query our API to get the document status, etc. |\n| event | Its value is `signing_success`, if the user successfully signs the document. Or `signing_declined`, if the user declines to sign the document. |\n\n## Create embedded sending view\n\nWhen embedded sending view is enabled, you can prepare a document within your application where you can drag and drop various fields on your document.\n\nThe embedded sending view URL obtained via embeddedSessionURL will look like the following:  \n`https://{{HOST_NAME}}/embedded/embeddedsend?eetid={URL-ENCODED-EMBEDDED-TOKEN}`\n\nYou can embed Foxit eSign in your application using iFrame like:\n\n``` html\n<divstyle=\"height: 100%; width: 100%; overflow: auto;\" data-role=\"content\">\n<iframe src=\"[EMBED_SESSION_URL]\" style=\"width: 99% !important;height: 99% !important;position: absolute;\" frameborder=\"0\"></iframe>\n</div>\n\n ```\n\nYou can style the outer div element as per your application look and feel.\n\nIn the iframe, you will see the document which the User needs to sign.\n\nOnce the user successfully sends the folder, he/she will be redirected to application success URL which you submitted in the request.\n\nFoxit eSign adds the following two more parameters to the original success url:\n\n| Parameter | Description |\n| --- | --- |\n| folderId | This is the id of the folder that was sent by the party in the embedded session. You can use this id to further query our API to get the document status, etc. |\n| event | If the user successfully sends the document, Its value is sending_success, if the user successfully sends the document. |\n\n## Reusable Templates\n\n## What is a Template?\n\nA template is a reusable form that may be used multiple times to send a document to recipients. The only changes are the signatures and data collected. Templates will only need to be set up once. Next time the form is used, it will be located under the Templates tab and contain all fields that have already been placed and saved.\n\nFoxit eSign supports multiple formats including DOC, DOCX, PDF, XLSX, XLS, PPT, PPTX, CSV, TXT, RTF, and PNG. Select a file from a device, or from cloud storage systems such as Google Drive, Box, Dropbox or OneDrive.\n\n## Preparing a Template for Reuse\n\n### Adding Parties/Roles\n\nWhen creating a template, party roles may be added under the Recipient Parties tab on the right side of the application. With a template, there are two types of parties and a few ways to add party roles.\n\n### Dynamic and Static Party Roles\n\nA dynamic party role can be assigned if the recipient‚Äôs information changes each time a document is sent out. A party can be left blank displaying Role (optional), or it can be identified with a label. For example, a common label for a party role would be ‚ÄòClient‚Äô or ‚ÄòPatient‚Äô.\n\nA static party includes mandatory recipient information such as first name, last name, and email when added. This information does not change and is used each time a template is used to send out a document. A common use case for a static party could be a coworker that will always counter-sign or receive a copy each time a document is completed.\n\n### Add Recipient\n\nBy typing underneath , a static party can be added to the template using the name or email address of a recipient from the account's address book.\n\n### Party/Role\n\nSelect Party/Role to add an additional dynamic party role. Dynamic party roles will be labeled as PN1, PN2, etc.\n\nOptional: Name the type of role the recipient has. For example; Patient, student, legal guardian, employee, client.\n\n### Address Book\n\nSearch for a recipients name or e-mail address under the Add Recipient section allowing you to quickly add a recipient you have sent an envelope to previously.\n\n### Others\n\nYou can click Add Others to add a new recipient.\n\n### Add Yourself\n\nYou can click Add Me to add yourself as a recipient.\n\n### Permission Levels\n\nChoose different permission levels for each party.\n\n‚ÄòFill out fields and sign‚Äô  \n‚ÄòFill out fields only‚Äô  \n‚ÄòCC/View only‚Äô  \n‚ÄòEdit and sign‚Äô the document  \n‚ÄòFill out fields and sign‚Äô is the default for all parties.\n\n### Fields\n\nThe fields will automatically be assigned to the party that is highlighted and will have a color-coded tag next to it and the color of the field corresponds with the party who is responsible for it. You can easily reassign a field to another party by clicking on the field, go to ‚ÄòField properties‚Äô and reassign the party.\n\nOn the left-hand side you will see your toolbox.\n\n- ‚ÄòSignature fields‚Äô are pre-populated fields\n    \n- ‚ÄòData entry fields‚Äô require input from a signer\n    \n- ‚ÄòAdvanced fields‚Äô includes secured fields to use for sensitive data (SSN or bank account information for example). - Use Attachment and Image Fields for uploading files and photos\n    \n\n### Resize Field\n\nDrag the bottom corner arrow of a field to adjust the size.\n\n### Field Properties\n\nUnder Field Properties, there are various ways to customize a field. Fields can be made mandatory, checkboxes can be grouped together, text alignment can be changed, add conditional logic, set a format for input values, change font size and color.\n\n### Create an Envelope\n\nTemplates will be stored as documents inside an envelope. More templates may be added to the envelope before sending. Click the add template button and select another document.\n\n### Assign Recipients\n\nRecipients information will be added inside each party role box.\n\n### Address Book\n\nYou can search for a name or e-mail address of a recipient you have sent a document to previously and add them as a party.\n\n### Others\n\nYou can click ‚ÄòAdd Others‚Äô to add a new recipient.\n\n### Add Yourself\n\nYou can click ‚ÄòAdd Me‚Äô to add yourself as a recipient.\n\n### Authentication Levels\n\nAdditional security may be added to verify a recipients identity by using different authentication levels.\n\nNo Authentication  \nSMS Document Link  \nEmail Two-Factor Authentication  \nMobile Two-Factor Authentication  \nPhone Two-Factor Authentication  \nUser-defined Access Code  \nKnowledge Based Authentication  \nWorkflows  \nSigning sequence forces the recipients to sign in a specific order the sender set. By default all recipients can sign in parallels with each other.\n\nIn-person signing is recommended when recipients are signing physically in-person and the recipients do not have access to an email address.\n\n## üîå Webhooks\n\nOur webhooks enable you to monitor changes in your document folders without polling the Foxit eSign platform.\n\nWebhook is a URL handled by your application which will be called by Foxit eSign, based on certain events.  \nAs Foxit eSign is calling your application, your application should be publicly accessible on the internet.\n\nYou can add your webhook in Foxit eSign API Settings page. Also you can define the events that will cause Foxit eSign to call your webhook. Eg, you can decide whether the webhook should be called when any party signs your folder, or only when the folder is finally executed.\n\nFoxit eSign posts JSON data to your webhook. Every JSON payload posted contains event name (event_name), event date (event_date) and data related to that particular event (data).\n\n##### Configuration Page\n\nWebhooks can be configured by accessing:\n\n1. Settings tab\n    \n2. API from the left panel\n    \n3. Configure Webhooks section at the bottom of API page\n    \n\n<img src=\"https://res.cloudinary.com/apimatic/image/upload/v1664908882/61dc3e7910159e19c2e42018/61dc3e7910159e19c2e42018--webhooks11ex.png\" alt=\"alt text\">\n\n##### Webhook Access Level\n\n| Event Name | Description |\n| --- | --- |\n| Account Level | Foxit eSign calls your webhook events whenever an envelope is sent out from your account via application or API |\n| App Level | Foxit eSign calls your webhook events whenever an envelope is sent out from your account via API only |\n\n##### Webhook Events\n\n| Event Name | Description |\n| --- | --- |\n| folder_sent | Foxit eSign calls your Webhook for this event whenever any document folder is sent out from your account for signature.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was sent. This webhook call is in realtime |\n| folder_viewed | Foxit eSign calls your Webhook for this event whenever any party first time opens your document folder which was sent out to them from your account.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was viewed, and also a `viewing_party` field which contains the data for the party which viewed the document folder. This webhook call is in realtime. |\n| folder_signed | Foxit eSign calls your Webhook for this event whenever any party signs your document folder which was sent out to them from your account.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was signed, and also a `signing_party` field which contains the data for the party which signed the document folder. This webhook call is in realtime. |\n| folder_cancelled | Foxit eSign calls your Webhook for this event whenever any party cancels or declines to sign your document folder which was sent out to them from your account.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was cancelled, and also a `cancelling_party` field which contains the data for the party which cancelled/declined to sign the document folder, and a `reason_for_cancelling` field which contains the reason given for cancelling/declining to sign the document. This webhook call is in realtime. |\n|  |  |\n| folder_completed | Foxit eSign calls your Webhook for this event whenever any document folder which was sent out from your account has been completed with all the required parties signatures.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was completed. This webhook call is in realtime. |\n| folder_executed | Foxit eSign calls your Webhook for this event whenever any document folder which was sent out from your account has been completed with all the required parties signatures.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was completed. This webhook is invoked within 5-10 seconds after folder completion webhook as it waits for the digital signature on the completed document(s). |\n|  |  |\n| folder_deleted | Foxit eSign calls your Webhook for this event whenever any document folder from your account is deleted.  <br>  <br>The `data` field in this case consists of the folder (`folder`) field, which contains the data for the folder which was deleted, and also a `deleting_party` field which contains the data for the party which deleted the document folder. This webhook call is in realtime. |\n\n## üìù Sample Webhook Request Body\n\n```\n{\n    \"event_name\":\"folder_signed\",\n    \"event_date\":1464237988093,\n    \"data\":{\n      \"folder\":{\n        \"folderId\":649,\n        \"folderName\":\"NDA\",\n        \"folderAuthorId\":1,\n        \"folderAuthorFirstName\": \"ABC\",\n        \"folderAuthorLastName\": \"XYZ\",\n        \"folderAuthorEmail\": \"abc@xyz.com\",\n        \"folderAuthorRole\": \"admin\",\n        \"folderCompanyId\":11,\n        \"folderCreationDate\":1456385855000,\n        \"folderSentDate\":1464237650000,\n        \"folderStatus\":\"SHARED\",\n        \"folderDocumentIds\":[1239,1240],\n        \"custom_field1\":{\n              \"name\":\"NAME\",\n              \"value\":\"VALUE\"\n         },\n    \"custom_field2\":{\n              \"name\":\"NAME\",\n              \"value\":\"VALUE\"\n         },\n        \"documentsList\":[\n          {\n            \"documentId\":1239,\n            \"companyId\":11,\n            \"contractCreatedBy\":1,\n            \"contractCreatedOn\":1456385853000,\n            \"contractType\":\"NDA\",\n            \"contractStatus\":\"WAITING_FOR_SIGNATURE\",\n            \"editable\":false,\n            \"contractVersionId\":1307,\n            \"contractVersionName\":\"NDA\",\n            \"contractVersionDesc\":\"NDA\",\n            \"versionCreatedby\":1,\n            \"versionCreatedOn\":1456385853000,\n            \"contractVersionNumber\":1\n          },\n          {\n            \"documentId\":1240,\n            \"companyId\":11,\n            \"contractCreatedBy\":1,\n            \"contractCreatedOn\":1456385871000,\n            \"contractType\":\"IRS\",\n            \"contractStatus\":\"WAITING_FOR_SIGNATURE\",\n            \"editable\":false,\n            \"contractVersionId\":1308,\n            \"contractVersionName\":\"Form W9 copy\",\n            \"contractVersionDesc\":\"Pdf sample template\",\n            \"versionCreatedby\":1,\n            \"versionCreatedOn\":1456385871000,\n            \"contractVersionNumber\":1\n          }\n        ],\n        \"folderRecipientParties\":[\n          {\n            \"partyId\":1,\n            \"partyDetails\":{\n              \"partyId\":1,\n              \"firstName\":\"John\",\n              \"lastName\":\"Doe\",\n              \"emailId\":\"johndoe@example.com\",\n              \"address\":\"New Delhi, India\",\n              \"dateCreated\":1404837207000\n            },\n            \"contractPermissions\":\"FILL_FIELDS_AND_SIGN\",\n            \"partySequence\":1,\n            \"workflowSignSequence\":1,\n            \"envelopeId\":649,\n            \"sharingMode\":\"email\",\n            \"folderAccessURL\":null,\n            \"securityMode\":\"none\"\n          },\n          {\n            \"partyId\":52,\n            \"partyDetails\":{\n              \"partyId\":52,\n              \"firstName\":\"John\",\n              \"lastName\":\"Doe\",\n              \"emailId\":\"johndoe@example.com\",\n              \"address\":\"\",\n              \"dateCreated\":1413058300000\n            },\n            \"contractPermissions\":\"FILL_FIELDS_AND_SIGN\",\n            \"partySequence\":2,\n            \"workflowSignSequence\":2,\n            \"envelopeId\":649,\n            \"sharingMode\":\"email\",\n            \"folderAccessURL\":null,\n            \"securityMode\":\"none\"\n            }\n          ],\n          \"bulkId\":0,\n          \"enforceSignWorkflow\":false,\n          \"currentWorkflowStep\":1,\n          \"transactionSource\":\"API-1-via_templates:[46]\",\n          \"editable\":false,\n          \"inPersonSignable\":false\n        },\n        \"signing_party\":{\n          \"partyId\":1,\n          \"firstName\":\"John\",\n          \"lastName\":\"Doe\",\n          \"emailId\":\"johndoe@example.com\",\n          \"address\":\"New Delhi, India\",\n          \"dateCreated\":1404837207000\n        }\n      }\n    }\n\n ```\n\n## Webhook Security\n\nIt is recommended to use HTTPS for the webhook urls at your application end to avoid any kind of tampering with your webhook request data.\n\n### Signature verification\n\nYou can enable extra security around your Webhooks by providing a Webhook Secret (in API settings page, under section of webhooks) which will enable Foxit eSign to sign each of the webhook post request with a signature using your Webhook Secret.\n\nThe signature is generated using an HMAC-SHA-256 base64 digest of the raw HTTP Body of the Webhook post using this Webhook secret.\n\n> Using your Webhook Secret a `signature` is calculated and sent with each Webhook (as a query string parameter signature). You can thus verify the contents of Webhook as being authentic and un-tampered. \n  \n\nYou can generate the signature in php as follows:\n\n``` php\n$request_body = file_get_contents('php://input');\n$s = hash_hmac('sha256', $request_body, 'mySecret', true);\necho base64_encode($s);\n\n ```\n\nThis Signature is sent with each Webhook post as a query parameter signature in your URL.  \nFor example, for the following URL you registered as a Webhook:\n\n[https://www.test.com/WebhookHandler](https://www.test.com/WebhookHandler)\n\nFoxit eSign will post to the following webhook URL:\n\n[https://www.test.com/WebhookHandler?signature=XXXXXXXXXXXXXXXXXXXXX](https://www.test.com/WebhookHandler?signature=XXXXXXXXXXXXXXXXXXXXX)\n\nYou can thus verify the contents of the POST by taking the same hash yourself and comparing with a signature you got in request.\n\n**IMPORTANT:** Keep your Webhook secret safe with you as you would your password, since anyone with your Webhook secret could generate Webhooks that pass the signature validation.\n\n## Creating Multiple Webhook Channels\n\nChoose which notification types are sent to each channel. Plus, monitor individual channels through our developer portal.\n\nWith Foxit eSign's Various Advanced APIs for Managing your Webhooks:\n\n- [Create a Webhook Channel](https://developers.foxitesign.foxit.com/v/1_0_0#/rest/api-endpoints/webhooks-api/create-webhook-channel)\n    \n- [Update a Webhook Channel](https://developers.foxitesign.foxit.com/v/1_0_0#/rest/api-endpoints/webhooks-api/update-webhook-channel)\n    \n- [Deactivate a Webhook Channel](https://developers.foxitesign.foxit.com/v/1_0_0#/rest/api-endpoints/webhooks-api/deactivate-webhook-channel)\n    \n\n## Next Steps\n\nTo get the most out of your integration, here's what we recommend:\n\n- **Dive into the API Reference:** For comprehensive details on every endpoint, request, and response, explore our full API documentation.\n    \n- **Contact Sales for Production Keys:** When you're ready to go live, reach out to our sales team to acquire your production API keys.  \n    [Contact Sales](https://mailto:jason_welch@foxitsoftware.com)\n    \n\n# PDF Embed API\n\n### Foxit PDF Embed API Overview\n\nThe **Foxit PDF Embed API** offers a streamlined way to integrate a powerful PDF viewer into your web applications with minimal coding. This cloud-based solution enables fast deployment without requiring complex server configurations or reliance on third-party PDF tools. It eliminates the need for download prompts or additional plugins, allowing users to view and edit PDFs directly within the browser.\n\n### Customizable and Developer-Friendly\n\nThe viewer is fully customizable, giving developers the flexibility to adjust its appearance and behavior to match specific design and branding needs, no design expertise required.\n\n### Powered by Foxit‚Äôs Trusted PDF Engine\n\nAt its core, the Embed API uses **Foxit‚Äôs industry-leading PDF rendering engine**, trusted by major enterprises worldwide for its speed and reliability. This robust foundation ensures smooth and consistent document rendering across platforms. Additionally, Foxit provides dedicated technical support and routine performance and security updates, available through optional support and maintenance plans.\n\n## Copy, Paste, and Run\n\nTo launch the PDF viewer on your local web server (e.g., `localhost`), you‚Äôll need a valid **Client ID** and **Client Secret** from the Foxit Developer Console. Simply replace `'REPLACE_YOUR_CLIENT_ID'` and `'REPLACE_YOUR_CLIENT_SECRET'` in the provided code snippet with your actual Client ID and Client Secret. Then, run the webpage to initialize the viewer.\n\nYou can also modify the `previewFile` function to load a PDF from your server.\n\n> üí° Note: Make sure your local web server is properly configured. If you're using Node.js, learn more about setup [here](https://placeholder). \n  \n\n``` javascript\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Foxit Embed - Full Window</title>\n  <style>\n    html, body, #foxit-embed-view { height: 100%; }\n  </style>\n</head>\n<body>\n  <divid=\"foxit-embed-view\"></div>\n  <script src=\"https://embed.developer-api.foxit.com/service/api/embview-sdk/js?clientId=REPLACE_YOUR_CLIENT_ID\"></script>\n  <script>\n    new FoxitEmbed.View({\n      clientId: 'REPLACE_YOUR_CLIENT_ID',\n      clientSecret: 'REPLACE_YOUR_CLIENT_SECRET',\n      divId: 'foxit-embed-view',\n    }).previewFile({\n      content: 'https://embed.developer-api.foxit.com/product/embedviewer/view-sdk-demo/Embed API Demo.pdf',\n      metaData: { fileName: 'Embed API Demo.pdf' },\n    }, {\n      showToolControls: true,\n      showLeftHandPanel: true,\n      showDownloadPDF: true,\n      showPrintPDF: true,\n      defalutViewColorStyle: { primaryColor: '#f36b16', secondaryColor: '#333333', textActiveColor: '#FFFFFF' },\n    });\n  </script>\n</body>\n</html>\n\n ```\n\n## Supported Browsers\n\nFoxit Embed API is supported on the latest versions of the following browsers:\n\n- **Windows**: Microsoft Edge, Google Chrome, Mozilla Firefox.\n    \n- **macOS**: Safari, Google Chrome, Microsoft Edge, Mozilla Firefox.\n    \n- **Android**: Google Chrome.\n    \n- **iOS**: Safari, Google Chrome.\n    \n\n## [Read more about PDF APIs](#8690e041-8274-459e-b4f2-5bd64f1463e7)\n\n## Next Steps\n\nTo get the most out of your integration, here's what we recommend:\n\n- **Dive into the API Reference:** For comprehensive details on every endpoint, request, and response, explore our full API documentation.\n    \n- **Contact Sales for Production Keys:** When you're ready to go live, reach out to our sales team to acquire your production API keys.  \n    [Contact Sales](https://mailto:jason_welch@foxitsoftware.com)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "685249"
	},
	"item": [
		{
			"name": "PDF Services APIs",
			"item": [
				{
					"name": "PDF Operations",
					"item": [
						{
							"name": "Security",
							"item": [
								{
									"name": "pdf-remove-password",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"{{documentId}}\",\n  \"password\": \"hesoyam\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-remove-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"security",
												"pdf-remove-password"
											]
										},
										"description": "Remove password protection from a PDF document.  \nRequires the current password to remove protection.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`password`**(_required_)- The document password. The password parameter will remove the user password if it matches, and will also remove the owner password if it matches as well."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-remove-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"security",
														"pdf-remove-password"
													]
												},
												"description": "Remove password protection from a PDF document.\nRequires the current password to remove protection.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-remove-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"security",
														"pdf-remove-password"
													]
												},
												"description": "Remove password protection from a PDF document.\nRequires the current password to remove protection.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-remove-password",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"security",
														"pdf-remove-password"
													]
												},
												"description": "Remove password protection from a PDF document.\nRequires the current password to remove protection.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-protect",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"{{documentId}}\",\n  \"config\": {\n    \"userPassword\": \"user123\",\n    \"ownerPassword\": \"admin456\",\n    \"userPermissions\": [\n      \"PRINT_HIGH_QUALITY\",\n      \"EDIT_FILL_AND_SIGN_FORM_FIELDS\"\n    ],\n    \"cipher\": \"AES_256\",\n    \"encryptMetadata\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-protect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"security",
												"pdf-protect"
											]
										},
										"description": "Apply password protection to a PDF document.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`config`** _(object)_ ‚Äî Configuration options for setting passwords and permissions:\n    \n    - **`userPassword`** ‚Äî Password required to open the PDF (user-level access).\n        \n    - **`ownerPassword`** ‚Äî Password granting full control over the PDF (owner-level access).\n        \n    - **`userPermissions`** _(array)_ ‚Äî Define the allowed operations for users:\n        \n        - `\"PRINT_HIGH_QUALITY\"` ‚Äî Allow high-quality printing of the PDF.\n            \n        - `\"PRINT_LOW_QUALITY\"` ‚Äî Allow standard/low-quality printing.\n            \n        - `\"EDIT_CONTENT\"` ‚Äî Allow modification of PDF content. Grants permission to edit the document contents.\n            \n        - `\"EDIT_FILL_AND_SIGN_FORM_FIELDS\"` ‚Äî Allow users to fill interactive form fields, including signature fields.\n            \n        - `\"EDIT_ANNOTATION\"` ‚Äî Allow editing text annotations and form fields. If `\"EDIT_CONTENT\"` is also set, users can create or modify interactive form fields.\n            \n        - `\"EDIT_DOCUMENT_ASSEMBLY\"` ‚Äî Allow document assembly actions such as inserting, rotating, or deleting pages, and creating bookmarks or thumbnails. This permission is granted regardless of whether `\"EDIT_CONTENT\"` is set.\n            \n        - `\"COPY_CONTENT\"` ‚Äî Allow extraction of text and graphics for accessibility or other purposes.\n            \n    - **`cipher`** ‚Äî The encryption algorithm to use. Options: `\"AES_128\"`, `\"AES_256\"`, `\"RC4\"`.\n        \n    - **`encryptMetadata`** ‚Äî Boolean (`true` or `false`). Indicates whether to encrypt the document‚Äôs metadata."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"userPassword\": \"user123\",\n    \"ownerPassword\": \"admin456\",\n    \"userPermissions\": [\n      \"PRINT_HIGH_QUALITY\",\n      \"EDIT_FILL_AND_SIGN_FORM_FIELDS\"\n    ],\n    \"cipher\": \"AES_256\",\n    \"encryptMetadata\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-protect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"security",
														"pdf-protect"
													]
												},
												"description": "Apply password protection to a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"userPassword\": \"user123\",\n    \"ownerPassword\": \"admin456\",\n    \"userPermissions\": [\n      \"PRINT_HIGH_QUALITY\",\n      \"EDIT_FILL_AND_SIGN_FORM_FIELDS\"\n    ],\n    \"cipher\": \"AES_256\",\n    \"encryptMetadata\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-protect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"security",
														"pdf-protect"
													]
												},
												"description": "Apply password protection to a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"userPassword\": \"user123\",\n    \"ownerPassword\": \"admin456\",\n    \"userPermissions\": [\n      \"PRINT_HIGH_QUALITY\",\n      \"EDIT_FILL_AND_SIGN_FORM_FIELDS\"\n    ],\n    \"cipher\": \"AES_256\",\n    \"encryptMetadata\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/security/pdf-protect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"security",
														"pdf-protect"
													]
												},
												"description": "Apply password protection to a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "# Add or Remove Security on PDFs\n\n- Remove PDF Password\n    \n- Protect PDF with Password"
						},
						{
							"name": "Optimize",
							"item": [
								{
									"name": "pdf-linearize",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"{{documentId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/optimize/pdf-linearize",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"optimize",
												"pdf-linearize"
											]
										},
										"description": "Optimize PDF document for fast web viewing by linearizing the document structure\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/optimize/pdf-linearize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"optimize",
														"pdf-linearize"
													]
												},
												"description": "Optimize PDF document for fast web viewing by linearizing the document structure"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/optimize/pdf-linearize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"optimize",
														"pdf-linearize"
													]
												},
												"description": "Optimize PDF document for fast web viewing by linearizing the document structure"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/optimize/pdf-linearize",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"optimize",
														"pdf-linearize"
													]
												},
												"description": "Optimize PDF document for fast web viewing by linearizing the document structure"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "# Linearize the documents\n\nOptimize PDFs for quick viewing on the web."
						},
						{
							"name": "Modify",
							"item": [
								{
									"name": "pdf-combine",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentInfos\": [\n    {\n      \"documentId\": \"doc_123\"\n    },\n    {\n      \"documentId\": \"doc_456\",\n      \"password\": \"secret123\"\n    }\n  ],\n  \"config\": {\n    \"addBookmark\": true,\n    \"continueMergeOnError\": true,\n    \"retainPageNumbers\": false,\n    \"addToc\": true,\n    \"tocBookmarkLevels\": \"1,2-4\",\n    \"tocTitle\": \"Document Contents\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/enhance/pdf-combine",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"enhance",
												"pdf-combine"
											]
										},
										"description": "Combine multiple PDF documents into a single PDF file.  \nAllows merging an array of PDF files in a specified order to create one consolidated document.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nKey features:\n\n- Merge multiple PDF files into a single document\n    \n- Maintain bookmarks and other document properties\n    \n\n## Parameter Details\n\n- **`documentInfos`** _(array)_ ‚Äî An array of document IDs you want to merge into a single PDF.\n    \n    - **`documentId`** ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n        \n    - **`password`** ‚Äî Password for the document, if it is protected. Leave empty for open (unsecured) documents.\n        \n- **`config`** _(object)_ ‚Äî Configuration options for merging the PDF documents.\n    \n    - **`addBookmark`** _(boolean)_ ‚Äî Set to `true` to add bookmarks for each merged document.\n        \n    - **`continueMergeOnError`** _(boolean)_ ‚Äî Set to `true` to continue merging even if an error occurs with one or more documents.\n        \n    - **`retainPageNumbers`** _(boolean)_ ‚Äî Set to `true` to retain the original page numbering logic of each document.\n        \n    - **`addToc`** _(boolean)_ ‚Äî Set to `true` to include a table of contents in the merged PDF.\n        \n    - **`tocBookmarkLevels`** _(integer)_ ‚Äî Specifies the number of bookmark levels to include in the table of contents. Accepts values from `1` to the deepest level available.\n        \n    - **`tocTitle`** _(string)_ ‚Äî The title to be displayed for the table of contents."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentInfos\": [\n    {\n      \"documentId\": \"doc_123\"\n    },\n    {\n      \"documentId\": \"doc_456\",\n      \"password\": \"secret123\"\n    }\n  ],\n  \"config\": {\n    \"addBookmark\": true,\n    \"continueMergeOnError\": true,\n    \"retainPageNumbers\": false,\n    \"addToc\": true,\n    \"tocBookmarkLevels\": \"1,2-4\",\n    \"tocTitle\": \"Document Contents\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/enhance/pdf-combine",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"enhance",
														"pdf-combine"
													]
												},
												"description": "Combine multiple PDF documents into a single PDF file.\nAllows merging an array of PDF files in a specified order to create one consolidated document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nKey features:\n- Merge multiple PDF files into a single document\n- Maintain bookmarks and other document properties\n\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentInfos\": [\n    {\n      \"documentId\": \"doc_123\"\n    },\n    {\n      \"documentId\": \"doc_456\",\n      \"password\": \"secret123\"\n    }\n  ],\n  \"config\": {\n    \"addBookmark\": true,\n    \"continueMergeOnError\": true,\n    \"retainPageNumbers\": false,\n    \"addToc\": true,\n    \"tocBookmarkLevels\": \"1,2-4\",\n    \"tocTitle\": \"Document Contents\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/enhance/pdf-combine",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"enhance",
														"pdf-combine"
													]
												},
												"description": "Combine multiple PDF documents into a single PDF file.\nAllows merging an array of PDF files in a specified order to create one consolidated document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nKey features:\n- Merge multiple PDF files into a single document\n- Maintain bookmarks and other document properties\n\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentInfos\": [\n    {\n      \"documentId\": \"doc_123\"\n    },\n    {\n      \"documentId\": \"doc_456\",\n      \"password\": \"secret123\"\n    }\n  ],\n  \"config\": {\n    \"addBookmark\": true,\n    \"continueMergeOnError\": true,\n    \"retainPageNumbers\": false,\n    \"addToc\": true,\n    \"tocBookmarkLevels\": \"1,2-4\",\n    \"tocTitle\": \"Document Contents\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/enhance/pdf-combine",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"enhance",
														"pdf-combine"
													]
												},
												"description": "Combine multiple PDF documents into a single PDF file.\nAllows merging an array of PDF files in a specified order to create one consolidated document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nKey features:\n- Merge multiple PDF files into a single document\n- Maintain bookmarks and other document properties\n\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-compress",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"compressionLevel\": \"MEDIUM\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-compress",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"modify",
												"pdf-compress"
											]
										},
										"description": "Optimize PDF file size by reducing image resolution, applying compression algorithms, and removing unnecessary elements.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nCompression levels:\n\n- HIGH: Maximum compression with potential quality trade-offs\n    \n- MEDIUM: Balanced compression maintaining good quality\n    \n- LOW: Light compression preserving maximum quality\n    \n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`compressionLevel`** _(optional)_ ‚Äî Defines the level of compression to apply to the PDF. The default value is `\"LOW\"`.  \n    Supported values are: `\"HIGH\"`, `\"MEDIUM\"`, and `\"LOW\"`."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"compressionLevel\": \"MEDIUM\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-compress",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-compress"
													]
												},
												"description": "Optimize PDF file size by reducing image resolution, applying compression algorithms, and removing unnecessary elements.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nCompression levels:\n- HIGH: Maximum compression with potential quality trade-offs\n- MEDIUM: Balanced compression maintaining good quality\n- LOW: Light compression preserving maximum quality\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"compressionLevel\": \"MEDIUM\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-compress",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-compress"
													]
												},
												"description": "Optimize PDF file size by reducing image resolution, applying compression algorithms, and removing unnecessary elements.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nCompression levels:\n- HIGH: Maximum compression with potential quality trade-offs\n- MEDIUM: Balanced compression maintaining good quality\n- LOW: Light compression preserving maximum quality\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"compressionLevel\": \"MEDIUM\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-compress",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-compress"
													]
												},
												"description": "Optimize PDF file size by reducing image resolution, applying compression algorithms, and removing unnecessary elements.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n\nCompression levels:\n- HIGH: Maximum compression with potential quality trade-offs\n- MEDIUM: Balanced compression maintaining good quality\n- LOW: Light compression preserving maximum quality\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-extract",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5,8,10-12\",\n  \"extractType\": \"TEXT\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-extract",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"modify",
												"pdf-extract"
											]
										},
										"description": "Extract text, image, or specific pages from a PDF document.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`pageRange`** _(optional)_ ‚Äî Specifies the page range to extract content from.\n    \n    If not provided, the entire document will be processed.\n    \n    **Usage examples:**\n    \n    - For specific pages: `\"1,8,9\"`\n        \n    - For a range of pages: `\"1-30\"`\n        \n    - To extract all pages: `\"all\"`\n        \n- **`extractType`** _(required)_ ‚Äî Defines the type of content to extract from the PDF.\n    \n    Supported values:\n    \n    - `\"TEXT\"` ‚Äî Extracts all text content from the specified pages and the response will be plain text.\n        \n    - `\"IMAGE\"` ‚Äî Extracts images from the PDF pages. The output will be delivered as a `.zip` file containing the extracted images.\n        \n    - `\"PAGE\"` ‚Äî Extracts specific pages from a PDF and generates a new PDF containing only the selected pages."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5,8,10-12\",\n  \"extractType\": \"TEXT\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-extract",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-extract"
													]
												},
												"description": "Extract text, image, or specific pages from a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5,8,10-12\",\n  \"extractType\": \"TEXT\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-extract",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-extract"
													]
												},
												"description": "Extract text, image, or specific pages from a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5,8,10-12\",\n  \"extractType\": \"TEXT\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-extract",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-extract"
													]
												},
												"description": "Extract text, image, or specific pages from a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-flatten",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-flatten",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"modify",
												"pdf-flatten"
											]
										},
										"description": "Flatten form fields and annotations in a PDF document, making them part of the page content.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`**¬†_(required)_¬†‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-flatten",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-flatten"
													]
												},
												"description": "Flatten form fields and annotations in a PDF document, making them part of the page content.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-flatten",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-flatten"
													]
												},
												"description": "Flatten form fields and annotations in a PDF document, making them part of the page content.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-flatten",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-flatten"
													]
												},
												"description": "Flatten form fields and annotations in a PDF document, making them part of the page content.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-manipulate",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"operations\": [\n      {\n        \"type\": \"MOVE_PAGES\",\n        \"pages\": [\n          1,\n          2,\n          3\n        ],\n        \"targetPosition\": 5\n      },\n      {\n        \"type\": \"ROTATE_PAGES\",\n        \"pages\": [\n          4,\n          5,\n          6\n        ],\n        \"rotation\": \"ROTATE_CLOCKWISE_90\"\n      },\n      {\n        \"type\": \"DELETE_PAGES\",\n        \"pages\": [\n          8,\n          9\n        ]\n      },\n      {\n        \"type\": \"ADD_PAGES\",\n        \"pageCount\": 2\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-manipulate",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"modify",
												"pdf-manipulate"
											]
										},
										"description": "Reorganize, rotate, or delete pages in a PDF document.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`config`** _(required)_ ‚Äî Configuration object used to apply various manipulation operations on the PDF:\n    \n    - **`operations`** _(array)_ ‚Äî List of operations to perform on the document. Each operation supports the following fields:\n        \n        - **`type`** ‚Äî The type of operation to apply. Supported values include: `\"MOVE_PAGES\"`, `\"ROTATE_PAGES\"`, `\"DELETE_PAGES\"`, and `\"ADD_PAGES\"`.\n            \n        - **`pages`** _(array)_ ‚Äî An array of specific page numbers where the operation should be applied.\n            \n        - **`targetPosition`** _(integer)_ ‚Äî Used with `\"MOVE_PAGES\"` to specify the page number where the selected pages should be moved.\n            \n        - **`rotation`** ‚Äî Specifies the rotation angle for the `\"ROTATE_PAGES\"` operation. Supported values are: `\"ROTATE_0\"`, `\"ROTATE_CLOCKWISE_90\"`, `\"ROTATE_180\"` and `\"ROTATE_COUNTERCLOCKWISE_90\"`\n            \n        - **`pageCount`** ‚Äî Indicates the number of pages to be added when using the `\"ADD_PAGES\"` operation."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"operations\": [\n      {\n        \"type\": \"MOVE_PAGES\",\n        \"pages\": [\n          1,\n          2,\n          3\n        ],\n        \"targetPosition\": 5\n      },\n      {\n        \"type\": \"ROTATE_PAGES\",\n        \"pages\": [\n          4,\n          5,\n          6\n        ],\n        \"rotation\": \"ROTATE_CLOCKWISE_90\"\n      },\n      {\n        \"type\": \"DELETE_PAGES\",\n        \"pages\": [\n          8,\n          9\n        ]\n      },\n      {\n        \"type\": \"ADD_PAGES\",\n        \"pageCount\": 2\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-manipulate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-manipulate"
													]
												},
												"description": "Reorganize, rotate, or delete pages in a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"operations\": [\n      {\n        \"type\": \"MOVE_PAGES\",\n        \"pages\": [\n          1,\n          2,\n          3\n        ],\n        \"targetPosition\": 5\n      },\n      {\n        \"type\": \"ROTATE_PAGES\",\n        \"pages\": [\n          4,\n          5,\n          6\n        ],\n        \"rotation\": \"ROTATE_CLOCKWISE_90\"\n      },\n      {\n        \"type\": \"DELETE_PAGES\",\n        \"pages\": [\n          8,\n          9\n        ]\n      },\n      {\n        \"type\": \"ADD_PAGES\",\n        \"pageCount\": 2\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-manipulate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-manipulate"
													]
												},
												"description": "Reorganize, rotate, or delete pages in a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"config\": {\n    \"operations\": [\n      {\n        \"type\": \"MOVE_PAGES\",\n        \"pages\": [\n          1,\n          2,\n          3\n        ],\n        \"targetPosition\": 5\n      },\n      {\n        \"type\": \"ROTATE_PAGES\",\n        \"pages\": [\n          4,\n          5,\n          6\n        ],\n        \"rotation\": \"ROTATE_CLOCKWISE_90\"\n      },\n      {\n        \"type\": \"DELETE_PAGES\",\n        \"pages\": [\n          8,\n          9\n        ]\n      },\n      {\n        \"type\": \"ADD_PAGES\",\n        \"pageCount\": 2\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-manipulate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-manipulate"
													]
												},
												"description": "Reorganize, rotate, or delete pages in a PDF document.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-split",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"{{documentId}}\",\n  \"pageCount\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-split",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"modify",
												"pdf-split"
											]
										},
										"description": "Split a PDF document into multiple files based on specified criteria.  \nThe API returns multiple PDF files in a zip file.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`pageCount`** (_required, integer_): Number of pages in each split file.\n    \n\n## Response Details\n\nThe output will be a zip containing multiple PDFs."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageCount\": 10\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-split",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-split"
													]
												},
												"description": "Split a PDF document into multiple files based on specified criteria.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageCount\": 10\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-split",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-split"
													]
												},
												"description": "Split a PDF document into multiple files based on specified criteria.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageCount\": 10\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/modify/pdf-split",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"modify",
														"pdf-split"
													]
												},
												"description": "Split a PDF document into multiple files based on specified criteria.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "# Modify the documents\n\n- Split PDF\n    \n- Manipulate PDF\n    \n- Flatten PDF\n    \n- Extract PDF\n    \n- Compress PDF"
						},
						{
							"name": "Create",
							"item": [
								{
									"name": "pdf-from-excel",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-excel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-excel"
											]
										},
										"description": "Convert a Microsoft Excel spreadsheet to a PDF file.  \nSupports various Excel formats: .xls, .xlsx, .xlt, .xltx, .xlsm, .xlsb, .xltm, .csv.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-excel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-excel"
													]
												},
												"description": "Convert a Microsoft Excel spreadsheet to a PDF file.\nSupports various Excel formats: .xls, .xlsx, .xlt, .xltx, .xlsm, .xlsb, .xltm, .csv.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-excel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-excel"
													]
												},
												"description": "Convert a Microsoft Excel spreadsheet to a PDF file.\nSupports various Excel formats: .xls, .xlsx, .xlt, .xltx, .xlsm, .xlsb, .xltm, .csv.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-excel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-excel"
													]
												},
												"description": "Convert a Microsoft Excel spreadsheet to a PDF file.\nSupports various Excel formats: .xls, .xlsx, .xlt, .xltx, .xlsm, .xlsb, .xltm, .csv.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-from-html",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 612,\n      \"height\": 792\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-html",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-html"
											]
										},
										"description": "Convert HTML content to a PDF document with customizable page settings.\n\nFeatures:\n\n- Configurable page dimensions (default: A4)\n    \n- Page orientation control through rotation\n    \n- Flexible content layout modes (single or multiple pages)\n    \n- Content scaling options\n    \n\nCommon Use Cases:\n\n1. Web page archiving\n    \n2. Report generation from HTML templates\n    \n3. Creating printable documents from web content\n    \n4. HTML newsletter to PDF conversion\n    \n\nNotes:\n\n- The operation is asynchronous\n    \n- Use the returned taskId with Task Status API to track progress\n    \n- Maximum input HTML size: 100MB\n    \n- Supports embedded CSS, images, and web fonts\n    \n- External resources must be accessible to the service\n    \n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`).\n    \n- **`config`** _(object)_ ‚Äî Configuration options for the PDF output.\n    \n    - **`dimension`** _(object)_ ‚Äî Specify the output dimensions in pixels.\n        \n        - **`width`** ‚Äî Width of the PDF in pixels.\n            \n        - **`height`** ‚Äî Height of the PDF in pixels.\n            \n    - **`rotation`** _(string)_ ‚Äî Rotation angle for the output. Use `\"NONE\"` to keep the original orientation.\n        \n    - **`pageMode`** _(string)_ ‚Äî Set the page display mode:\n        \n        - `\"SINGLE_PAGE\"` ‚Äî Renders the document on a single page.\n            \n        - `\"MULTIPLE_PAGE\"` ‚Äî Allows the content to span multiple pages.\n            \n    - **`scalingMode`** _(string)_ ‚Äî Set to `\"SCALE\"` to enable scaling of content."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 612,\n      \"height\": 792\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-html",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-html"
													]
												},
												"description": "Convert HTML content to a PDF document with customizable page settings.\n\nFeatures:\n- Configurable page dimensions (default: A4)\n- Page orientation control through rotation\n- Flexible content layout modes (single or multiple pages)\n- Content scaling options\n\nCommon Use Cases:\n1. Web page archiving\n2. Report generation from HTML templates\n3. Creating printable documents from web content\n4. HTML newsletter to PDF conversion\n\nNotes:\n- The operation is asynchronous\n- Use the returned taskId with Task Status API to track progress\n- Maximum input HTML size: 100MB\n- Supports embedded CSS, images, and web fonts\n- External resources must be accessible to the service\n\nExample Request:\n```json\n{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}\n```\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 612,\n      \"height\": 792\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-html",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-html"
													]
												},
												"description": "Convert HTML content to a PDF document with customizable page settings.\n\nFeatures:\n- Configurable page dimensions (default: A4)\n- Page orientation control through rotation\n- Flexible content layout modes (single or multiple pages)\n- Content scaling options\n\nCommon Use Cases:\n1. Web page archiving\n2. Report generation from HTML templates\n3. Creating printable documents from web content\n4. HTML newsletter to PDF conversion\n\nNotes:\n- The operation is asynchronous\n- Use the returned taskId with Task Status API to track progress\n- Maximum input HTML size: 100MB\n- Supports embedded CSS, images, and web fonts\n- External resources must be accessible to the service\n\nExample Request:\n```json\n{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}\n```\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 612,\n      \"height\": 792\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-html",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-html"
													]
												},
												"description": "Convert HTML content to a PDF document with customizable page settings.\n\nFeatures:\n- Configurable page dimensions (default: A4)\n- Page orientation control through rotation\n- Flexible content layout modes (single or multiple pages)\n- Content scaling options\n\nCommon Use Cases:\n1. Web page archiving\n2. Report generation from HTML templates\n3. Creating printable documents from web content\n4. HTML newsletter to PDF conversion\n\nNotes:\n- The operation is asynchronous\n- Use the returned taskId with Task Status API to track progress\n- Maximum input HTML size: 100MB\n- Supports embedded CSS, images, and web fonts\n- External resources must be accessible to the service\n\nExample Request:\n```json\n{\n  \"documentId\": \"doc123\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}\n```\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-from-image",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-image"
											]
										},
										"description": "Convert one or more images to a PDF document.  \nSupported formats:\n\n- JPEG/JPG\n    \n- PNG\n    \n- TIFF\n    \n- BMP\n    \n- GIF  \n    The operation is asynchronous - use the returned taskId to track the operation status.\n    \n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-image",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-image"
													]
												},
												"description": "Convert one or more images to a PDF document.\nSupported formats:\n- JPEG/JPG\n- PNG\n- TIFF\n- BMP\n- GIF\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-image",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-image"
													]
												},
												"description": "Convert one or more images to a PDF document.\nSupported formats:\n- JPEG/JPG\n- PNG\n- TIFF\n- BMP\n- GIF\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-image",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-image"
													]
												},
												"description": "Convert one or more images to a PDF document.\nSupported formats:\n- JPEG/JPG\n- PNG\n- TIFF\n- BMP\n- GIF\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-from-word",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-word",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-word"
											]
										},
										"description": "Convert a Microsoft Word document to a PDF file.  \nSupports various formats: .doc, .docx, .rtf, .dot, .dotx, .docm, .dotm, .wpd.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-word",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-word"
													]
												},
												"description": "Convert a Microsoft Word document to a PDF file.\nSupports various formats: .doc, .docx, .rtf, .dot, .dotx, .docm, .dotm, .wpd.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-word",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-word"
													]
												},
												"description": "Convert a Microsoft Word document to a PDF file.\nSupports various formats: .doc, .docx, .rtf, .dot, .dotx, .docm, .dotm, .wpd.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-word",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-word"
													]
												},
												"description": "Convert a Microsoft Word document to a PDF file.\nSupports various formats: .doc, .docx, .rtf, .dot, .dotx, .docm, .dotm, .wpd.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-from-ppt",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-ppt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-ppt"
											]
										},
										"description": "Convert a Microsoft PowerPoint presentation to a PDF file.  \n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-ppt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-ppt"
													]
												},
												"description": "Convert a Microsoft PowerPoint presentation to a PDF file.\nSupports:\n- Slide transitions\n- Animations (as static images)\n- Speaker notes (optional)\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-ppt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-ppt"
													]
												},
												"description": "Convert a Microsoft PowerPoint presentation to a PDF file.\nSupports:\n- Slide transitions\n- Animations (as static images)\n- Speaker notes (optional)\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-ppt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-ppt"
													]
												},
												"description": "Convert a Microsoft PowerPoint presentation to a PDF file.\nSupports:\n- Slide transitions\n- Animations (as static images)\n- Speaker notes (optional)\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-from-text",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-text",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-text"
											]
										},
										"description": "Convert a plain text file to a PDF document.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-text",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-text"
													]
												},
												"description": "Convert a plain text file to a PDF document.\nFeatures:\n- Configurable font settings\n- Page margins\n- Line spacing\n- Page numbering options\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-text",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-text"
													]
												},
												"description": "Convert a plain text file to a PDF document.\nFeatures:\n- Configurable font settings\n- Page margins\n- Line spacing\n- Page numbering options\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-text",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-text"
													]
												},
												"description": "Convert a plain text file to a PDF document.\nFeatures:\n- Configurable font settings\n- Page margins\n- Line spacing\n- Page numbering options\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-from-url",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"url\": \"https://www.example.com/page-to-convert\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-url",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"create",
												"pdf-from-url"
											]
										},
										"description": "Convert a web page (URL) to a PDF document. Same as pdf-from-html but with a URL as input.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- **`url`** _(required)_ ‚Äî A publicly accessible URL of the web page to be converted.\n    \n- **`config`** _(object)_ ‚Äî Configuration settings for the output PDF.\n    \n    - **`dimension`** _(object)_ ‚Äî Specify the output dimensions in pixels.\n        \n        - **`width`** ‚Äî The width of the PDF in pixels.\n            \n        - **`height`** ‚Äî The height of the PDF in pixels.\n            \n    - **`rotation`** _(string)_ ‚Äî Set the rotation angle for the output. Use `\"NONE\"` to retain the original orientation.\n        \n    - **`pageMode`** _(string)_ ‚Äî Choose the page layout mode:\n        \n        - `\"SINGLE_PAGE\"` ‚Äî Render content on a single page.\n            \n        - `\"MULTIPLE_PAGE\"` ‚Äî Allow pagination across multiple pages.\n            \n    - **`scalingMode`** _(string)_ ‚Äî Specify scaling behavior. Use `\"SCALE\"` to enable scaling."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"url\": \"https://www.example.com/page-to-convert\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-url",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-url"
													]
												},
												"description": "Convert a web page (URL) to a PDF document. Same as pdf-from-html but with a URL as input.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"url\": \"https://www.example.com/page-to-convert\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-url",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-url"
													]
												},
												"description": "Convert a web page (URL) to a PDF document. Same as pdf-from-html but with a URL as input.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"url\": \"https://www.example.com/page-to-convert\",\n  \"config\": {\n    \"dimension\": {\n      \"width\": 595,\n      \"height\": 842\n    },\n    \"rotation\": \"NONE\",\n    \"pageMode\": \"MULTIPLE_PAGE\",\n    \"scalingMode\": \"SCALE\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/create/pdf-from-url",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"create",
														"pdf-from-url"
													]
												},
												"description": "Convert a web page (URL) to a PDF document. Same as pdf-from-html but with a URL as input.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "# Create PDFs from other documents format\n\n- PDF from Word\n    \n- PDF from URL\n    \n- PDF from Text\n    \n- PDF from PPT\n    \n- PDF from Image\n    \n- PDF from HTML\n    \n- PDF from Excel"
						},
						{
							"name": "Convert",
							"item": [
								{
									"name": "pdf-to-excel",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-excel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"convert",
												"pdf-to-excel"
											]
										},
										"description": "Convert PDF tables to Microsoft Excel spreadsheet (.xlsx).\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-excel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-excel"
													]
												},
												"description": "Convert PDF tables to Microsoft Excel spreadsheet (.xlsx).\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-excel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-excel"
													]
												},
												"description": "Convert PDF tables to Microsoft Excel spreadsheet (.xlsx).\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-excel",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-excel"
													]
												},
												"description": "Convert PDF tables to Microsoft Excel spreadsheet (.xlsx).\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-to-html",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-html",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"convert",
												"pdf-to-html"
											]
										},
										"description": "Convert PDF to web-friendly HTML format.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-html",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-html"
													]
												},
												"description": "Convert PDF to web-friendly HTML format.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-html",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-html"
													]
												},
												"description": "Convert PDF to web-friendly HTML format.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-html",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-html"
													]
												},
												"description": "Convert PDF to web-friendly HTML format.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-to-image",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5\",\n  \"config\": {\n    \"dpi\": 96\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"convert",
												"pdf-to-image"
											]
										},
										"description": "Convert PDF pages to images.\n\n## Parameter Details\n\n- `documentId` (_required_) ‚Äì The ID of the document, generated by the Upload Document API (`/api/documents/upload`).\n    \n- `pageRange` ‚Äì Specifies the range of pages in the PDF to convert to images.\n    \n    Use `\"1-5\"` for a range, or `\"1,3,7\"` for specific pages. Leave empty to convert all pages.\n    \n- `config` ‚Äì Configuration settings for image conversion.\n    \n    - `dpi` ‚Äì DPI range 1-1000.Default value: 96. Higher values yield better image quality but larger file sizes."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5\",\n  \"config\": {\n    \"dpi\": 96\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-image",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-image"
													]
												},
												"description": "Convert PDF pages to images.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5\",\n  \"config\": {\n    \"dpi\": 96\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-image",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-image"
													]
												},
												"description": "Convert PDF pages to images.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\",\n  \"pageRange\": \"1-5\",\n  \"config\": {\n    \"dpi\": 96\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-image",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-image"
													]
												},
												"description": "Convert PDF pages to images.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-to-ppt",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-ppt",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"convert",
												"pdf-to-ppt"
											]
										},
										"description": "Convert PDF to PowerPoint presentation (.pptx).\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-ppt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-ppt"
													]
												},
												"description": "Convert PDF to PowerPoint presentation (.pptx).\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-ppt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-ppt"
													]
												},
												"description": "Convert PDF to PowerPoint presentation (.pptx).\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-ppt",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-ppt"
													]
												},
												"description": "Convert PDF to PowerPoint presentation (.pptx).\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-to-text",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-text",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"convert",
												"pdf-to-text"
											]
										},
										"description": "Convert PDF text content to plain text.\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-text",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-text"
													]
												},
												"description": "Convert PDF text content to plain text.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-text",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-text"
													]
												},
												"description": "Convert PDF text content to plain text.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-text",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-text"
													]
												},
												"description": "Convert PDF text content to plain text.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								},
								{
									"name": "pdf-to-word",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"documentId\": \"6838b8ea6b1cc44ab4003666\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-word",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"convert",
												"pdf-to-word"
											]
										},
										"description": "Convert PDF to Microsoft Word document (.docx).\n\n## Parameter Details\n\n- **`documentId`** _(required)_ ‚Äî The ID of the document generated by the Upload Document API (`/api/documents/upload`)."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-word",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-word"
													]
												},
												"description": "Convert PDF to Microsoft Word document (.docx).\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-word",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-word"
													]
												},
												"description": "Convert PDF to Microsoft Word document (.docx).\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"documentId\": \"doc_abc123\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/convert/pdf-to-word",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"convert",
														"pdf-to-word"
													]
												},
												"description": "Convert PDF to Microsoft Word document (.docx).\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "# Convert PDFs to other document formats\n\n- PDF to Word\n    \n- PDF to Text\n    \n- PDF to PPT\n    \n- PDF to Image\n    \n- PDF to HTML\n    \n- PDF to Excel"
						},
						{
							"name": "Analyze",
							"item": [
								{
									"name": "pdf-compare",
									"request": {
										"auth": {
											"type": "basic"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"baseDocument\": {\n    \"documentId\": \"doc_abc123\",\n    \"password\": \"optional_password\"\n  },\n  \"compareDocument\": {\n    \"documentId\": \"doc_xyz789\",\n    \"password\": \"optional_password\"\n  },\n  \"config\": {\n    \"compareType\": \"ALL\",\n    \"resultType\": \"PDF\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/analyze/pdf-compare",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"analyze",
												"pdf-compare"
											]
										},
										"description": "Compare two PDF documents and generate a comparison report highlighting the differences.  \nThe operation is asynchronous - use the returned taskId to track the operation status.\n\n## Parameter Details\n\n- `baseDocument` (_object_) ‚Äì The primary reference document to compare against.\n    \n    - `documentId` ‚Äì The ID of the base document, generated by the Upload Document API.\n        \n    - `password` ‚Äì The password for the base document, if it's protected (optional).\n        \n- `compareDocument` (_object_) ‚Äì The document to be compared with the base document.\n    \n    - `documentId` ‚Äì The ID of the document to compare.\n        \n    - `password` ‚Äì The password for the compare document, if it's protected (optional).\n        \n- `config` (_object_) ‚Äì Settings to configure the comparison output.\n    \n    - `compareType` ‚Äì Defines the type of comparison:\n        \n        - `\"ALL\"` ‚Äì Compare both text and visual differences.\n            \n        - `\"TEXT\"` ‚Äì Compare text content only.\n            \n    - `resultType` ‚Äì Defines the format of the comparison result:\n        \n        - `\"PDF\"` ‚Äì Output a PDF highlighting differences.\n            \n        - `\"JSON\"` ‚Äì Output structured JSON detailing the differences."
									},
									"response": [
										{
											"name": "202",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"baseDocument\": {\n    \"documentId\": \"doc_abc123\",\n    \"password\": \"optional_password\"\n  },\n  \"compareDocument\": {\n    \"documentId\": \"doc_xyz789\",\n    \"password\": \"optional_password\"\n  },\n  \"config\": {\n    \"compareType\": \"ALL\",\n    \"resultType\": \"PDF\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/analyze/pdf-compare",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"analyze",
														"pdf-compare"
													]
												},
												"description": "Compare two PDF documents and generate a comparison report highlighting the differences.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"taskId\": \"xyz789\"\n}"
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"baseDocument\": {\n    \"documentId\": \"doc_abc123\",\n    \"password\": \"optional_password\"\n  },\n  \"compareDocument\": {\n    \"documentId\": \"doc_xyz789\",\n    \"password\": \"optional_password\"\n  },\n  \"config\": {\n    \"compareType\": \"ALL\",\n    \"resultType\": \"PDF\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/analyze/pdf-compare",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"analyze",
														"pdf-compare"
													]
												},
												"description": "Compare two PDF documents and generate a comparison report highlighting the differences.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"baseDocument\": {\n    \"documentId\": \"doc_abc123\",\n    \"password\": \"optional_password\"\n  },\n  \"compareDocument\": {\n    \"documentId\": \"doc_xyz789\",\n    \"password\": \"optional_password\"\n  },\n  \"config\": {\n    \"compareType\": \"ALL\",\n    \"resultType\": \"PDF\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/analyze/pdf-compare",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"analyze",
														"pdf-compare"
													]
												},
												"description": "Compare two PDF documents and generate a comparison report highlighting the differences.\nThe operation is asynchronous - use the returned taskId to track the operation status.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "# Compare PDFs\n\nCompare one PDF file (as 'base document') with another PDF file (as 'compared document') page by page."
						},
						{
							"name": "Download Document",
							"item": [
								{
									"name": "download-document",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/:document-id/download?filename=financial-report-2023",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												":document-id",
												"download"
											],
											"query": [
												{
													"key": "filename",
													"value": "financial-report-2023",
													"description": "Optional custom filename for the downloaded document, file extension is not needed."
												}
											],
											"variable": [
												{
													"key": "document-id",
													"value": "6838c9cf6b1cc44ab40040cb",
													"description": "ID of the document to download"
												}
											]
										},
										"description": "Download a document by its ID.  \nThe response is streamed as binary content and includes:\n\n- Content-Type header matching the document type (e.g., 'application/pdf', 'image/jpeg')\n    \n- Content-Disposition header for browser download handling (e.g., 'attachment; filename=\"document.pdf\"')\n    \n- Document content as a binary stream\n    \n\nThe optional filename parameter can be used to override the original filename.\n\n##### **File Size & Retention Policy**\n\n- Maximum supported file size is **100 MB**\n    \n- Uploaded files are **retained for 24 hours** before automatic deletion\n    \n\n## Parameter Details\n\n- `documentId`(_path variable_, _required_) ‚Äî The ID of the document generated by the Upload Document API (/api/documents/upload).\n    \n- `filename`(_query_, _optional_) ‚Äî Custom filename for the downloaded document, file extension is not needed."
									},
									"response": [
										{
											"name": "200",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/:document-id/download?filename=financial-report-2023",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														":document-id",
														"download"
													],
													"query": [
														{
															"key": "filename",
															"value": "financial-report-2023",
															"description": "Optional custom filename for the downloaded document, file extension is not needed."
														}
													],
													"variable": [
														{
															"key": "document-id",
															"value": "doc-123e4567-e89b-12d3-a456-426614174000",
															"description": "ID of the document to download"
														}
													]
												},
												"description": "Download a document by its ID.\nThe response is streamed as binary content and includes:\n- Content-Type header matching the document type (e.g., 'application/pdf', 'image/jpeg')\n- Content-Disposition header for browser download handling (e.g., 'attachment; filename=\"document.pdf\"')\n- Document content as a binary stream\n\nThe optional filename parameter can be used to override the original filename.\n"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/pdf",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "400",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/:document-id/download?filename=financial-report-2023",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														":document-id",
														"download"
													],
													"query": [
														{
															"key": "filename",
															"value": "financial-report-2023",
															"description": "Optional custom filename for the downloaded document, file extension is not needed."
														}
													],
													"variable": [
														{
															"key": "document-id",
															"value": "doc-123e4567-e89b-12d3-a456-426614174000",
															"description": "ID of the document to download"
														}
													]
												},
												"description": "Download a document by its ID.\nThe response is streamed as binary content and includes:\n- Content-Type header matching the document type (e.g., 'application/pdf', 'image/jpeg')\n- Content-Disposition header for browser download handling (e.g., 'attachment; filename=\"document.pdf\"')\n- Document content as a binary stream\n\nThe optional filename parameter can be used to override the original filename.\n"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "404",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/:document-id/download?filename=financial-report-2023",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														":document-id",
														"download"
													],
													"query": [
														{
															"key": "filename",
															"value": "financial-report-2023",
															"description": "Optional custom filename for the downloaded document, file extension is not needed."
														}
													],
													"variable": [
														{
															"key": "document-id",
															"value": "doc-123e4567-e89b-12d3-a456-426614174000",
															"description": "ID of the document to download"
														}
													]
												},
												"description": "Download a document by its ID.\nThe response is streamed as binary content and includes:\n- Content-Type header matching the document type (e.g., 'application/pdf', 'image/jpeg')\n- Content-Disposition header for browser download handling (e.g., 'attachment; filename=\"document.pdf\"')\n- Document content as a binary stream\n\nThe optional filename parameter can be used to override the original filename.\n"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/:document-id/download?filename=financial-report-2023",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														":document-id",
														"download"
													],
													"query": [
														{
															"key": "filename",
															"value": "financial-report-2023",
															"description": "Optional custom filename for the downloaded document, file extension is not needed."
														}
													],
													"variable": [
														{
															"key": "document-id",
															"value": "doc-123e4567-e89b-12d3-a456-426614174000",
															"description": "ID of the document to download"
														}
													]
												},
												"description": "Download a document by its ID.\nThe response is streamed as binary content and includes:\n- Content-Type header matching the document type (e.g., 'application/pdf', 'image/jpeg')\n- Content-Disposition header for browser download handling (e.g., 'attachment; filename=\"document.pdf\"')\n- Document content as a binary stream\n\nThe optional filename parameter can be used to override the original filename.\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "Download a document by its ID."
						},
						{
							"name": "Upload Document",
							"item": [
								{
									"name": "upload-document",
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "",
													"type": "string"
												},
												{
													"key": "password",
													"value": "",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "client_id",
												"value": "{{client_id}}",
												"type": "text"
											},
											{
												"key": "client_secret",
												"value": "{{client_secret}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "lFkZe8K03/Annual Revenue Signer Contract.pdf"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/documents/upload",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"documents",
												"upload"
											]
										},
										"description": "Upload a document for processing. Returns a document ID that can be used in other operations.  \nSupports various file formats including:\n\n- PDF documents\n    \n- Microsoft Office documents (Word, Excel, PowerPoint)\n    \n- Images (PNG, JPEG, TIFF)\n    \n- Text files\n    \n\n##### **File Size & Retention Policy**\n\n- Maximum supported file size is **100 MB**\n    \n- Uploaded files are **retained for 24 hours** before automatic deletion\n    \n\n## Parameter Details\n\n- `file`(_required_) - Upload a document to the Foxit and generate a **documentId** for further PDF operations."
									},
									"response": [
										{
											"name": "200",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "file",
															"type": "file",
															"src": []
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"upload"
													]
												},
												"description": "Upload a document for processing. Returns a document ID that can be used in other operations.\nSupports various file formats including:\n- PDF documents\n- Microsoft Office documents (Word, Excel, PowerPoint)\n- Images (PNG, JPEG, TIFF)\n- Text files\n\nMaximum file size: 100MB\n"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"documentId\": \"<string>\"\n}"
										},
										{
											"name": "413",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "0",
															"value": "f"
														},
														{
															"key": "1",
															"value": "i"
														},
														{
															"key": "2",
															"value": "l"
														},
														{
															"key": "3",
															"value": "e"
														},
														{
															"key": "4",
															"value": "="
														},
														{
															"key": "5",
															"value": "s"
														},
														{
															"key": "6",
															"value": "a"
														},
														{
															"key": "7",
															"value": "m"
														},
														{
															"key": "8",
															"value": "p"
														},
														{
															"key": "9",
															"value": "l"
														},
														{
															"key": "10",
															"value": "e"
														},
														{
															"key": "11",
															"value": "."
														},
														{
															"key": "12",
															"value": "p"
														},
														{
															"key": "13",
															"value": "d"
														},
														{
															"key": "14",
															"value": "f"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"upload"
													]
												},
												"description": "Upload a document for processing. Returns a document ID that can be used in other operations.\nSupports various file formats including:\n- PDF documents\n- Microsoft Office documents (Word, Excel, PowerPoint)\n- Images (PNG, JPEG, TIFF)\n- Text files\n\nMaximum file size: 100MB\n"
											},
											"status": "Request Entity Too Large",
											"code": 413,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										},
										{
											"name": "500",
											"originalRequest": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"type": "any"
														},
														{
															"key": "password",
															"type": "any"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "multipart/form-data"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "0",
															"value": "f"
														},
														{
															"key": "1",
															"value": "i"
														},
														{
															"key": "2",
															"value": "l"
														},
														{
															"key": "3",
															"value": "e"
														},
														{
															"key": "4",
															"value": "="
														},
														{
															"key": "5",
															"value": "s"
														},
														{
															"key": "6",
															"value": "a"
														},
														{
															"key": "7",
															"value": "m"
														},
														{
															"key": "8",
															"value": "p"
														},
														{
															"key": "9",
															"value": "l"
														},
														{
															"key": "10",
															"value": "e"
														},
														{
															"key": "11",
															"value": "."
														},
														{
															"key": "12",
															"value": "p"
														},
														{
															"key": "13",
															"value": "d"
														},
														{
															"key": "14",
															"value": "f"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/pdf-services/api/documents/upload",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"pdf-services",
														"api",
														"documents",
														"upload"
													]
												},
												"description": "Upload a document for processing. Returns a document ID that can be used in other operations.\nSupports various file formats including:\n- PDF documents\n- Microsoft Office documents (Word, Excel, PowerPoint)\n- Images (PNG, JPEG, TIFF)\n- Text files\n\nMaximum file size: 100MB\n"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "The media type of the response"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"code\": \"VALIDATION_ERROR\",\n  \"message\": \"Invalid compression level: Must be one of [HIGH, MEDIUM, LOW]\"\n}"
										}
									]
								}
							],
							"description": "Upload a document to the Foxit and generate a documentId for further PDF operations."
						}
					],
					"description": "Foxit PDF Services API provides modern cloud-based capabilities for PDF manipulation.\n\n- Upload the document and start operations\n    \n- Add Security to PDFs by adding Passwords\n    \n- Optimize with PDF linearization\n    \n- Modify the PDF by splitting, manipulating, flattening and compressing\n    \n- Enhance the PDFs by combining two or more files\n    \n- Create PDFs from different file formats\n    \n- Convert PDFs to different formats\n    \n- Analyze PDFs\n    \n- Download document after operations"
				},
				{
					"name": "Get Status",
					"item": [
						{
							"name": "get-task-status",
							"request": {
								"auth": {
									"type": "basic"
								},
								"method": "GET",
								"header": [
									{
										"key": "client_id",
										"value": "{{client_id}}",
										"type": "text"
									},
									{
										"key": "client_secret",
										"value": "{{client_secret}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pdf-services/api/tasks/:task-id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pdf-services",
										"api",
										"tasks",
										":task-id"
									],
									"variable": [
										{
											"key": "task-id",
											"value": "6838c9c66b1cc44ab40040c5",
											"description": "ID of the task to check status for"
										}
									]
								},
								"description": "Get the current status of an asynchronous operation.  \nThe response includes:\n\n- Task state (PENDING, PROCESSING, COMPLETED, FAILED)\n    \n- Progress percentage (0-100)\n    \n- Result document ID (when completed successfully)\n    \n- Error details (if failed)"
							},
							"response": [
								{
									"name": "200",
									"originalRequest": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"type": "any"
												},
												{
													"key": "password",
													"type": "any"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pdf-services/api/tasks/:task-id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pdf-services",
												"api",
												"tasks",
												":task-id"
											],
											"variable": [
												{
													"key": "task-id",
													"value": "example-task-id",
													"description": "ID of the task to check status for"
												}
											]
										},
										"description": "Get the current status of an asynchronous operation.\nThe response includes:\n- Task state (PENDING, PROCESSING, COMPLETED, FAILED)\n- Progress percentage (0-100)\n- Result document ID (when completed successfully)\n- Error details (if failed)\n"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "The media type of the response"
										},
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"taskId\": \"<string>\",\n  \"status\": \"<string>\",\n  \"progress\": \"<int32>\",\n  \"resultDocumentId\": \"<string>\",\n  \"error\": {\n    \"code\": \"<string>\",\n    \"message\": \"<string>\"\n  }\n}"
								}
							]
						}
					],
					"description": "Get the current status of an asynchronous operation.  \nThe response includes:\n\n- Task state (PENDING, PROCESSING, COMPLETED, FAILED)\n    \n- Progress percentage (0-100)\n    \n- Result document ID (when completed successfully)\n    \n- Error details (if failed)"
				}
			]
		},
		{
			"name": "Document Generation APIs",
			"item": [
				{
					"name": "Analyze Document",
					"request": {
						"auth": {
							"type": "basic"
						},
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"base64FileString\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/document-generation/api/AnalyzeDocumentBase64",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"document-generation",
								"api",
								"AnalyzeDocumentBase64"
							]
						},
						"description": "## Analyze Document\n\n**Document Analyze API** is designed to extract all predefined text tags from your template documents. It plays a key role in identifying the dynamic fields required for document generation, enabling developers to map values accurately. This API ensures that you capture every necessary variable, allowing you to construct the correct JSON payload for seamless integration with the **Document Generation API**.\n\n## Parameter Details\n\nUtilize the API to analyze template documents and automatically extract their text tags, simplifying the programmatic mapping of data fields.\n\n### Request Parameters\n\n1. **`base64FileString`**(_required_) - The Base64-encoded string of the `.docx` document you want to analyze. The API will process the file, extract all text tags present in the document, and return their details in the response.\n    \n\n### Response Parameters\n\nThe response will be in JSON format and include the following parameters:\n\n- **`singleTagsString`** ‚Äì Lists all single-value text tags detected in the Word document. These tags are intended to be mapped to individual data values.\n    \n- **`doubleTagsString`** ‚Äì Lists multi-value (repeating) text tags identified in the document. These are used to dynamically populate multiple entries, such as rows in a table."
					},
					"response": [
						{
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "client_id",
										"value": "{{client_id}}",
										"type": "text"
									},
									{
										"key": "client_secret",
										"value": "{{client_secret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"base64FileString\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/document-generation/api/AnalyzeDocumentBase64",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"document-generation",
										"api",
										"AnalyzeDocumentBase64"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\r\n    \"singleTagsString\": \"Account.Name,CloseDate,ROW_NUMBER,OpportunityLineItems.ProductCode,OpportunityLineItems.name,OpportunityLineItems.quantity,OpportunityLineItems.unitprice,OpportunityLineItems.totalprice,today\",\r\n    \"doubleTagsString\": \"OpportunityLineItems\",\r\n    \"signerCount\": 0,\r\n    \"message\": null\r\n}"
						}
					]
				},
				{
					"name": "Generate Document",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							},
							{
								"key": "client_secret",
								"value": "{{client_secret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"outputFormat\": \"pdf\",\r\n  \"currencyCulture\": \"en-US\",\r\n  \"documentValues\": {\r\n    \"ShowAgreement\": \"true\",\r\n    \"PaymentDueDate\": \"06/02/2025\",\r\n    \"AccountName\": \"Jordan O'Connor\",\r\n    \"Name\": \"Jordan\",\r\n    \"OpportunityLineItems\": [\r\n    {\r\n        \"OpportunityLineItems.quantity\": \"1\",\r\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\r\n        \"OpportunityLineItems.totalprice\": \"3500.00\"\r\n    },\r\n    {\r\n        \"OpportunityLineItems.quantity\": \"2\",\r\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\r\n        \"OpportunityLineItems.totalprice\": \"7000.00\"\r\n    },\r\n    {\r\n        \"OpportunityLineItems.quantity\": \"1\",\r\n        \"OpportunityLineItems.unitprice\": \"2100.00\",\r\n        \"OpportunityLineItems.totalprice\": \"2100.00\"\r\n    }\r\n    ]\r\n  },\r\n  \"base64FileString\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/document-generation/api/GenerateDocumentBase64",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"document-generation",
								"api",
								"GenerateDocumentBase64"
							]
						},
						"description": "## Document Generation\n\n**Document Generation API** is used to create dynamic, data-driven documents by injecting JSON input into predefined templates. Each key in the JSON payload corresponds to a text tag within the document, allowing for seamless replacement of placeholders with actual values. This enables automated, programmatic generation of complete documents tailored to specific data inputs, streamlining workflows and reducing manual effort.\n\n## Parameter Details\n\nThe API has request and response parameters to successfully generate documents.\n\n### Request Parameters\n\n1. **`documentValues`**(object, required) - A set of key-value pairs used to populate the document dynamically. Each key should match a text tag in the document template (e.g., `{{name}}`), and the corresponding value will be inserted in place of that tag.\n    \n2. **`base64FileString`** (string, required)- The Base64-encoded string of the `.docx` document where you have added text tags. The API will process the file, map the tags on the document with JSON data.\n    \n3. **`outputFormat`** - The value could be `\"PDF\"` or `\"DOCX\"` to get the pdf or word output. The default value is \"PDF\".\n    \n4. `currencyCulture` (optional) - Specifies the culture code used to format currency values (e.g., for symbols, decimal separators, and thousands separators). The following currency codes are supported:\n    \n\n| Culture Code | Country / Region | Symbol | Example Format |\n| --- | --- | --- | --- |\n| en-US | United States | $ | `$1,234.56` |\n| en-GB | United Kingdom | ¬£ | `¬£1,234.56` |\n| de-DE | Germany | ‚Ç¨ | `1.234,56 ‚Ç¨` |\n| fr-FR | France | ‚Ç¨ | `1‚ÄØ234,56 ‚Ç¨` |\n| hi-IN | India | ‚Çπ | `‚Çπ1,234.56` |\n| pt-BR | Brazil | R$ | `R$ 1.234,56` |\n| ru-RU | Russia | ‚ÇΩ | `1 234,56 ‚ÇΩ` |\n| es-ES | Spain | ‚Ç¨ | `1.234,56 ‚Ç¨` |\n| it-IT | Italy | ‚Ç¨ | `1.234,56 ‚Ç¨` |\n| ko-KR | South Korea | ‚Ç© | `‚Ç©1,235` |\n| ar-SA | Saudi Arabia | ÿ±.ÿ≥ | `ÿ±.ÿ≥ 1,234.56` |\n| nl-NL | Netherlands | ‚Ç¨ | `‚Ç¨ 1.234,56` |\n| tr-TR | Turkey | ‚Ç∫ | `‚Ç∫1.234,56` |\n| pl-PL | Poland | z≈Ç | `1 234,56 z≈Ç` |\n| th-TH | Thailand | ‡∏ø | `‡∏ø1,234.56` |\n| sv-SE | Sweden | kr | `1 234,56 kr` |\n| da-DK | Denmark | kr | `1.234,56 kr` |\n| no-NO | Norway | kr | `kr 1 234,56` |\n| cs-CZ | Czech Republic | Kƒç | `1 234,56 Kƒç` |\n| id-ID | Indonesia | Rp | `Rp1.234,56` |\n| vi-VN | Vietnam | ‚Ç´ | `1.234,56 ‚Ç´` |\n| he-IL | Israel | ‚Ç™ | `‚Ç™ 1,234.56` |\n| en-CA | Canada | $ | `$1,234.56` |\n| ja-JP | Japan | ¬• | `Ôø•1,235` |\n| zh-CN | China | ¬• | `¬•1,234.56` |\n\n### Response Parameters\n\n### Response Parameters\n\n- **`message`** ‚Äì Success confirmation message upon document generation.\n    \n    - If the output is a PDF, the message will be: _\"PDF created successfully.\"_\n        \n    - If the output is a Word document, the message will be: _\"Word document created successfully.\"_\n        \n- **`fileExtension`** ‚Äì The file extension of the generated document.\n    \n    - Default value: `\"pdf\"`\n        \n    - Possible value: `\"docx\"` (if a Word document is generated)\n        \n- **`base64FileString`** ‚Äì The base64 string of generated document."
					},
					"response": [
						{
							"name": "200",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "client_id",
										"value": "{{client_id}}",
										"type": "text"
									},
									{
										"key": "client_secret",
										"value": "{{client_secret}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"outputFormat\": \"pdf\",\r\n  \"currencyCulture\": \"en-US\",\r\n  \"documentValues\": {\r\n    \"ShowAgreement\": \"true\",\r\n    \"PaymentDueDate\": \"06/02/2025\",\r\n    \"AccountName\": \"Jordan O'Connor\",\r\n    \"Name\": \"Jordan\",\r\n    \"OpportunityLineItems\": [\r\n    {\r\n        \"OpportunityLineItems.quantity\": \"1\",\r\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\r\n        \"OpportunityLineItems.totalprice\": \"3500.00\"\r\n    },\r\n    {\r\n        \"OpportunityLineItems.quantity\": \"2\",\r\n        \"OpportunityLineItems.unitprice\": \"3500.00\",\r\n        \"OpportunityLineItems.totalprice\": \"7000.00\"\r\n    },\r\n    {\r\n        \"OpportunityLineItems.quantity\": \"1\",\r\n        \"OpportunityLineItems.unitprice\": \"2100.00\",\r\n        \"OpportunityLineItems.totalprice\": \"2100.00\"\r\n    }\r\n    ]\r\n  },\r\n  \"base64FileString\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/document-generation/api/GenerateDocumentBase64",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"document-generation",
										"api",
										"GenerateDocumentBase64"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 25 Jun 2025 18:55:55 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "server",
									"value": "Anypoint Flex Gateway"
								},
								{
									"key": "x-envoy-upstream-service-time",
									"value": "594"
								},
								{
									"key": "x-envoy-decorator-operation",
									"value": "qa-document-generation-service.qa-document-generation-service.svc.cluster.local:80/*"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"PDF Document Generated Successfully\",\n    \"fileExtension\": \"pdf\",\n    \"base64FileString\": \"\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "eSign APIs",
			"item": [
				{
					"name": "Envelopes",
					"item": [
						{
							"name": "Create Envelope from URL",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderName\": \"eSignature Document\",\n  \"fileUrls\": [\n    \"https://developersguide.foxitesign.foxit.com/uploads/FoxiteSignAPISampleDoc.pdf\"\n  ],\n  \"fileNames\": [\n    \"Example Service Contract.pdf\"\n  ],\n  \"parties\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1\n    }\n  ],\n  \"createEmbeddedSigningSession\": true,\n  \"processTextTags\": true,\n  \"processAcroFields\": false,\n  \"inputType\": \"elit laborum\",\n  \"fields\": [\n    {}\n  ],\n  \"sendNow\": true,\n  \"createEmbeddedSigningSessionForAllParties\": true,\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"fixRecipientParties\": false,\n  \"fixDocuments\": false,\n  \"sendSuccessUrl\": \"culpa aute\",\n  \"sendErrorUrl\": \"commodo irure\",\n  \"createEmbeddedSendingSession\": false,\n  \"embeddedSignersEmailIds\": [\n    \"peter@ggmail.com\",\n    \"spidey@ggmail.com\"\n  ],\n  \"signSuccessUrl\": \"esse sint ipsum\",\n  \"signDeclineUrl\": \"et aute in Excepteur esse\",\n  \"signLaterUrl\": \"velit nisi ex aliquip\",\n  \"signErrorUrl\": \"Excepteur\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"allowAdvancedEmailValidation\": false,\n  \"signSuccessUrlAllParties\": false,\n  \"emailTemplateId\": -94870131,\n  \"signerInstructionId\": -8161132,\n  \"confirmationInstructionId\": \"est\",\n  \"themeColor\": \"cupidatat minim reprehenderit\",\n  \"sessionExpire\": false,\n  \"expiry\": 48484506,\n  \"dependentFields\": {\n    \"dependentFields\": [\n      {\n        \"dependentFieldName\": \"DEPENDENT_FIELD_NAME\",\n        \"parentFieldName\": \"PARENT_FIELD_NAME\",\n        \"parentFieldValue\": \"VALUE_OF_PARENT_FIELD\",\n        \"options\": \"contains\"\n      }\n    ]\n  },\n  \"metadata\": {},\n  \"senderEmail\": \"\\\"user2@example.com\\\"\",\n  \"hideAddMeButton\": false,\n  \"hideAddNewButton\": false,\n  \"hideAddGroupButton\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false,\n  \"hideSignerSelectOption\": false,\n  \"hideSignerActions\": false,\n  \"hideSenderName\": false,\n  \"hideFolderName\": false,\n  \"hideDocumentsName\": false,\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideSendButton\": false,\n  \"hideNextRequiredFieldbtn\": false,\n  \"requiredBothEmbeddedSession\": false,\n  \"folderPassword\": \"\\\"password\\\"\",\n  \"enableStepByStep\": false,\n  \"hideAddPartiesOption\": false,\n  \"selfSign\": false,\n  \"selfSignerSuccessUrl\": \"dolor dolor\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/createfolder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"createfolder"
									]
								},
								"description": "Envelopes can be created and send with publicly accessible PDF files.\nPass the array of URLs of PDFs in the body for documents to send."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderName\": \"eSignature Document\",\n  \"fileUrls\": [\n    \"https://developersguide.foxitesign.foxit.com/uploads/FoxiteSignAPISampleDoc.pdf\"\n  ],\n  \"fileNames\": [\n    \"Example Service Contract.pdf\"\n  ],\n  \"parties\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1\n    }\n  ],\n  \"createEmbeddedSigningSession\": true,\n  \"processTextTags\": true,\n  \"processAcroFields\": true,\n  \"inputType\": \"ad officia t\",\n  \"fields\": [\n    {}\n  ],\n  \"sendNow\": true,\n  \"createEmbeddedSigningSessionForAllParties\": true,\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"fixRecipientParties\": false,\n  \"fixDocuments\": false,\n  \"sendSuccessUrl\": \"occaecat ut id\",\n  \"sendErrorUrl\": \"pariatur reprehenderit Excepteur ullamco adipisicing\",\n  \"createEmbeddedSendingSession\": false,\n  \"embeddedSignersEmailIds\": [\n    \"peter@ggmail.com\",\n    \"spidey@ggmail.com\"\n  ],\n  \"signSuccessUrl\": \"laborum ut Excepteur\",\n  \"signDeclineUrl\": \"aliquip irure esse fugiat nulla\",\n  \"signLaterUrl\": \"nulla sunt mollit incididunt sint\",\n  \"signErrorUrl\": \"nostrud id aute elit\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"allowAdvancedEmailValidation\": false,\n  \"signSuccessUrlAllParties\": false,\n  \"emailTemplateId\": 81966883,\n  \"signerInstructionId\": -45054853,\n  \"confirmationInstructionId\": \"incididunt in laborum\",\n  \"themeColor\": \"ut sint qui\",\n  \"sessionExpire\": false,\n  \"expiry\": 18142002,\n  \"dependentFields\": {\n    \"dependentFields\": [\n      {\n        \"dependentFieldName\": \"DEPENDENT_FIELD_NAME\",\n        \"parentFieldName\": \"PARENT_FIELD_NAME\",\n        \"parentFieldValue\": \"VALUE_OF_PARENT_FIELD\",\n        \"options\": \"contains\"\n      }\n    ]\n  },\n  \"metadata\": {},\n  \"senderEmail\": \"\\\"user2@example.com\\\"\",\n  \"hideAddMeButton\": false,\n  \"hideAddNewButton\": false,\n  \"hideAddGroupButton\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false,\n  \"hideSignerSelectOption\": false,\n  \"hideSignerActions\": false,\n  \"hideSenderName\": false,\n  \"hideFolderName\": false,\n  \"hideDocumentsName\": false,\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideSendButton\": false,\n  \"hideNextRequiredFieldbtn\": false,\n  \"requiredBothEmbeddedSession\": false,\n  \"folderPassword\": \"\\\"password\\\"\",\n  \"enableStepByStep\": false,\n  \"hideAddPartiesOption\": false,\n  \"selfSign\": false,\n  \"selfSignerSuccessUrl\": \"labore \"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/createfolder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"createfolder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Send Draft Envelope",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": 2520579,\n  \"folderName\": \"Example Documents\",\n  \"parties\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1\n    }\n  ],\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"fields\": [\n    {\n      \"type\": \"text\",\n      \"name\": \"Signer Name\",\n      \"x\": 108,\n      \"y\": 500,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"tabOrder\": 1,\n      \"party\": 1,\n      \"tooltip\": \"\",\n      \"required\": true,\n      \"characterLimit\": 100,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"hideFieldNameForRecipients\": false\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 336,\n      \"y\": 500,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"tabOrder\": 1,\n      \"party\": 1,\n      \"name\": \"Date\",\n      \"required\": true,\n      \"fontSize\": 12,\n      \"dateFormat\": \"MM-DD-YYYY\"\n    },\n    {\n      \"type\": \"signature\",\n      \"x\": 108,\n      \"y\": 565,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"party\": 1,\n      \"required\": true\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 336,\n      \"y\": 565,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"tabOrder\": 1,\n      \"party\": 1,\n      \"name\": \"Date Signed\",\n      \"required\": true,\n      \"fontSize\": 12,\n      \"dateFormat\": \"MM-DD-YYYY\",\n      \"readOnly\": true,\n      \"systemField\": true\n    }\n  ],\n  \"sendNow\": true,\n  \"createEmbeddedSigningSession\": true,\n  \"embeddedSignersEmailIds\": [\n    \"peter@ggmail.com\",\n    \"spidey@ggmail.com\"\n  ],\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"signSuccessUrl\": \"veniam\",\n  \"signDeclineUrl\": \"velit laborum qui sit sin\",\n  \"signLaterUrl\": \"sunt occaecat in aute\",\n  \"signErrorUrl\": \"dolor\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"allowAdvancedEmailValidation\": false,\n  \"signSuccessUrlAllParties\": false,\n  \"emailTemplateId\": 2,\n  \"signerInstructionId\": 1,\n  \"confirmationInstructionId\": 3,\n  \"themeColor\": \"velit non exercitation\",\n  \"sessionExpire\": false,\n  \"expiry\": -26537584,\n  \"senderEmail\": \"\\\"user2@example.com\\\"\",\n  \"createExecutedFolder\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false,\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideNextRequiredFieldbtn\": false,\n  \"folderPassword\": \"dolore ea tempor laboris qui\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/sendDraftFolder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"sendDraftFolder"
									]
								},
								"description": "*Note*: this endpoint will only send an envelope if it is currently in DRAFT mode. To create an envelope in DRAFT mode, please pass *sendNow* as `true` for any envelope creation endpoint (such as <a class=\"sc-hlTwrV fGbQJc\" href=\"#/http/api-endpoints/envelopes-api/create-envelope-from-url\">Create Envelope from URL</a> )"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": 2520579,\n  \"folderName\": \"Example Documents\",\n  \"parties\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1\n    }\n  ],\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"fields\": [\n    {\n      \"type\": \"text\",\n      \"name\": \"Signer Name\",\n      \"x\": 108,\n      \"y\": 500,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"tabOrder\": 1,\n      \"party\": 1,\n      \"tooltip\": \"\",\n      \"required\": true,\n      \"characterLimit\": 100,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"hideFieldNameForRecipients\": false\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 336,\n      \"y\": 500,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"tabOrder\": 1,\n      \"party\": 1,\n      \"name\": \"Date\",\n      \"required\": true,\n      \"fontSize\": 12,\n      \"dateFormat\": \"MM-DD-YYYY\"\n    },\n    {\n      \"type\": \"signature\",\n      \"x\": 108,\n      \"y\": 565,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"party\": 1,\n      \"required\": true\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 336,\n      \"y\": 565,\n      \"width\": 60,\n      \"height\": 20,\n      \"documentNumber\": 1,\n      \"pageNumber\": 1,\n      \"tabOrder\": 1,\n      \"party\": 1,\n      \"name\": \"Date Signed\",\n      \"required\": true,\n      \"fontSize\": 12,\n      \"dateFormat\": \"MM-DD-YYYY\",\n      \"readOnly\": true,\n      \"systemField\": true\n    }\n  ],\n  \"sendNow\": true,\n  \"createEmbeddedSigningSession\": true,\n  \"embeddedSignersEmailIds\": [\n    \"peter@ggmail.com\",\n    \"spidey@ggmail.com\"\n  ],\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"signSuccessUrl\": \"tempor\",\n  \"signDeclineUrl\": \"elit culpa\",\n  \"signLaterUrl\": \"tempor laborum reprehenderit\",\n  \"signErrorUrl\": \"esse dolore\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"allowAdvancedEmailValidation\": false,\n  \"signSuccessUrlAllParties\": false,\n  \"emailTemplateId\": 2,\n  \"signerInstructionId\": 1,\n  \"confirmationInstructionId\": 3,\n  \"themeColor\": \"cillum reprehenderit deserunt\",\n  \"sessionExpire\": false,\n  \"expiry\": 86738683,\n  \"senderEmail\": \"\\\"user2@example.com\\\"\",\n  \"createExecutedFolder\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false,\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideNextRequiredFieldbtn\": false,\n  \"folderPassword\": \"ex aute\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/sendDraftFolder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"sendDraftFolder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Envelope Fields",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": -50787227,\n  \"fields\": {\n    \"FIELD1_NAME\": \"VALUE\",\n    \"FIELD2_NAME\": \"VALUE\"\n  },\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"custom_field2\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/updateEnvelopeFields",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"updateEnvelopeFields"
									]
								},
								"description": "You can update envelope and the custom fields `(custom_field1 and custom_field2)` anytime before execution using the 'Update Envelope Fields' API. \n\n*Note*: Envelope fields for a party can only be updated if the document has not been signed by that party yet."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": -50787227,\n  \"fields\": {\n    \"FIELD1_NAME\": \"VALUE\",\n    \"FIELD2_NAME\": \"VALUE\"\n  },\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"custom_field2\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/updateEnvelopeFields",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"updateEnvelopeFields"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Envelope Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/folders/myfolder?folderId=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"myfolder"
									],
									"query": [
										{
											"key": "folderId",
											"value": "amet anim ea Lorem",
											"description": "(Required) "
										}
									]
								},
								"description": "You can pull our API to get the Envelope/Document data"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/folders/myfolder?folderId=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"myfolder"
											],
											"query": [
												{
													"key": "folderId",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Envelope Ids",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/folders/getAllFolderIdsByStatus?dateFrom=6789-11-04&dateTo=6789-11-04&status=EXECUTED",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"getAllFolderIdsByStatus"
									],
									"query": [
										{
											"key": "dateFrom",
											"value": "6789-11-04",
											"description": "(Required) Start of the Envelope Creation Date range. Accepted format: YYYY-MM-DD"
										},
										{
											"key": "dateTo",
											"value": "6789-11-04",
											"description": "(Required) Start of the Envelope Creation Date range. Accepted format: YYYY-MM-DD. <br/> <br/>Note: dateTo value should be under the 6 months from dateFrom value."
										},
										{
											"key": "status",
											"value": "EXECUTED",
											"description": "Get FolderIds by the folder status. Status parameter can have any of the following values: EXECUTED,SHARED,DRAFT, PARTIALLY SIGNED, CANCELLED, EXPIRED and DELETED. <br/>  <br/> Note: If you don't pass this parameter, then by default you will receive envelopes with any status."
										}
									]
								},
								"description": "You can poll our API to get the Id(s) of multiple envelopes by providing a date range and (optionally) a status as filters."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/folders/getAllFolderIdsByStatus?dateFrom=6789-11-04&dateTo=6789-11-04&status=EXECUTED",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"getAllFolderIdsByStatus"
											],
											"query": [
												{
													"key": "dateFrom",
													"value": "6789-11-04"
												},
												{
													"key": "dateTo",
													"value": "6789-11-04"
												},
												{
													"key": "status",
													"value": "EXECUTED"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Cancel Envelope",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": 51298042,\n  \"reason_for_cancellation\": \"fugiat ipsum minim\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/cancelFolder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"cancelFolder"
									]
								},
								"description": "With Foxit eSign API, you can cancel/decline to sign an Envelope by calling /folders/cancelFolder with the given parameters."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": 51298042,\n  \"reason_for_cancellation\": \"fugiat ipsum minim\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/cancelFolder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"cancelFolder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Download Envelope Files",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/octet-stream"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/folders/download?folderId=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"download"
									],
									"query": [
										{
											"key": "folderId",
											"value": "amet anim ea Lorem",
											"description": "(Required) The ID of the Envelope for which you would like to obtain the binary zip file for."
										}
									]
								},
								"description": "You can download executed folder document(s) as well as signature certificate all at once in a zip file.\n\nReturns ZIP file binary stream of all the documents in the folder with the signature certificate."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "application/octet-stream"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/folders/download?folderId=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"download"
											],
											"query": [
												{
													"key": "folderId",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/octet-stream"
										}
									],
									"cookie": [],
									"body": "pariatur adipisicing"
								}
							]
						},
						{
							"name": "Modify Shared Envelope",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": 2520579,\n  \"folderName\": \"eSignature Document\",\n  \"parties\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1\n    }\n  ],\n  \"createEmbeddedSigningSession\": true,\n  \"fields\": [\n    {}\n  ],\n  \"sendNow\": true,\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"fixRecipientParties\": false,\n  \"fixDocuments\": false,\n  \"sendSuccessUrl\": \"laboris\",\n  \"sendErrorUrl\": \"la\",\n  \"createEmbeddedSendingSession\": false,\n  \"embeddedSignersEmailIds\": [\n    \"peter@ggmail.com\",\n    \"spidey@ggmail.com\"\n  ],\n  \"signSuccessUrl\": \"aliquip dolor\",\n  \"signDeclineUrl\": \"dolore laboris cupid\",\n  \"signLaterUrl\": \"ad do\",\n  \"signErrorUrl\": \"eiusmod\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"allowAdvancedEmailValidation\": false,\n  \"signSuccessUrlAllParties\": false,\n  \"emailTemplateId\": 3,\n  \"signerInstructionId\": 2,\n  \"confirmationInstructionId\": 4,\n  \"themeColor\": \"elit in eu\",\n  \"sessionExpire\": false,\n  \"expiry\": -78314931,\n  \"senderEmail\": \"\\\"user2@example.com\\\"\",\n  \"createExecutedFolder\": false,\n  \"hideAddMeButton\": false,\n  \"hideAddNewButton\": false,\n  \"hideAddGroupButton\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false,\n  \"hideSignerSelectOption\": false,\n  \"hideSignerActions\": false,\n  \"hideSenderName\": false,\n  \"hideFolderName\": false,\n  \"hideDocumentsName\": false,\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideSendButton\": false,\n  \"hideNextRequiredFieldbtn\": false,\n  \"folderPassword\": \"tempor minim reprehenderit cupidatat\",\n  \"enableStepByStep\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/modifySharedFolder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"modifySharedFolder"
									]
								},
								"description": "Modify any shared envelope and send again to recipients for signing."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": 2520579,\n  \"folderName\": \"eSignature Document\",\n  \"parties\": [\n    {\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1\n    }\n  ],\n  \"createEmbeddedSigningSession\": true,\n  \"fields\": [\n    {}\n  ],\n  \"sendNow\": true,\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"custom_field1\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  },\n  \"fixRecipientParties\": false,\n  \"fixDocuments\": false,\n  \"sendSuccessUrl\": \"sint aliquip\",\n  \"sendErrorUrl\": \"Duis nisi nulla\",\n  \"createEmbeddedSendingSession\": false,\n  \"embeddedSignersEmailIds\": [\n    \"peter@ggmail.com\",\n    \"spidey@ggmail.com\"\n  ],\n  \"signSuccessUrl\": \"fugiat magna esse proident\",\n  \"signDeclineUrl\": \"cupidatat\",\n  \"signLaterUrl\": \"aute occaecat\",\n  \"signErrorUrl\": \"qui adipisicing nulla\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"allowAdvancedEmailValidation\": false,\n  \"signSuccessUrlAllParties\": false,\n  \"emailTemplateId\": 3,\n  \"signerInstructionId\": 2,\n  \"confirmationInstructionId\": 4,\n  \"themeColor\": \"Excepteur in\",\n  \"sessionExpire\": false,\n  \"expiry\": -5908003,\n  \"senderEmail\": \"\\\"user2@example.com\\\"\",\n  \"createExecutedFolder\": false,\n  \"hideAddMeButton\": false,\n  \"hideAddNewButton\": false,\n  \"hideAddGroupButton\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false,\n  \"hideSignerSelectOption\": false,\n  \"hideSignerActions\": false,\n  \"hideSenderName\": false,\n  \"hideFolderName\": false,\n  \"hideDocumentsName\": false,\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideSendButton\": false,\n  \"hideNextRequiredFieldbtn\": false,\n  \"folderPassword\": \"dolor\",\n  \"enableStepByStep\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/modifySharedFolder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"modifySharedFolder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Send Signature Reminder",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": 58182357\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/signaturereminder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"signaturereminder"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": 58182357\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/signaturereminder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"signaturereminder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Download Single Document PDF",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/octet-stream"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/folders/document/download?folderId=amet anim ea Lorem&docNumber=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"document",
										"download"
									],
									"query": [
										{
											"key": "folderId",
											"value": "amet anim ea Lorem",
											"description": "(Required) The ID of the Envelope for which you would like to obtain the binary zip file for."
										},
										{
											"key": "docNumber",
											"value": "amet anim ea Lorem",
											"description": "(Required) The index of the document starting from 1 whose PDF you want to download."
										}
									]
								},
								"description": "You can download individual document as a pdf file.\n\nReturns PDF file binary stream of the document which you can save as PDF file."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "application/octet-stream"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/folders/document/download?folderId=amet anim ea Lorem&docNumber=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"document",
												"download"
											],
											"query": [
												{
													"key": "folderId",
													"value": "amet anim ea Lorem"
												},
												{
													"key": "docNumber",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/octet-stream"
										}
									],
									"cookie": [],
									"body": "pariatur adipisicing"
								}
							]
						},
						{
							"name": "Move Envelopes to Recycle Bin",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"folderIds\": [\n      226\n    ]\n  },\n  {\n    \"folderIds\": [\n      226\n    ]\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/movetorecyclebin",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"movetorecyclebin"
									]
								},
								"description": "Using Foxit eSign API you can move your Envelope(s) to the recycle bin. Documents in the recycle bin are permanently removed from Foxit eSign systems automatically after 14 days."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"folderIds\": [\n      226\n    ]\n  },\n  {\n    \"folderIds\": [\n      226\n    ]\n  }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/movetorecyclebin",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"movetorecyclebin"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Envelope Recipients",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": 23500405,\n  \"parties\": [\n    {\n      \"action\": \"update\",\n      \"sequence\": 1,\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"dialingCode\": \"+1\",\n      \"mobileNumber\": \"1234567890\"\n    },\n    {\n      \"action\": \"update\",\n      \"sequence\": 1,\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"dialingCode\": \"+1\",\n      \"mobileNumber\": \"1234567890\"\n    }\n  ],\n  \"allowAdvancedEmailValidation\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/updateFolder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"updateFolder"
									]
								},
								"description": "You can change the first name, last name, and email if the recipient party has not signed on a shared or a partially signed document using the `Update Envelope Recipients` API. Recipients can be changed only if the Envelope is in `DRAFT` status."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"folderId\": 23500405,\n  \"parties\": [\n    {\n      \"action\": \"update\",\n      \"sequence\": 1,\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"dialingCode\": \"+1\",\n      \"mobileNumber\": \"1234567890\"\n    },\n    {\n      \"action\": \"update\",\n      \"sequence\": 1,\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"emailId\": \"john.doe@example.com\",\n      \"dialingCode\": \"+1\",\n      \"mobileNumber\": \"1234567890\"\n    }\n  ],\n  \"allowAdvancedEmailValidation\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/updateFolder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"updateFolder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Envelope Activity History",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/folders/viewActivityHistory?folderId=-36888084",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"viewActivityHistory"
									],
									"query": [
										{
											"key": "folderId",
											"value": "-36888084",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/folders/viewActivityHistory?folderId=-36888084",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"viewActivityHistory"
											],
											"query": [
												{
													"key": "folderId",
													"value": "-36888084"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Deleted Envelope History",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/folders/deletedLog?folderId=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"deletedLog"
									],
									"query": [
										{
											"key": "folderId",
											"value": "amet anim ea Lorem",
											"description": "(Required) "
										}
									]
								},
								"description": "You can poll our API to get the deleted folder history."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/folders/deletedLog?folderId=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"deletedLog"
											],
											"query": [
												{
													"key": "folderId",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Envelopes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"folderIds\": [\n      226\n    ]\n  },\n  {\n    \"folderIds\": [\n      226\n    ]\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/delete",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"delete"
									]
								},
								"description": "Using Foxit eSign API you can remove your Envelope(s) permanently from Foxit eSign systems."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"folderIds\": [\n      226\n    ]\n  },\n  {\n    \"folderIds\": [\n      226\n    ]\n  }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/delete",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"delete"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Download Report",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"status\": \"EXECUTED\",\n  \"creationDateFrom\": \"2022-01-01\",\n  \"creationDateTo\": \"2022-04-01\",\n  \"folderName\": \"sunt ipsum\",\n  \"includeFields\": \"false\",\n  \"authorEmail\": \"est\",\n  \"signerEmail\": \"ut\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/folders/getFolders/download?access_token=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"folders",
										"getFolders",
										"download"
									],
									"query": [
										{
											"key": "access_token",
											"value": "amet anim ea Lorem",
											"description": "(Required) Oauth2.0 access token should be added here."
										}
									]
								},
								"description": "To download the author email, Folder Name, Folder Number, date sent, status etc via API of envelopes from a date range in an Excel file use this endpoint."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "amet anim ea Lorem",
												"description": "(Required) "
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"status\": \"EXECUTED\",\n  \"creationDateFrom\": \"2022-01-01\",\n  \"creationDateTo\": \"2022-04-01\",\n  \"folderName\": \"sunt ipsum\",\n  \"includeFields\": \"false\",\n  \"authorEmail\": \"est\",\n  \"signerEmail\": \"ut\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/folders/getFolders/download?access_token=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"folders",
												"getFolders",
												"download"
											],
											"query": [
												{
													"key": "access_token",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "With Foxit's robust Envelope APIs, you can easily perform essential envelope operations such as:\n\n- **Create, Update, and Delete Envelopes**  \n    Effortlessly manage the lifecycle of envelopes, create new ones, update details, or delete them when no longer needed.\n    \n- **Send Draft Envelopes**  \n    Finalize and send envelopes saved as drafts, streamlining your document workflow.\n    \n- **Modify Shared Envelopes**  \n    Collaborate efficiently by updating envelopes shared with team members or recipients.\n    \n- **Send Signature Reminders**  \n    Automatically trigger reminder emails to recipients who haven‚Äôt signed yet, helping speed up turnaround time.\n    \n- **Update Fields in Envelopes**  \n    Dynamically update form fields such as text fields and dates on the fly.\n    \n\nThese APIs are designed to provide flexibility and automation, empowering your application to handle digital signature workflows with ease and precision.",
					"auth": {
						"type": "oauth2",
						"oauth2": [
							{
								"key": "addTokenTo",
								"value": "header",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Templates",
					"item": [
						{
							"name": "Create Envelope from Template",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"templateIds\": [\n    271591\n  ],\n  \"parties\": [\n    {\n      \"firstName\": \"FIRST_NAME_OF_RECIPIENT_PARTY\",\n      \"lastName\": \"LAST_NAME_OF_RECIPIENT_PARTY\",\n      \"emailId\": \"peter.parker@spiderman.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"workflowSequence\": 1,\n      \"sequence\": 1,\n      \"hostEmailId\": \"EMAIL_ID_OF_INPERSON_ADMINISTRATOR\",\n      \"allowNameChange\": \"true\",\n      \"signerAuthLevel\": \"NO\"\n    },\n    {\n      \"firstName\": \"FIRST_NAME_OF_RECIPIENT_PARTY\",\n      \"lastName\": \"LAST_NAME_OF_RECIPIENT_PARTY\",\n      \"emailId\": \"bruce@batman.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"workflowSequence\": 2,\n      \"sequence\": 2,\n      \"hostEmailId\": \"EMAIL_ID_OF_INPERSON_ADMINISTRATOR\",\n      \"allowNameChange\": \"true\",\n      \"signerAuthLevel\": \"NO\"\n    }\n  ],\n  \"folderName\": \"Testing Flow1\",\n  \"fields\": {},\n  \"allowAdvancedEmailValidation\": false,\n  \"folderPassword\": \"laborum in ullamco dolor\",\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"sendNow\": true,\n  \"signSuccessUrlAllParties\": false,\n  \"createEmbeddedSendingSession\": true,\n  \"fixRecipientParties\": true,\n  \"fixDocuments\": true,\n  \"sendSuccessUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"sendErrorUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"hideSignerSelectOption\": false,\n  \"hideSignerActions\": false,\n  \"hideSenderName\": true,\n  \"hideSendButton\": true,\n  \"hideFolderName\": false,\n  \"hideDocumentsName\": true,\n  \"hideAddMeButton\": false,\n  \"hideAddNewButton\": true,\n  \"hideAddGroupButton\": false,\n  \"createEmbeddedSigningSession\": true,\n  \"createEmbeddedSigningSessionForAllParties\": false,\n  \"embeddedSignersEmailIds\": [\n    \"peter.parker@spiderman.com\",\n    \"bruce@batman.com\"\n  ],\n  \"signSuccessUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"signDeclineUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"signLaterUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"signErrorUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"hideNextRequiredFieldBtn\": false,\n  \"themeColor\": \"ANY_CSS_COLOR_TO_MATCH_YOUR_APPLICATION\",\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideAddPartiesOption\": false,\n  \"sessionExpire\": false,\n  \"expiry\": 300000,\n  \"senderEmail\": \"jon.dpe@ggmail.com\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"enableStepByStep\": false,\n  \"custom_field\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/templates/createFolder",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"templates",
										"createFolder"
									]
								},
								"description": "Create envelopes using existing templates."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"templateIds\": [\n    271591\n  ],\n  \"parties\": [\n    {\n      \"firstName\": \"FIRST_NAME_OF_RECIPIENT_PARTY\",\n      \"lastName\": \"LAST_NAME_OF_RECIPIENT_PARTY\",\n      \"emailId\": \"peter.parker@spiderman.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"workflowSequence\": 1,\n      \"sequence\": 1,\n      \"hostEmailId\": \"EMAIL_ID_OF_INPERSON_ADMINISTRATOR\",\n      \"allowNameChange\": \"true\",\n      \"signerAuthLevel\": \"NO\"\n    },\n    {\n      \"firstName\": \"FIRST_NAME_OF_RECIPIENT_PARTY\",\n      \"lastName\": \"LAST_NAME_OF_RECIPIENT_PARTY\",\n      \"emailId\": \"bruce@batman.com\",\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"workflowSequence\": 2,\n      \"sequence\": 2,\n      \"hostEmailId\": \"EMAIL_ID_OF_INPERSON_ADMINISTRATOR\",\n      \"allowNameChange\": \"true\",\n      \"signerAuthLevel\": \"NO\"\n    }\n  ],\n  \"folderName\": \"Testing Flow1\",\n  \"fields\": {},\n  \"allowAdvancedEmailValidation\": false,\n  \"folderPassword\": \"occaecat Excepteur incididunt dolor\",\n  \"signInSequence\": false,\n  \"inPersonEnable\": false,\n  \"sendNow\": true,\n  \"signSuccessUrlAllParties\": false,\n  \"createEmbeddedSendingSession\": true,\n  \"fixRecipientParties\": true,\n  \"fixDocuments\": true,\n  \"sendSuccessUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"sendErrorUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"hideSignerSelectOption\": false,\n  \"hideSignerActions\": false,\n  \"hideSenderName\": true,\n  \"hideSendButton\": true,\n  \"hideFolderName\": false,\n  \"hideDocumentsName\": true,\n  \"hideAddMeButton\": false,\n  \"hideAddNewButton\": true,\n  \"hideAddGroupButton\": false,\n  \"createEmbeddedSigningSession\": true,\n  \"createEmbeddedSigningSessionForAllParties\": false,\n  \"embeddedSignersEmailIds\": [\n    \"peter.parker@spiderman.com\",\n    \"bruce@batman.com\"\n  ],\n  \"signSuccessUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"signDeclineUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"signLaterUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"signErrorUrl\": \"YOUR_PAGE_TO_REDIRECT_USER_FROM_EMBEDDED_SESSION\",\n  \"hideNextRequiredFieldBtn\": false,\n  \"themeColor\": \"ANY_CSS_COLOR_TO_MATCH_YOUR_APPLICATION\",\n  \"hideDeclineToSign\": false,\n  \"hideMoreAction\": false,\n  \"hideAddPartiesOption\": false,\n  \"sessionExpire\": false,\n  \"expiry\": 300000,\n  \"senderEmail\": \"jon.dpe@ggmail.com\",\n  \"allowSendNowAndEmbeddedSigningSession\": false,\n  \"enableStepByStep\": false,\n  \"custom_field\": {\n    \"name\": \"NAME\",\n    \"value\": \"VALUE\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/templates/createFolder",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"templates",
												"createFolder"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get a list of all Templates",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/templates/list",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"templates",
										"list"
									]
								},
								"description": "You can get a list of all the templates from your Foxit eSign account into your application using the following call."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/templates/list",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"templates",
												"list"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Templates by Template Ids",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"templateIds\": [\n    226\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/templates/templateDetails",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"templates",
										"templateDetails"
									]
								},
								"description": "You can get a list of all the templates from your Foxit eSign account into your application using the following call."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"templateIds\": [\n    226\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/templates/templateDetails",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"templates",
												"templateDetails"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create Template from URL",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"templateName\": \"onboardingmulti_2.pdf\",\n  \"templateUrl\": \"https://developersguide.foxitesign.foxit.com/uploads/FoxiteSignAPISampleDoc.pdf\",\n  \"processTextTags\": true,\n  \"processAcroFields\": true,\n  \"shareAll\": false,\n  \"numberOfParties\": 2,\n  \"parties\": [\n    {\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1,\n      \"partyRole\": \"Manager\"\n    },\n    {\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 2,\n      \"partyRole\": \"Manager 2\"\n    }\n  ],\n  \"inputType\": \"url\",\n  \"themeColor\": \"#42caf4\",\n  \"authorEmail\": \"jon.doe@ggmail.com\",\n  \"createEmbeddedTemplateSession\": true,\n  \"redirectURL\": \"REDIRECT_URL\",\n  \"hideSendTemplate\": false,\n  \"fixRecipientParties\": true,\n  \"fields\": [\n    {\n      \"type\": \"text\",\n      \"x\": 348,\n      \"y\": 157,\n      \"width\": 171,\n      \"height\": 28,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"hideFieldNameForRecipients\": true,\n      \"name\": \"Number(fillable) d0107804-ce35-45e8-8d06-a26d67f0d9bd\",\n      \"tooltip\": \"First Name\",\n      \"value\": \"\",\n      \"required\": false,\n      \"characterLimit\": 100,\n      \"party\": 1,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"options\": [\n        \"None\"\n      ],\n      \"tabOrder\": 1\n    },\n    {\n      \"type\": \"text\",\n      \"x\": 348,\n      \"y\": 257,\n      \"width\": 171,\n      \"height\": 28,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"hideFieldNameForRecipients\": true,\n      \"name\": \"Number(fillable) d0107804-ce35-45e8-8d06-a26d67a1e9ee\",\n      \"tooltip\": \"Last Name\",\n      \"value\": \"\",\n      \"required\": false,\n      \"characterLimit\": 100,\n      \"party\": 1,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"options\": [\n        \"None\"\n      ],\n      \"tabOrder\": 2\n    },\n    {\n      \"type\": \"checkbox\",\n      \"x\": 348,\n      \"y\": 357,\n      \"width\": 13,\n      \"height\": 13,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"name\": \"isBorn\",\n      \"tooltip\": \"First child?\",\n      \"required\": false,\n      \"party\": 1,\n      \"group\": null,\n      \"multicheck\": true,\n      \"checked\": true,\n      \"tabOrder\": 3,\n      \"hideCheckboxBorder\": true\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 348,\n      \"y\": 457,\n      \"width\": 60,\n      \"height\": 13,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"tooltip\": \"Date this is signed\",\n      \"required\": true,\n      \"party\": 1,\n      \"name\": \"exampleDateField\",\n      \"hideFieldNameForRecipients\": true,\n      \"value\": \"\",\n      \"dateFormat\": \"MM-DD-YYYY\"\n    }\n  ],\n  \"hideMoreAction\": false,\n  \"hideShareWithAll\": false,\n  \"hideAddParty\": false,\n  \"hideMeButton\": false,\n  \"hideOthersButton\": false,\n  \"hideExistingContactSelectOption\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/templates/createtemplate",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"templates",
										"createtemplate"
									]
								},
								"description": "Template can be created by uploading a PDF document. To create a template from a PDF file, provide publicly accessible URLs to PDF documents or pass PDF documents as multipart form data with the number of recipient parties, etc."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"templateName\": \"onboardingmulti_2.pdf\",\n  \"templateUrl\": \"https://developersguide.foxitesign.foxit.com/uploads/FoxiteSignAPISampleDoc.pdf\",\n  \"processTextTags\": true,\n  \"processAcroFields\": true,\n  \"shareAll\": false,\n  \"numberOfParties\": 2,\n  \"parties\": [\n    {\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1,\n      \"partyRole\": \"Manager\"\n    },\n    {\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 2,\n      \"partyRole\": \"Manager 2\"\n    }\n  ],\n  \"inputType\": \"url\",\n  \"themeColor\": \"#42caf4\",\n  \"authorEmail\": \"jon.doe@ggmail.com\",\n  \"createEmbeddedTemplateSession\": true,\n  \"redirectURL\": \"REDIRECT_URL\",\n  \"hideSendTemplate\": false,\n  \"fixRecipientParties\": true,\n  \"fields\": [\n    {\n      \"type\": \"text\",\n      \"x\": 348,\n      \"y\": 157,\n      \"width\": 171,\n      \"height\": 28,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"hideFieldNameForRecipients\": true,\n      \"name\": \"Number(fillable) d0107804-ce35-45e8-8d06-a26d67f0d9bd\",\n      \"tooltip\": \"First Name\",\n      \"value\": \"\",\n      \"required\": false,\n      \"characterLimit\": 100,\n      \"party\": 1,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"options\": [\n        \"None\"\n      ],\n      \"tabOrder\": 1\n    },\n    {\n      \"type\": \"text\",\n      \"x\": 348,\n      \"y\": 257,\n      \"width\": 171,\n      \"height\": 28,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"hideFieldNameForRecipients\": true,\n      \"name\": \"Number(fillable) d0107804-ce35-45e8-8d06-a26d67a1e9ee\",\n      \"tooltip\": \"Last Name\",\n      \"value\": \"\",\n      \"required\": false,\n      \"characterLimit\": 100,\n      \"party\": 1,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"options\": [\n        \"None\"\n      ],\n      \"tabOrder\": 2\n    },\n    {\n      \"type\": \"checkbox\",\n      \"x\": 348,\n      \"y\": 357,\n      \"width\": 13,\n      \"height\": 13,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"name\": \"isBorn\",\n      \"tooltip\": \"First child?\",\n      \"required\": false,\n      \"party\": 1,\n      \"group\": null,\n      \"multicheck\": true,\n      \"checked\": true,\n      \"tabOrder\": 3,\n      \"hideCheckboxBorder\": true\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 348,\n      \"y\": 457,\n      \"width\": 60,\n      \"height\": 13,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"tooltip\": \"Date this is signed\",\n      \"required\": true,\n      \"party\": 1,\n      \"name\": \"exampleDateField\",\n      \"hideFieldNameForRecipients\": true,\n      \"value\": \"\",\n      \"dateFormat\": \"MM-DD-YYYY\"\n    }\n  ],\n  \"hideMoreAction\": false,\n  \"hideShareWithAll\": false,\n  \"hideAddParty\": false,\n  \"hideMeButton\": false,\n  \"hideOthersButton\": false,\n  \"hideExistingContactSelectOption\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/templates/createtemplate",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"templates",
												"createtemplate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "The error will come when the access_token in the  headers is invalid or expired.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"templateName\": \"onboardingmulti_2.pdf\",\n  \"templateUrl\": \"https://developersguide.foxitesign.foxit.com/uploads/FoxiteSignAPISampleDoc.pdf\",\n  \"processTextTags\": true,\n  \"processAcroFields\": true,\n  \"shareAll\": false,\n  \"numberOfParties\": 2,\n  \"parties\": [\n    {\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 1,\n      \"partyRole\": \"Manager\"\n    },\n    {\n      \"permission\": \"FILL_FIELDS_AND_SIGN\",\n      \"sequence\": 2,\n      \"partyRole\": \"Manager 2\"\n    }\n  ],\n  \"inputType\": \"url\",\n  \"themeColor\": \"#42caf4\",\n  \"authorEmail\": \"jon.doe@ggmail.com\",\n  \"createEmbeddedTemplateSession\": true,\n  \"redirectURL\": \"REDIRECT_URL\",\n  \"hideSendTemplate\": false,\n  \"fixRecipientParties\": true,\n  \"fields\": [\n    {\n      \"type\": \"text\",\n      \"x\": 348,\n      \"y\": 157,\n      \"width\": 171,\n      \"height\": 28,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"hideFieldNameForRecipients\": true,\n      \"name\": \"Number(fillable) d0107804-ce35-45e8-8d06-a26d67f0d9bd\",\n      \"tooltip\": \"First Name\",\n      \"value\": \"\",\n      \"required\": false,\n      \"characterLimit\": 100,\n      \"party\": 1,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"options\": [\n        \"None\"\n      ],\n      \"tabOrder\": 1\n    },\n    {\n      \"type\": \"text\",\n      \"x\": 348,\n      \"y\": 257,\n      \"width\": 171,\n      \"height\": 28,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"hideFieldNameForRecipients\": true,\n      \"name\": \"Number(fillable) d0107804-ce35-45e8-8d06-a26d67a1e9ee\",\n      \"tooltip\": \"Last Name\",\n      \"value\": \"\",\n      \"required\": false,\n      \"characterLimit\": 100,\n      \"party\": 1,\n      \"fontSize\": 12,\n      \"fontColor\": \"#000000\",\n      \"options\": [\n        \"None\"\n      ],\n      \"tabOrder\": 2\n    },\n    {\n      \"type\": \"checkbox\",\n      \"x\": 348,\n      \"y\": 357,\n      \"width\": 13,\n      \"height\": 13,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"name\": \"isBorn\",\n      \"tooltip\": \"First child?\",\n      \"required\": false,\n      \"party\": 1,\n      \"group\": null,\n      \"multicheck\": true,\n      \"checked\": true,\n      \"tabOrder\": 3,\n      \"hideCheckboxBorder\": true\n    },\n    {\n      \"type\": \"date\",\n      \"x\": 348,\n      \"y\": 457,\n      \"width\": 60,\n      \"height\": 13,\n      \"pageNumber\": 1,\n      \"documentNumber\": 1,\n      \"tooltip\": \"Date this is signed\",\n      \"required\": true,\n      \"party\": 1,\n      \"name\": \"exampleDateField\",\n      \"hideFieldNameForRecipients\": true,\n      \"value\": \"\",\n      \"dateFormat\": \"MM-DD-YYYY\"\n    }\n  ],\n  \"hideMoreAction\": false,\n  \"hideShareWithAll\": false,\n  \"hideAddParty\": false,\n  \"hideMeButton\": false,\n  \"hideOthersButton\": false,\n  \"hideExistingContactSelectOption\": false,\n  \"hideFieldNameForRecipients\": false,\n  \"hideCheckboxBorder\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/templates/createtemplate",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"templates",
												"createtemplate"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Template Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/templates/mytemplate?templateId=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"templates",
										"mytemplate"
									],
									"query": [
										{
											"key": "templateId",
											"value": "amet anim ea Lorem",
											"description": "(Required) The ID of the Template for which you would like to obtain parseable details about"
										}
									]
								},
								"description": "You can poll our API to get the details of a template in JSON format."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/templates/mytemplate?templateId=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"templates",
												"mytemplate"
											],
											"query": [
												{
													"key": "templateId",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"description": "**Streamline Your Workflow with Reusable Templates**\n\nEasily create reusable documents by saving them as **Templates**. Assign **party roles** (e.g., Sender, Signer, Approver) during setup, so you can quickly generate and send out documents for signature without starting from scratch each time."
				},
				{
					"name": "Webhook",
					"item": [
						{
							"name": "Get Webhook Channel Details",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/mychannel?channelId=1",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"mychannel"
									],
									"query": [
										{
											"key": "channelId",
											"value": "1",
											"description": "(Required) "
										}
									]
								},
								"description": "You can poll our API to get information about a specific Webhook channel."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/mychannel?channelId=1",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"mychannel"
											],
											"query": [
												{
													"key": "channelId",
													"value": "1"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all Webhook Channels",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/channellist",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"channellist"
									]
								},
								"description": "To get a list of all the webhook channels in the account, use the following call."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/channellist",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"channellist"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update Webhook Channel",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"channelId\": \"1\",\n  \"channelName\": \"updateName\",\n  \"webhookUrl\": \"https://abc.com/xyz\",\n  \"webhookSecret\": \"updatesecret\",\n  \"webhookLevel\": \"Account\",\n  \"events\": {\n    \"folder_sent\": true,\n    \"folder_viewed\": true,\n    \"folder_signed\": true,\n    \"folder_cancelled\": true,\n    \"folder_executed\": true,\n    \"folder_deleted\": true\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/updatewebhookchannel",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"updatewebhookchannel"
									]
								},
								"description": "To create a new channel via API, please make a call to /webhook/updatewebhookchannel with the following parameters."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"channelId\": \"1\",\n  \"channelName\": \"updateName\",\n  \"webhookUrl\": \"https://abc.com/xyz\",\n  \"webhookSecret\": \"updatesecret\",\n  \"webhookLevel\": \"Account\",\n  \"events\": {\n    \"folder_sent\": true,\n    \"folder_viewed\": true,\n    \"folder_signed\": true,\n    \"folder_cancelled\": true,\n    \"folder_executed\": true,\n    \"folder_deleted\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/updatewebhookchannel",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"updatewebhookchannel"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Reactivate Webhook Channel",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/channelreactivate?channelId=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"channelreactivate"
									],
									"query": [
										{
											"key": "channelId",
											"value": "amet anim ea Lorem",
											"description": "(Required) Your Channel ID received when creating the webhook. Can also be found in the Foxit eSIgn Settings page."
										}
									]
								},
								"description": "To create a new channel via API, please make a call to /webhook/updatewebhookchannel with the following parameters."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/channelreactivate?channelId=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"channelreactivate"
											],
											"query": [
												{
													"key": "channelId",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Deactivate Webhook Channel",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/channeldeactivate?channelId=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"channeldeactivate"
									],
									"query": [
										{
											"key": "channelId",
											"value": "amet anim ea Lorem",
											"description": "(Required) Your Channel ID received when creating the webhook. Can also be found in the Foxit eSIgn Settings page."
										}
									]
								},
								"description": "This endpoint will deactivate your Webhook Channel. \n\n**Note:** To reactivate an channel via API, please make a call to /webhook/channelreactivate"
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/channeldeactivate?channelId=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"channeldeactivate"
											],
											"query": [
												{
													"key": "channelId",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete Webhook Channel",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"channelIds\": [\n      2,\n      3\n    ]\n  },\n  {\n    \"channelIds\": [\n      2,\n      3\n    ]\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/deletechannels",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"deletechannels"
									]
								},
								"description": "To delete a webhook channel via API, please make a call to this endpoint with the following parameters."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {\n    \"channelIds\": [\n      2,\n      3\n    ]\n  },\n  {\n    \"channelIds\": [\n      2,\n      3\n    ]\n  }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/deletechannels",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"deletechannels"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create Webhook Channel",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"channelName\": \"abc\",\n  \"webhookUrl\": \"https://abc.com/xyz\",\n  \"webhookLevel\": \"Account\",\n  \"events\": {\n    \"folder_sent\": true,\n    \"folder_viewed\": true,\n    \"folder_signed\": false,\n    \"folder_cancelled\": true,\n    \"folder_executed\": true,\n    \"folder_deleted\": true\n  },\n  \"webhookSecret\": \"xyz\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/webhook/createwebhookchannel",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"webhook",
										"createwebhookchannel"
									]
								}
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"channelName\": \"abc\",\n  \"webhookUrl\": \"https://abc.com/xyz\",\n  \"webhookLevel\": \"Account\",\n  \"events\": {\n    \"folder_sent\": true,\n    \"folder_viewed\": true,\n    \"folder_signed\": false,\n    \"folder_cancelled\": true,\n    \"folder_executed\": true,\n    \"folder_deleted\": true\n  },\n  \"webhookSecret\": \"xyz\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/webhook/createwebhookchannel",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"webhook",
												"createwebhookchannel"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Parties",
					"item": [
						{
							"name": "Create Email Group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/plain"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailGroupName\": \"Email_Group_Name\",\n  \"emailGroupDescription\": \"Email_Group_Description\",\n  \"allowAdvancedEmailValidation\": true,\n  \"parties\": [\n    {\n      \"firstName\": \"Sandra\",\n      \"lastName\": \"Smith\",\n      \"emailId\": \"san_smith@foxitesign.com\"\n    },\n    {\n      \"firstName\": \"Hannah\",\n      \"lastName\": \"Pitt\",\n      \"emailId\": \"pitthannah@foxitesign.com\"\n    }\n  ]\n}"
								},
								"url": {
									"raw": "{{esignBaseUrl}}/parties/createEmailGroup",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"parties",
										"createEmailGroup"
									]
								},
								"description": "To create a new email group via API, please make a call to parties/createEmailGroup with the following parameters.\n\nYou can only pass up to 20 party details."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailGroupName\": \"Email_Group_Name\",\n  \"emailGroupDescription\": \"Email_Group_Description\",\n  \"allowAdvancedEmailValidation\": true,\n  \"parties\": [\n    {\n      \"firstName\": \"Sandra\",\n      \"lastName\": \"Smith\",\n      \"emailId\": \"san_smith@foxitesign.com\"\n    },\n    {\n      \"firstName\": \"Hannah\",\n      \"lastName\": \"Pitt\",\n      \"emailId\": \"pitthannah@foxitesign.com\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{esignBaseUrl}}/parties/createEmailGroup",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"parties",
												"createEmailGroup"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Get Email Group Details",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"emailGroupNames\": [\n    \"Email_Group_1\",\n    \"Email_Group_2\"\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/parties/getEmailGroups",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"parties",
										"getEmailGroups"
									]
								},
								"description": "You can pool our API to get email group information.\n\nYou can pass this request with no parameters to get the details of all of the email groups in your account."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailGroupNames\": [\n    \"Email_Group_1\",\n    \"Email_Group_2\"\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/parties/getEmailGroups",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"parties",
												"getEmailGroups"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Users",
					"item": [
						{
							"name": "Create User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": {\n    \"firstName\": \"eSign\",\n    \"lastName\": \"Demo\",\n    \"emailId\": \"esigndemo@foxitsoftware.com\",\n    \"allowAdvancedEmailValidation\": true,\n    \"address\": \"Miami, Florida\",\n    \"userRole\": \"admin\",\n    \"department\": \"DEV\",\n    \"title\": \"Tech Lead\",\n    \"active\": true,\n    \"loginPassword\": \"TXxgjjezFLAqnR\",\n    \"sendMailForPasswordReset\": true\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/users/create",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"users",
										"create"
									]
								},
								"description": "This endpoint allows you to create a User in any account by using the API."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"user\": {\n    \"firstName\": \"eSign\",\n    \"lastName\": \"Demo\",\n    \"emailId\": \"esigndemo@foxitsoftware.com\",\n    \"allowAdvancedEmailValidation\": true,\n    \"address\": \"Miami, Florida\",\n    \"userRole\": \"admin\",\n    \"department\": \"DEV\",\n    \"title\": \"Tech Lead\",\n    \"active\": true,\n    \"loginPassword\": \"TXxgjjezFLAqnR\",\n    \"sendMailForPasswordReset\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/users/create",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"users",
												"create"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user\": {\n    \"partyId\": \"54\",\n    \"firstName\": \"eSign\",\n    \"lastName\": \"Demo\",\n    \"address\": \"Miami, Florida\",\n    \"userRole\": \"super_admin\",\n    \"department\": \"DEV\",\n    \"title\": \"Tech Lead\",\n    \"active\": false\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/users/update",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"users",
										"update"
									]
								},
								"description": "This endpoint allows you to update the User's profile parameters using the API."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"user\": {\n    \"partyId\": \"54\",\n    \"firstName\": \"eSign\",\n    \"lastName\": \"Demo\",\n    \"address\": \"Miami, Florida\",\n    \"userRole\": \"super_admin\",\n    \"department\": \"DEV\",\n    \"title\": \"Tech Lead\",\n    \"active\": false\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/users/update",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"users",
												"update"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete User",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/users/delete?userId=54",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"users",
										"delete"
									],
									"query": [
										{
											"key": "userId",
											"value": "54",
											"description": "(Required) Party Id for that user"
										}
									]
								},
								"description": "This endpoint allows you to delete a user via API."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/users/delete?userId=54",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"users",
												"delete"
											],
											"query": [
												{
													"key": "userId",
													"value": "54"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "List all Users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/users/list",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"users",
										"list"
									]
								},
								"description": "This endpoint allows you to list all of the users under a specific account via API."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/users/list",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"users",
												"list"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "Create New Account",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"client_id\": \"123456789012345678901234567890\",\n  \"client_secret\": \"123456789012345678901234567890\",\n  \"company\": {\n    \"companyName\": \"Wayne Tech\",\n    \"companyAddress\": \"LA, US\"\n  },\n  \"user\": {\n    \"firstName\": \"Bruce\",\n    \"lastName\": \"Wayne\",\n    \"emailId\": \"esigndemo@foxitsoftware.com\",\n    \"loginPassword\": \"Welcome@123!\"\n  },\n  \"planName\": \"Professional\",\n  \"accountType\": \"partner-pay\",\n  \"partner_code\": \"WAYNE_TECH\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/accounts/create",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"accounts",
										"create"
									]
								},
								"description": "This endpoint allows you to create a new account as a partner by using the API.\n\n*Note:* instead of providing the `access_token` Authorization header from your partner portal, you will instead provide the `client_id` and `client_secret` as part of the body parameters of this call."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"client_id\": \"123456789012345678901234567890\",\n  \"client_secret\": \"123456789012345678901234567890\",\n  \"company\": {\n    \"companyName\": \"Wayne Tech\",\n    \"companyAddress\": \"LA, US\"\n  },\n  \"user\": {\n    \"firstName\": \"Bruce\",\n    \"lastName\": \"Wayne\",\n    \"emailId\": \"esigndemo@foxitsoftware.com\",\n    \"loginPassword\": \"Welcome@123!\"\n  },\n  \"planName\": \"Professional\",\n  \"accountType\": \"partner-pay\",\n  \"partner_code\": \"WAYNE_TECH\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{esignBaseUrl}}/accounts/create",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"accounts",
												"create"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Cancel Account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/accounts/cancel",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"accounts",
										"cancel"
									]
								},
								"description": "This endpoint allows you to cancel a specific account.\n\n`Note:` please provide the `access_token` Authorization header from the account which you are looking to cancel."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/accounts/cancel",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"accounts",
												"cancel"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Reactivate Account",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/accounts/reactivate",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"accounts",
										"reactivate"
									]
								},
								"description": "This endpoint allows you to reactivate a specific account.\n\n`Note:` please provide the `access_token` Authorization header from the account which you are looking to reactivate."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/accounts/reactivate",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"accounts",
												"reactivate"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Change Licenses",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/accounts/changenumberoflicences?newNumberOfLicences=20&partnerCode=amet anim ea Lorem",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"accounts",
										"changenumberoflicences"
									],
									"query": [
										{
											"key": "newNumberOfLicences",
											"value": "20",
											"description": "(Required) The new required number of licences for the account"
										},
										{
											"key": "partnerCode",
											"value": "amet anim ea Lorem",
											"description": "(Required) Enter the unique partner code assigned to the partner to link this account with the specified partner"
										}
									]
								},
								"description": "This endpoint allows you to edit the number of licenses available in a a specific account.\n\n`Note:` please provide the `access_token` Authorization header from the account which you are looking to reactivate."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/accounts/changenumberoflicences?newNumberOfLicences=20&partnerCode=amet anim ea Lorem",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"accounts",
												"changenumberoflicences"
											],
											"query": [
												{
													"key": "newNumberOfLicences",
													"value": "20"
												},
												{
													"key": "partnerCode",
													"value": "amet anim ea Lorem"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Change Plan",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"url": {
									"raw": "{{esignBaseUrl}}/accounts/changeplan?newNumberOfLicenses=20&newPlan=Professional",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"accounts",
										"changeplan"
									],
									"query": [
										{
											"key": "newNumberOfLicenses",
											"value": "20",
											"description": "(Required) The new required number of licences for the account in the new plan"
										},
										{
											"key": "newPlan",
											"value": "Professional",
											"description": "(Required) Name of plan that you want to subscribe to"
										}
									]
								},
								"description": "This endpoint allows you to change the plan type for a specific account.\n\n**Note:** please provide the `access_token` Authorization header from the account which you are looking to change the plan type for."
							},
							"response": [
								{
									"name": "Untitled Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer <token>",
												"description": "Added as a part of security scheme: bearer"
											},
											{
												"key": "Accept",
												"value": "text/plain"
											}
										],
										"url": {
											"raw": "{{esignBaseUrl}}/accounts/changeplan?newNumberOfLicenses=20&newPlan=Professional",
											"host": [
												"{{esignBaseUrl}}"
											],
											"path": [
												"accounts",
												"changeplan"
											],
											"query": [
												{
													"key": "newNumberOfLicenses",
													"value": "20"
												},
												{
													"key": "newPlan",
													"value": "Professional"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Generate OAuth2.0 Access Token",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "deserunt",
									"description": "(Required) "
								},
								{
									"key": "client_secret",
									"value": "voluptate ex",
									"description": "(Required) "
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"description": "(Required) "
								},
								{
									"key": "scope",
									"value": "read-write",
									"description": "(Required) "
								}
							]
						},
						"url": {
							"raw": "{{esignBaseUrl}}/oauth2/access_token",
							"host": [
								"{{esignBaseUrl}}"
							],
							"path": [
								"oauth2",
								"access_token"
							]
						},
						"description": "Foxit eSign is an oAuth2 based authorization provider. Security implementation is based on the final version of \"The OAuth 2.0 Authorization Framework\"."
					},
					"response": [
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"description": "(Required) "
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "client_id",
											"value": "deserunt",
											"description": "(Required) "
										},
										{
											"key": "client_secret",
											"value": "voluptate ex",
											"description": "(Required) "
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"description": "(Required) "
										},
										{
											"key": "scope",
											"value": "read-write",
											"description": "(Required) "
										}
									]
								},
								"url": {
									"raw": "{{esignBaseUrl}}/oauth2/access_token",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"oauth2",
										"access_token"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Regenerate Embedded Signing Session",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "text/plain"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"folderId\": -16501764,\n  \"emailId\": \"ullamco labore id\",\n  \"partyId\": \"ullamco Duis dolore proident cillum\",\n  \"sessionExpire\": \"false\",\n  \"expiry\": \"magna cupidatat\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{esignBaseUrl}}/embedded/regenerateEmbeddedSigningSession",
							"host": [
								"{{esignBaseUrl}}"
							],
							"path": [
								"embedded",
								"regenerateEmbeddedSigningSession"
							]
						},
						"description": "You can regenerate the expired folder embedded signing token for accessing the signature from the signer."
					},
					"response": [
						{
							"name": "Untitled Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer <token>",
										"description": "Added as a part of security scheme: bearer"
									},
									{
										"key": "Accept",
										"value": "text/plain"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"folderId\": -16501764,\n  \"emailId\": \"ullamco labore id\",\n  \"partyId\": \"ullamco Duis dolore proident cillum\",\n  \"sessionExpire\": \"false\",\n  \"expiry\": \"magna cupidatat\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{esignBaseUrl}}/embedded/regenerateEmbeddedSigningSession",
									"host": [
										"{{esignBaseUrl}}"
									],
									"path": [
										"embedded",
										"regenerateEmbeddedSigningSession"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "text",
							"header": [
								{
									"key": "Content-Type",
									"value": "text/plain"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"auth": {
				"type": "oauth2",
				"oauth2": [
					{
						"key": "addTokenTo",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "PDF Embed API",
			"item": [
				{
					"name": "Embed PDF Viewer",
					"item": [],
					"description": "# üìÑ PDF Embed Viewer\n\nKickstart your development with Foxit's easy-to-integrate PDF Embed Viewer. This guide walks you through embedding a fully customizable PDF viewer directly into your web page.\n\nAfter obtaining your Client ID and Client Secret from the [Foxit Developer Console](https://app.developer-api.foxit.com/), follow the steps below to render a PDF using the embedded viewer.\n\n## üß© Integration Steps\n\n### 1\\. Include the SDK Script\n\nAdd the script tag in your HTML to load the Foxit Embed Viewer:\n\n``` javascript\n<script src=\"https://embed.developer-api.foxit.com/service/api/embview-sdk/js?clientId=YOUR_CLIENT_ID\"></script>\n\n ```\n\nReplace `YOUR_CLIENT_ID` with the actual Client ID you received from the Foxit Developer Console.\n\n### 2\\. Define the Viewer Container\n\nSet up a container in your HTML where the viewer will be rendered by using a `div` tag with the ID foxit-embed-view.\n\n### 3\\. Initialize the Viewer\n\nUse the following JavaScript snippet to configure and launch the viewer:\n\n``` html\n<script>\n  new FoxitEmbed.View({\n    clientId: 'YOUR_CLIENT_ID',\n    divId: 'foxit-embed-view'\n  }).previewFile(\n    {\n      content: 'https://yourdomain.com/sample.pdf',\n      metaData: { fileName: 'sample.pdf' }\n    },\n    {\n      showToolControls: true,\n      showLeftHandPanel: true,\n      showDownloadPDF: true,\n      showPrintPDF: true\n    }\n  );\n</script>\n\n ```\n\n## üì¶ PDF File Object Structure\n\n- `content`: File URL or binary content that will be rendered (can be a string or ArrayBuffer).\n    \n- `metaData`: Contains key metadata like the file name.\n    \n\n## üß™ Run the Viewer\n\nLoad your HTML file in a browser to see the embedded PDF viewer in action.\n\n> üí° Tip: Use a local server (e.g., with Node.js, Python, or VS Code Live Server) to avoid cross-origin issues. \n  \n\n## Example Code\n\n``` javascript\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n              content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"/>\n    <meta http-equiv=X-UA-Compatible content=\"IE=edge,chrome=1\">\n    <meta name=\"renderer\" content=\"webkit\">\n    <title>Foxit Embed Viewer - In Line</title>\n    <style>\n        html, body{\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n<body>\n<divid=\"foxit-embed-view\"></div>\n<script src=\"https://embed.developer-api.foxit.com/service/api/embview-sdk/js?clientId=<YOUR_CLIENT_ID>\"></script>\n<script>\n    var embedView = new FoxitEmbed.View(\n        {\n            clientId: &#x27;<YOUR_CLIENT_ID>&#x27;,\n            divId: 'foxit-embed-view'\n        }\n    );\n    var pdfUrl = \"https://embed.developer-api.foxit.com/product/embedviewer/view-sdk-demo/Embed API Demo.pdf\";\n    embedView.previewFile({\n        content: pdfUrl,\n        metaData: {\n            fileName: 'Embed API Demo.pdf'\n        }\n    }\n</script>\n</body>\n</html>\n\n ```\n\n## üåê Cross-Origin Resource Sharing (CORS)\n\nWhen using the **Foxit PDF Embed API**, CORS issues can occur if you're loading PDF files via URL. The viewer attempts to fetch the file from the provided URL, and if the request violates browser CORS policies, it will fail.\n\n---\n\n### ‚ö†Ô∏è Why CORS Matters\n\nModern browsers enforce **CORS** to protect user data and application integrity. If your PDF file is hosted on a different domain than your web page, the request may be blocked unless CORS is explicitly allowed by the server hosting the PDF.\n\n---\n\n### ‚úÖ Recommended Solutions\n\nTo avoid or resolve CORS-related issues, you can:\n\n`Option 1`: Host on the Same Domain\n\nEnsure both your **web page** and the **PDF file** are served from the same domain and protocol (e.g., `https://yourdomain.com`). This removes the cross-origin restriction entirely.\n\n`Option 2`: Set Proper CORS Headers\n\nConfigure the server hosting the PDF to include appropriate **CORS headers**, such as:\n\n``` http\nAccess-Control-Allow-Origin: https://yourwebsite.com\nAccess-Control-Allow-Methods: GET\nAccess-Control-Allow-Headers: Content-Type\n# Embed Modes\nThe Foxit Embedded Viewer provides four distinct modes to control how the PDF viewer is displayed within a web page. These modes determine the size and positioning of the viewing area. To use a specific mode, pass the desired `embedMode` value along with other configuration options in the `previewFile` API call.\nBy default, the viewer uses the `FULL_WINDOW` mode. However, you can switch to other modes like `IN_LINE` depending on your layout needs. Below is an example demonstrating how to set the `embedMode` to `IN_LINE`:\n``` javascript\nvar pdfUrl = 'https://embed.developer-api.foxit.com/product/embedviewer/view-sdk-demo/Embed API Demo.pdf';\nembedView.previewFile(\n  {\n    content: pdfUrl,\n    metaData: {\n      fileName: 'Embed API Demo.pdf'\n    }\n  },\n  {\n    embedMode: 'IN_LINE', // Set the embed mode to IN_LINE\n  }\n);\n\n ```\n\n**Embedded mode overview**\n\n| **EMBED MODE** | **DESCRIPTION** | **EXAMPLE** |\n| --- | --- | --- |\n| Full Window (FULL_WINDOW) | Default mode. The PDF reader is displayed in the full screen of the browser window, so that it is convenient for users to read and operate documents | Here |\n| Sized container (SIZED_CONTAINER) | The PDF reader is embedded in the container of a specified size (width and height need to be specified) | Here |\n| In-Line (IN_LINE) | The PDF reader is embedded in the middle of the web content. In this mode, all the PDF pages will be displayed at once. You need to specify the width of the Embed Viewer in the tag, and the Viewer will automatically adjust the size and the length according to the width and the number of pages of the PDF page (specify the width, not the height) | Here |\n| Lightbox (LIGHT_BOX) | The PDF reader pops up a window on the page, you can close the window and return to the previous page. | here |"
				},
				{
					"name": "UI Customization",
					"item": [],
					"description": "# UI Customization\n\nThe Foxit Embedded Viewer API provides a flexible set of options for tailoring the PDF viewing experience to match your application's needs and branding. You can configure various interface elements and interactions, including:\n\n- **Toolbar Controls** ‚Äì Show or hide the top toolbar and its tools.\n    \n- **Navigation Panel** ‚Äì Enable or disable the left-hand pane for page thumbnails or bookmarks.\n    \n- **Download & Print** ‚Äì Allow or restrict PDF download and print capabilities.\n    \n- **Viewer Appearance** ‚Äì Customize the layout and color scheme for optimal presentation.\n    \n- **Branding** ‚Äì Add your company logo and adjust theme colors to reflect your brand identity.\n    \n\n## Tool Options\n\nYou can fine-tune the behavior and appearance of the PDF viewer using the customization options provided by the Foxit PDF Embed API. These configurations allow you to deliver a tailored user experience while maintaining consistency with your application‚Äôs design and brand identity. Whether it's modifying tool visibility, adjusting layout settings, or applying custom branding, the API provides the flexibility needed to match your specific requirements.\n\n| **Variable** | **Default** | **Description** |\n| --- | --- | --- |\n| showToolControls | True | Show tool bar or not |\n| showLeftHandPanel | True | Show the left panel or not |\n| defaultViewMode | Null | `FIT_ WIDTH`: Extend the page horizontally to the full width of the document pane. `FIT_ PAGE`: Display the entire page in the current view pane.In addition, there are two other view modes that are only supported in the mobile browsers. `CONTINUOUS`: Display all the document pages in turn, and users can easily browse the pages by scrolling up and down. `SINGLE_ PAGE`: Display only one document page at a time. Don't display the adjacent pages. `HORIZONTAL_PAGE`: Display the page horizontally. |\n| showDownloadPDF | True | Show download button or not |\n| showPrintPDF | True | Show print button or not |\n| theme | Null | Set up the color theme |\n| showIcon | Null | Set up logo |\n\n## Callbacks and Workflows\n\nThe Foxit PDF Embed API supports advanced workflow customization through event callbacks. By registering specific callbacks, developers can respond to user interactions and events such as document loading, viewer state changes, text selection, and more.\n\nTo register a callback, use the addListener method on the FoxitEmbedViewer object. Here's the syntax:\n\n``` javascript\nFoxitEmbedViewer.addListener(\n  \"<CallbackType>\",   // Specify the event type (e.g., \"fileOpen\", \"viewerLoaded\")\n  callbackFunction,   // Define the function to handle the event\n  options             // (Optional) Pass additional configuration options\n);\n\n ```\n\nThis functionality enables seamless integration into custom workflows and improves interactivity within your application.\n\n| **Callback Type** | **Callback function arguments** | **Description** |\n| --- | --- | --- |\n| File_Opened | True | Triggered after that the document is displayed |\n| Viewer_Zoomed | newScale, oldScale | Triggered when the zoom page is done |\n|  |  |  |\n| Viewmode_Changed | NewViewModeType, OldViewModeType | Triggered after changing the view mode |\n| Text_Selected | text content | Triggered after selecting text |\n| PageNum_Changed | newPageNumber | Triggered when the current page number is changed |\n| Viewer_Rotated | newRotationDegree, originRotationDegree | Triggered when the page view is rotated |\n\n## Viewer APIs\n\n### Bookmark\n\n#### getBookmarks\n\nThe API returns the list of the existing PDF bookmarks. Each bookmark item in this list is shown as a JSON containing important information like ID, title and the list of the nested bookmarks residing under this bookmark.\n\n**Input parameters**\n\n``` json\n{\n  id: 'some_uniq_id' // Unique identifier of the bookmark\n  title: 'some_title', // Title of the bookmark\n  children: [CHILD_BOOKMARK_1, CHILD_BOOKMARK_2, ...]   // List of the nested bookmarks under this bookmark\n}\n\n ```\n\n**API output**\n\nReturns a Promise\n\n- Resolves with the list of bookmarks available in the PDF. `[ Bookmark_1, Bookmark_2, ...]`\n    \n\n#### openBookmark\n\nThe API accepts a bookmark ID as input and navigates to the particular PDF bookmark.\n\n**Input parameters**\n\nParameters: .\n\n**API output**\n\nReturns a Promise\n\n- Resolves to true on if API is successfully done. And the user navigates to that particular bookmark.\n    \n- Resolves to false when the bookmark does not exist in the PDF.\n    \n\n### Search\n\n#### search\n\nThese APIs can be used to search a term in the PDF programmatically. And they are supported in all the embed modes.\n\n**Input parameters**\n\n- keywords: The text will be searched\n    \n- startPageIndex , endPageIndex: Search range from \"startPageIndex\" to \"endPageIndex\"\n    \n- matchRule: `WholeWordsOnly | CaseSensitive`\n    \n\n**API output**\n\nReturns a Promise\n\n- Resolves with a JSON object containing the following interfaces: `onResultsUpdate()`, `next()`, `previous()`, `clear()`\n    \n\n#### onResultsUpdate\n\nUsers can register a callback function which will be passed to the `onResultsUpdate()` function as an input.\n\nThis callback function will be triggered every time when a search operation is done by the search API and the search result is highlighted in the PDF. The callback function will receive the important information about the current search result in the form of a JSON.\n\nThe JSON will include information like the current page number, the current search result index, the total number of the search results and status.\n\nJSON information like:\n\n``` json\n{\n  \"currentResult\": {\n    \"pageNumber\": Integer,\n    // Current page number in the view\n    \"index\": Integer\n    // Index of the current highlighted search result\n  },\n  \"totalResults\": Integer,\n  // Total number of search results found till the time callback function is executed\n  \"status\": String\n  // Status of search result till the time callback function is executed. Values can be \"IN_PROGRESS\" or \"COMPLETED\".\n}\n\n ```\n\n**API output**\n\nReturns: Returns a Promise\n\n- Resolves to true on the successful operation. When operation is successful, the callback function is executed and receives the information about the search results in the form of a JSON.\n    \n- Resolves to false when `onResultsUpdate()` operation fails.\n    \n\n**onResultsUpdate Example**\n\n``` javascript\nfunction callbackFunction(searchResult) {\n  console.log('search result: ', searchResult);\n}\nFoxitEmbedViewer.search(&#x27;<KEY_STRING>&#x27;).then((searchObj) => {\n  searchObj.onResultsUpdate(callbackFunction);\n  // call searchObj.next() or searchObj.previous() to navigate to the next or previous search result\n  searchObj.next();\n});\n\n ```\n\n#### next\n\nThis function will highlight and navigate to the next search result in the PDF.\n\n**API output**\n\nReturns a Promise\n\n- Resolves to true on the successful operation and the next search result is highlighted in the PDF.\n    \n- Resolves to false when `next()` operation fails.\n    \n\n#### previous\n\nThis function will highlight and navigate to the previous search result in the PDF.\n\n**API output**\n\nReturns a Promise\n\n- Resolves to true on the successful operation. And, the previous search result is highlighted in the PDF.\n    \n- Resolves to false when `previous()` operation fails.\n    \n\n#### clear\n\nThis function will cancel the ongoing search operation and clear the search results.\n\n### Zoom\n\n#### zoomTo\n\nZoom the current view to the given scale. It can't be used in the inline mode.\n\n**Input parameters**\n\nParameters: `number|string` scale - Greater than zero. If it's a string, only 'fitWidth' and 'fitHeight' are valid.\n\n**API output**\n\nReturns: `Promise`\n\n#### getPageZoom\n\nThe API takes the PDF page number as input and returns the zoom level of that page.\n\n**Input parameters**\n\nParameters :\n\n**API output**\n\nReturns a Promise\n\n- Resolves with the zoom scale if it is successful.\n    \n\n### Others\n\n#### getSelectedContent\n\nIf a user selects any content in the viewer, then the selected content can be fetched by the API. The API currently only supports the text selection.\n\n**API output**\n\nReturns a Promise\n\n- Resolves with a JSON object including the type of content and actual selected content if it is successful: `{ type: \"\", data: \"\" }`\n    \n\n#### getCurrentPage\n\nThe API returns the current page number of the current page.\n\n**API output**\n\nReturns a Promise\n\n- Resolves with the current page number if it is successful.\n    \n\n#### gotoLocation\n\nThe API enables navigation to any PDF page. It accepts a page number as input. You can also pass the x and y coordinates on the page as the optional input parameters to navigate to a particular location on the page. If don't input any coordinates, the default coordinates is (0, 0).\n\n**Input parameters**\n\nparameters: (, , )\n\n### User Preferences\n\nUsers can set their own preferences. The UpdatePreferences API allows users to update the embed viewer preferences.\n\n**Input parameters**\n\npreferences\n\n``` json\n{\n  \"be_markup_with_selected_text\": true\n}\n\n ```\n\n**input parameters data description**\n\n| **PARAMETER** | **DESCRIPTION** | **REQUIRED** |\n| --- | --- | --- |\n| be_markup_with_selected_text | Whether to use the selected text as the markup content after adding a text markup annotation. | YES |\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\npreferences = {};  \nembedView  \n.UpdatePreference(preferences)  \n.then(() => console.log('Success'))  \n.catch((error) => console.log(error));\n\n ```"
				},
				{
					"name": "Comments and Markups",
					"item": [],
					"description": "# Comments and Markup\n\nThe Foxit PDF Embed API enables users to annotate PDF documents with a variety of commenting and markup tools. Supported actions include adding text comments, sticky notes, highlights, underlines, strikethroughs, and freehand drawings. Users can also erase portions of drawing annotations. Undo and redo controls are conveniently located in the top toolbar.\n\n## Commenting Features Overview\n\nThe API supports the following commenting capabilities:\n\n- Add, update, or delete annotations (e.g., text comments, highlights, drawings).\n    \n- Reply to annotations allowing collaborators to engage in threaded discussions.\n    \n- View all comments in the left-hand comments panel.\n    \n- Any annotation activity (add/update/reply) activates the Save button.\n    \n- Once saved, annotations become part of the PDF buffer, preserving them in the document.\n    \n\nThese features provide an interactive, collaborative experience for PDF document handling directly within your web application.\n\n### Text Markup Anotations\n\nText markup annotations include highlight text , strikeout text , underline text , squiggly text , replace text and caret text.\n\n**Adding a text markup:**\n\nThere are two ways to add a text markup:\n\n- Click the highlight tool in the top bar and select some text. The text gets highlighted\n    \n\n<img src=\"https://content.pstmn.io/4f566a9b-4d16-4a7a-af73-b0e337e6aa24/aGlnaGxpZ2h0ZWRfMS5qcGVn\" width=\"1116\" height=\"428\">\n\n- Using the select tool to select some text, and then choose either the highlight, strikethrough or underline options in the popover menu.\n    \n\n<img src=\"https://content.pstmn.io/fc08de15-5f81-44d6-bfcf-2b00a1125b18/aGlnaGxpZ2h0ZWRfMi5qcGVn\" width=\"1160\" height=\"410\">\n\n**Updating a text markup**\n\nWhile focusing on the text markup , you can:\n\n- Click on the existing text markup to open a popover menu to change the color.\n    \n- Moving the 'text boundary cursor' to select more text for commenting.\n    \n- Double click on the text markup will open the comments panel for editing comment.\n    \n\n**Removing a text markup**\n\n- Click on the existing text markup to open the overflow menu, and choose **Delete**.\n    \n- Click on the overflow menu for the comment in the comments panel, and choose **Delete**.\n    \n\n<img src=\"https://content.pstmn.io/8a9c5429-d609-4542-909a-0729e850efe0/cmVtb3ZlX3RleHRfbWFya3VwLmpwZWc=\" width=\"666\" height=\"690\">\n\n### Note\n\nUsing Note to add text reply. And users can put it anywhere on the PDF document. The features supported are as following:\n\n- Adding a note\n    \n    - Select the note tool in the top toolbar and click where you want to add the note. You can input the reply message into the left panel's comment box.\n        \n- Editing a note\n    \n    - Click on the existing note to open a popover menu to change the properties of the note.\n        \n- Delete a note\n    \n    - Click on the existing note to open the menu and click on the delete option to remove the note.\n        \n- Moving\n    \n    - Choosing the Selecting tool and placing the cursor over the existing note and dragging to move it to the other location.\n        \n\n<img src=\"https://content.pstmn.io/2b7ee89c-132b-4117-b5a8-109ccd4c19ca/ZGVtb19ndWlkZV8xLmpwZWc=\" width=\"422\" height=\"296\">\n\n### Typewriter\n\nUsing typewriter tool to add text anywhere in the PDF document.\n\n- Adding text\n    \n    - Select the Typewriter tool in the top toolbar, click on the page to place where you want for adding the typewrite and inputting the text. Click outside the text box to add the annotation.\n        \n- Updating text\n    \n    - Click on the existing Typewriter annotation to edit the text or change any of the text attributes in the properties box. You can change the attributes such as the color and font size of the text.\n        \n- Deleting text\n    \n    - Click the existing typewriter annotation to open the toolbar, and choose **Delete**.\n        \n- Moving\n    \n    - Choosing the selecting tool and placing the cursor over the existing typewriter annotation and dragging to move it to the other location.\n        \n\n### Pencil & Eraser\n\nUse Pencil tool to create any freehand drawing or shape, and using the eraser tool to erase the parts of the freehand drawing annotation.\n\n- Adding a drawing\n    \n    - Select the Pencil tool in the top bar, click where you want to begin drawing and drag to create a shape. You can release the mouse button, move the pointer to a new location, and continue drawing.\n        \n- Updating a drawing\n    \n    - Click on the existing drawing. You can change the attributes such as the color and the stroke width.\n        \n    - You can edit the comment by clicking on the Edit option in the overflow menu.\n        \n- Removing a drawing\n    \n    - Click on the existing drawing to display the menu and click on the delete option.\n        \n    - Use the Eraser tool to erase the parts of the freehand drawing.\n        \n- Moving or resizing a drawing\n    \n    - Choose the selecting tool and place the cursor over a drawing and drag to move it to a different location.\n        \n    - Choose the selecting tool and place the cursor over a drawing and drag one of the corner circles to resize the annotation.\n        \n\n### Undo or Redo changes\n\nUse the Undo tool to reverse the previous actions, you can find it in the top toolbar. Each clicking the Undo command will reverse the action, repeatedly clicking the Undo command will go back the previous actions.\n\nUse the Redo tool to reverse the action, you can find it in the top toolbar next to the Undo button.\n\n## Annotations APIs\n\nThe annotations APIs support programmatic adding, deleting, updating, importing and exporting both comments and other types of text markup annotations, such as highlight and underlines. The **enableAnnotations** will be used to enable and control PDF annotations:\n\n- enableAnnotations: Default is true. The true option will enable the Annotation APIs and the viewer will display the existing annotations.The client's application passes the annotations and the PDF buffer to The Foxit PDF Embed API which renders it in the browser.\n    \n\n### Annotation Schema\n\nAnnotation data sent from the API should be as the JSON format, which allows users to identify the properties of annotations.\n\nThe JSON format of The Foxit PDF Embed API's annotation is as following.\n\n``` json\n{  \n\"source\": | ,  \n\"type\": \"Annotation\",  \n\"subtype\": \"note\" | \"strikeout\" | \"highlight\" |  \n\"underline\"ÔΩú\"squiggly\"ÔΩú\"replace\"ÔΩú\"caret\" | \"typewrite\" | \"pencil\",  \n\"id\": < ANNOTATION_ID > ,  \n\"contentValue\": String,  \n\"motivation\": String,  \n\"index\": < PAGE_INDEX >  \n\"boundingBox\": \\[Xmin, Ymin, Xmax, Ymax\\],  \n\"quadPoints\": \\[....\\],  \n\"inkList\": \\[\\[...\\],\\[...\\], ...\\],  \n\"strokeColor\": < COLOR_HEX_CODE > ,  \n\"strokeWidth\": Float,  \n\"opacity\": Float(from 0.0 to 1.0),  \n\"creator\": {  \n\"type\": \"Person\",  \n\"name\": String,  \n},  \n\"created\": DateTime,  \n\"modified\": DateTime,  \n}\n\n ```\n\n#### **Annotations Data Parameters**\n\n| **PARAMETER** | **DESCRIPTION** | **REQUIRED** |\n| --- | --- | --- |\n| type | The annotation type which must be _Annotation_. | YES |\n| id | The annotation‚Äôs unique identifier. | YES |\n| contentValue | The string value of the plain text comment. | YES |\n| motivation | The reason for its creation. The value is either **commenting** or **replying**. | YES |\n| creator.type | The value is Person or Collaboration. | YES |\n| creator.name | The name of the annotation creator. | YES |\n| created | The date-time in UTC timezone format to denote the annotation modification time after it was created. | YES |\n| modified | The date-time in UTC timezone format to denote the annotation modification time after it was modified. | YES |\n| source | The PDF‚Äôs unique identifier when the motivation equals to **commenting**. This is the same as the value of id in the metadata of the **previewFile** API. The Annotation's unique identifier when the motivation equals to **replying**. This is the same as the value of id in the annotation's id. | YES |\n| subtype | The premissible value include: \"note\" \"strikeout\" \"highlight\" \"underline\" \"squiggly\" \"replace\" \"caret\" \"typewrite\" \"pencil\" . | YES |\n| index | The PDF page index starting from 0. | YES |\n| boundingBox | This is only used for the highlight text , strikeout text , underline text , squiggly text , replace text and caret text. The PDF page coordinates with the upper-left, upper-right, lower-left and lower-right corners of each rectangular bounding box with the annotation. The value will be an array of multiple coordinates \\[X1, Y1, X2, Y2, ‚Ä¶\\] of all the rectangular boxes. All the coordinate values are setted as the float type. | Required only if the annotation subtype is highlight , strikeout , underline , squiggly , replace and caret. |\n| inkList | Float. This is used only for the pencil . The PDF page coordinates with the shape annotation. The value will be an array of N arrays \\[\\[X1, Y1, X2, Y2, ‚Ä¶\\], \\[X1, Y1, X2, Y2, ‚Ä¶\\], ‚Ä¶\\], where each array is a series of X-axis and Y-axis coordinates specifying points when the pencil is drawn. | Required only if the annotation subtype is _pencil_. |\n| strokeColor | The HEX color of the annotation is displayed in the UI. | NO |\n| strokeWidth | Float value specified the line thickness of the drawing annotation. | NO |\n| opacity | Float value between 0.0 and 1.0 specifying the opacity of the annotation. | NO |\n| fontStyle.font | ReadOnly. This is used only for 'typewrite'. The font name typewrite is used. | NO |\n| fontStyle.size | This is used only for 'typewrite'. The font size typewrite is used. | NO |\n| fontStyle.color | This is used only for 'typewrite'. The font color typewrite is used. | NO |\n\n#### Annotation Data Examples\n\n**Add text annotation data**\n\n``` json\n{\n  \"source\": \"77c6fa5d-6d74-4104-8349-657c8411a834\",\n  \"type\": \"Annotation\",\n  \"subtype\": \"typewrite\",\n  \"id\": \"02dcf931-d1cb-49c1-a8bc-d047892a06bc\",\n  \"contentValue\": \"I added a text annotation\",\n  \"motivation\": \"commenting\",\n  \"index\": 0,\n  \"fontStyle\": {\n    \"size\": \"24px\",\n    \"color\": \"#0000FF\"\n  },\n  \"boundingBox\": [306.41829735235586, 339.01199687491595, 475.729044456285, 357.0653042030006],\n  \"creator\": {\n    \"type\": \"Person\",\n    \"name\": \"Will\"\n  },\n  \"created\": \"2022-01-15T14:45:37Z\",\n  \"modified\": \"2022-01-15T14:45:37Z\"\n}\n\n ```\n\n**Reply annotation data**\n\n``` json\n{\n  \"type\": \"Annotation\",\n  \"id\": \"eb46d1a9-e9c3-4e81-a6f4-ce5ba7a905e9\",\n  \"contentValue\": \"Reply to typewrite\",\n  \"motivation\": \"replying\",\n  \"source\": \"02dcf931-d1cb-49c1-a8bc-d047892a06bc\",\n  \"creator\": {\n    \"type\": \"Person\",\n    \"name\": \"Samuel\"\n  },\n  \"created\": \"2022-02-02T14:45:37Z\",\n  \"modified\": \"2022-02-02T07:57:03Z\"\n}\n\n ```\n\nThe Foxit PDF Embed API allows users to programmatically add, import, export, delete, and update annotations.\n\nWhen users enabled the annotations, users can invoke all the annotations APIs with the **AnnotationManager.** The example is as following:\n\n``` html\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n              content=\"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no\"/>\n    <meta http-equiv= X-UA-Compatible content=\"IE=edge,chrome=1\">\n    <meta name=\"renderer\" content=\"webkit\">\n    <title>Foxit Embed Viewer - Full Window</title>\n    <style>\n      html, body{\n      width: 100%;\n      height: 100%;\n      }\n      #foxit-embed-view {\n      height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <divid=\"foxit-embed-view\"></div>\n    <script src=\"https://embed.developer-api.foxit.com/api/embview-sdk/js?clientId=REPLACE_YOUR_CLIENT_ID\"></script>\n    <script>\n      var embedView = new FoxitEmbed.View({\n      clientId: \"<REPLACE_YOUR_CLIENT_ID>\",\n      divId: \"foxit-embed-view\"\n      });\n      var pdfUrl = \"https://embed.developer-api.foxit.com/view-sdk-demo/Embed API Demo.pdf\";\n      embedView.previewFile({\n      content: pdfUrl,\n      metaData: {\n      fileName: 'Embed API Demo.pdf',\n      id: '77c6fa5d-6d74-4104-8349-657c8411a834'\n      }\n      }, {\n      showToolControls: true,\n      showLeftHandPanel: true,\n      showDownloadPDF: true,\n      showPrintPDF: true,\n      defalutViewColorStyle: {\n      \"primaryColor\":\"#f36b16\",\n      \"secondaryColor\":\"#333333\",\n      \"textActiveColor\":\"#FFFFFF\"\n      },\n      enablePDFAnnotations: true\n      });\n      embedView.getAnnotationManager().then(annotationManager => {\n      // All annotation APIs can be invoked here\n      });\n    </script>\n  </body>\n</html>\n\n ```\n\n## Basic APIs for Commenting\n\nThe PDF Embed API offers several APIs which allow you to programmatically add, import, export, delete, and update annotations.\n\n### Adding Annotations\n\nThe addAnnotations API allow users to add the supported annotations. Either a single annotation or multiple annotations can be added.The annotation data must be specified in the Annotation schema.\n\n**input parameters**  \nA JSON array specified in the Annotation schema, contains the list of annotations :\\[Annotation_1, Annotation_2, ... \\]\n\n**API Output**  \nReturns a Promise:\n\n- Resolves on a successful API operation.\n    \n- Rejects with error object including code and message on the API failure.\n    \n\n``` javascript\n  const list_of_annotations = [Annotation_1, Annotation_2, ...];\n  embedView.getAnnotationManager().then(annotationManager => {\n  annotationManager.addAnnotations(list_of_annotations)\n  .then(() => console.log(\"Success\"))\n  .catch(error => console.log(error));\n  });\n\n ```\n\n### Getting Annotations\n\nThe getAnnotations API is able to receive the exist PDF annotations from the PDF file. The data returned is in the form of a JSON array. And the data format is described in the Annotation schema.\n\n**Input parameters**  \nA filter is provided by the client\n\n- If set a list of annotation IDs in the filter, the annotations matched with this IDs will be returned.\n    \n- If set a page range of the PDF file, the annotations in these pages will be returned. The first page number is 0.\n    \n- If no filter, the data returned will include all the annotations in the PDF file.\n    \n\n``` javascript\n  filter = {\n  annotationIds:\n  [Annotation_ID_1, Annotation_ID_2, ...],\n  pageRange:{\n  startPage: \\<Page_Number>,\n  endPage: \\<Page_Number>\n  },\n  }\n\n ```\n\n**API output**\n\nReturns a Promise:\n\n- Resolves with a list of annotations on success,\n    \n- Rejects with an error object which includes a code and message on the failure.\n    \n\n``` javascript\n  const filter = {\n  // annotationIds: [Annotation_ID_1, Annotation_ID_2, ...];\n  // OR,\n  // pageRange: {startPage: \\<Page_Number>, endPage: \\<Page_Number>};\n  }\n  embedView.getAnnotationManager().then(annotationManager => {\n  annotationManager.getAnnotations(filter)\n  .then(() => console.log(\"Success\"))\n  .catch(error => console.log(error));\n  });\n\n ```\n\n#### Deleting Annotations\n\nThe deleteAnnotations API is able to delete the PDF annotations in the PDF file.\n\n**Input parameters**\n\nA filter is provided by the client.\n\n- If set a list of annotation IDs in the filter, the annotations matched with this IDs will be deleted.\n    \n- If set a page range of the PDF file, the annotations in these pages will be deleted. First page number is 0.\n    \n- If no filter, all the annotations in the PDF file will be deleted.\n    \n\n``` javascript\n  filter = {\n  annotationIds:\n  [Annotation_ID_1, Annotation_ID_2, ...],\n  pageRange:{\n    startPage: \\<Page_Number>,\n    endPage: \\<Page_Number>\n    },\n  }\n\n ```\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the delete operation success.\n    \n- Rejects with error object including code and message on the delete operation failure.\n    \n\n``` javascript\n  const filter = {\n  // annotationIds: [Annotation_ID_1, Annotation_ID_2, ...];\n  // OR,\n  // pageRange: {startPage: \\<Page_Number>, endPage: \\<Page_Number>};\n  }\n  embedView.getAnnotationManager().then(annotationManager => {\n    annotationManager.deleteAnnotations(filter)\n    .then(() => console.log(\"Success\"))\n    .catch(error => console.log(error));\n  });\n\n ```\n\n#### Updating Annotations\n\nThe updateAnnotation API updates a single existing annotations in the PDF. The API takes the updated annotations data ,finds the annotations with the ID in the input data, and applies the update to that annotation.\n\n**Input parameters**\n\nJSON object containing the annotation data, must be in the same format as the format described in the Annotation schema.\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the update operation success.\n    \n- Rejects with error object including code and message on the update operation failure.\n    \n\n``` javascript\n  const annotation_data = \\<Annotation_Data>;\n  embedView.getAnnotationManager().then(annotationManager => {\n  annotationManager.updateAnnotation(annotation_data)\n  .then(() => console.log(\"Success\"))\n  .catch(error => console.log(error));\n  });\n\n ```\n\n#### Selecting Annotation\n\nThe selectAnnotation API selects any existing annotation and give the focus to the selected annotation.\n\n**Input parameters**\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the select annotation operation success.\n    \n- Rejects with error object including an error code and message\n    \n\n``` javascript\n  embedView.getAnnotationManager().then(annotationManager => {\n  annotationManager.selectAnnotations(annotation_id)\n  .then(() => console.log(\"Success\"))\n  .catch(error => console.log(error));\n  });\n\n ```\n\n#### Unselecting Annotation\n\nThe unselectAnnotation API unselects the last selected annotation.\n\n``` javascript\n    embedView.getAnnotationManager().then(annotationManager => {\n    annotationManager.unselectAnnotation();\n    });\n\n ```\n\n### Importing/Exporting Annotations by fdf\n\nThe exportAnnotationstoFdf API allows users to export all the supported annotations from the PDF file to a specific format file.\n\n**Input parameters**\n\n`fileType: 'xfdf' | 'fdf'` - Specify data file type. The default is 'fdf'. `annots: arrays` - Specify the particular annotation id to be exported. If it's null, all the annotations will be exported.\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on success with blob of annotations data.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\nembedView.getAnnotationManager().then(\n  annotationManager => {\nannotationManager.exportAnnotationstoFdf()\n  .then(annotData => {\n  //Save Date to the file storage;\n  })\n.catch(error => console.log(error));\n\n ```\n\nThe `importAnnotationsfromFdf` API allows users to import all the supported annotations from a fdf/xfdf format file.\n\n**Input parameters**\n\nSpecify fdf file's stream.\n\n``` javascript\ndata: {File\\|Blob\\|ArrayBuffer\\|TypeArray\\|ViewData}\n\n ```\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the import operation success.\n    \n- Rejects with error object including an error code and message\n    \n\n``` javascript\nconst fdfData //Get fdf file's stream;\nembedView.getAnnotationManager().then(annotationManager => {\n  annotationManager.importAnnotationsfromFdf(fdfData)\n  .then(() => console.log(\"Success\"))\n  .catch(error => console.log(error));\n});\n\n ```\n\n### Annotation Events\n\nDevelopers can receive the events when a user action interacts with an annotation. These events are generated for the annotation actions performed by the UI and the annotation APIs. Using addListener to register callback function to the Embedded Viewer.\n\n| **Event Type** | **Description** | **Param** |\n| --- | --- | --- |\n| Annotation_Clicked | An existing annotation is clicked. | Annotation id |\n| Annotation_Updated | An existing annotation is updated. | Annotation id |\n| Annotation_Added | A new annotation is added . | Annotation id |\n| Annotation_Deleted | An existing annotation is deleted. | Annotation id |\n| Annotation_Activated | Any existing annotation is selected. | Annotation id |\n| Annotation_Unactivated | Any existing annotation is unselected. | Annotation id |\n\n**Add Event**\n\nFor more detail see Callbacks & Workflows.\n\n``` javascript\nFoxitEmbedViewer.addListener(\n  <Callback Type>, // Replace with the type of callback you want to register\n  <Function>,   // Replace with the function that will handle the callback\n  options     // Optional: Additional options for the callback\n);\n\n ```"
				},
				{
					"name": "Read Aloud",
					"item": [],
					"description": "# Read Aloud\n\nThe Foxit PDF Embed API provides the way to read aloud the PDF text contents.\n\n## Activate the \"Read Aloud\" module\n\nThe activate API allows users to activate the \"read aloud\" module. It will read aloud the selected text automatically if it is activated.\n\n**API output**\n\nReturns a Promise which:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\nembedView.GetReadAloud().then((readAloud) => {\n  readAloud\n    .activate()\n    .then(() => console.log('Success'))\n    .catch((error) => console.log(error));\n});\n\n ```\n\n## Deactivate the \"Read Aloud\" module\n\nThe deactivate API allows users to deactivate the \"read aloud\" module.\n\n**API output**\n\nReturns a Promise :\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\nembedView.GetReadAloud().then((readAloud) => {\n  readAloud\n    .deactivate()\n    .then(() => console.log('Success'))\n    .catch((error) => console.log(error));\n});\n\n ```\n\n## Start to Read Aloud\n\nThe start API allows users to read aloud the pages as the page ranges if the \"read aloud\" module is activated.\n\n**input parameters**\n\n``` json\n{\n  \"start_page_index\": startPageIndex,\n  \"end_page_index\": endPageIndex,\n}\n\n ```\n\n**Input parameters data description**\n\n| **PARAMETER** | **DESCRIPTION** | **REQUIRED** |\n| --- | --- | --- |\n| start_page_index | The start page index. | YES |\n| end_page_index | The end page index. | YES |\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\ndata = {};\nembedView.GetReadAloud().then(readAloud=>{\nreadAloud.readAloudPages(data).then(() => console.log(\"Success\"))\n.catch(error => console.log(error));\n})\n\n ```\n\n## Stop to Read Aloud pages\n\nThe stop API allows users to stop reading aloud.\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\nembedView.GetReadAloud().then(readAloud=>{\nreadAloud.stop().then(() => console.log(\"Success\"))\n.catch(error => console.log(error));\n})\n\n ```\n\n**pause**\n\nThe pause API allows users to pause reading aloud.\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\nembedView.GetReadAloud().then(readAloud=>{\nreadAloud.pause().then(() => console.log(\"Success\"))\n.catch(error => console.log(error));\n})\n\n ```\n\n**resume**\n\nThe resume API allows users to resume reading aloud.\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\nembedView.GetReadAloud().then(readAloud=>{\nreadAloud.resume().then(() => console.log(\"Success\"))\n.catch(error => console.log(error));\n})\n\n ```\n\n## update Read Aloud option\n\nThe updateOption API allows users to update the read aloud option, includes rate and volume.\n\n**input parameters**\n\n``` json\noption\n{\n\"rate\": Float,\n\"volume\": Float,\n}\n\n ```\n\n**input parameters data description**\n\n| **PARAMETER** | **DESCRIPTION** | **REQUIRED** |\n| --- | --- | --- |\n| rate | The rate of reading aloud. It is float for the rate value. It can range between 0.1 (lowest) and 10 (highest), while 1 is a normal speaking rate. | YES |\n| volume | A float for the volume value, between 0 (lowest) and 1 (highest.) | YES |\n\n**API output**\n\nReturns a Promise:\n\n- Resolves on the API operation success.\n    \n- Rejects with error object including an error code and message.\n    \n\n``` javascript\noption = {};\nembedView.GetReadAloud().then(readAloud=>{\nreadAloud.updateOption(option).then(() => console.log(\"Success\"))\n.catch(error => console.log(error));\n})\n\n ```"
				},
				{
					"name": "Form Handling",
					"item": [],
					"description": "# Form Handling\n\nThe Foxit PDF Embed API supports interactive form filling out-of-the-box. Users can seamlessly fill in text fields, checkboxes, radio buttons, dropdowns, and list selections within the embedded PDF viewer. Once any field is edited, the Save button in the top toolbar becomes active, allowing users to save their input directly into the PDF.\n\n> ‚ö†Ô∏è Limitations  \nThe following form features are not supported: \n  \n\n- Creating, editing, or deleting form fields\n    \n- XFA-based forms\n    \n- Digital signature and barcode fields\n    \n- File picker text fields\n    \n- Rich Text Format (RTF) text fields\n    \n- JavaScript-based validation, calculation, or actions\n    \n- Special/custom formats in text fields or dropdowns\n    \n- Submit buttons with PDF actions (view-only supported)\n    \n\n**Comments and Markup**\n\nThe Foxit PDF Embed API includes commenting features. Users can add annotations using text comments, sticky notes, highlights, and drawing tools. An eraser tool is available for removing parts of drawings, and the top toolbar provides undo and redo capabilities."
				},
				{
					"name": "Class View",
					"item": [],
					"description": "# Class: View\n\nThis is the main class for the PDF Viewer. It provides methods to render the PDF Viewer and interact with it.\n\n## Constructors\n\n### new View(params)\n\n**new View**(`params`): [<code>View</code>](https://cloudapi-stg.foxitcloud.com/product/embedviewer/docs/embed-api/api-reference/classes/View/)\n\nConstructor for the PDF Viewer\n\n#### Parameters\n\n‚Ä¢ **params**\n\n‚Ä¢ **params.clientId**: `string`\n\nthe client id\n\n‚Ä¢ **params.divId**: `string`\n\nthe div id to render the viewer\n\n‚Ä¢ **params.locale?**: `Locale`\n\nthe locale for the viewer\n\n#### Returns\n\n[<code>View</code>](https://cloudapi-stg.foxitcloud.com/product/embedviewer/docs/embed-api/api-reference/classes/View/)\n\n## Methods\n\n### GetReadAloud()\n\n**GetReadAloud**(): `Promise`<`ReadAloudManager`\\>\n\nGet read aloud manager for the viewer.\n\nThe Embed API provides a read aloud feature that allows you to read the text of a PDF file. This method helps you to get the ReadAloudManager instance to interact with the read aloud feature.\n\n#### Returns\n\n`Promise`<`ReadAloudManager`\\>\n\n- Return a promise that resolves with the ReadAloudManager instance, or rejects with an error.\n    \n\n### UpdatePreference()\n\n**UpdatePreference**(`preferences`): `Promise`<`void`\\>\n\nUpdate the preference of the viewer.\n\n#### Parameters\n\n‚Ä¢ **preferences**: `Preferences`\n\nthe preferences for the viewer\n\n#### Returns\n\n`Promise`<`void`\\>\n\n- Return a promise that resolves when the preference is updated, or rejects with an error if the preference cannot be updated.\n    \n\n### addListener()\n\n**addListener**(`event`, `callback`): `Promise`<`any`\\>\n\nAdd an event listener to the viewer.\n\n#### Parameters\n\n‚Ä¢ **event**: `\"File_Opened\"` | `\"Viewer_Zoomed\"` | `\"Viewmode_Changed\"` | `\"Text_Selected\"` | `\"PageNum_Changed\"` | `\"Viewer_Rotated\"` | `\"Annotation_Clicked\"` | `\"Annotation_Activated\"` | `\"Annotation_Unactivated\"` | `\"Annotation_Updated\"` | `\"Annotation_Added\"` | `\"Annotation_Deleted\"`\n\nthe event to listen to\n\n‚Ä¢ **callback**: `Function`\n\nthe callback function to be called when the event is triggered\n\n#### Returns\n\n`Promise`<`any`\\>\n\n- Return a promise that resolves when the event listener is added, or rejects with an error.\n    \n\n### createPDFViewer()\n\n**createPDFViewer**(): `Promise`<`any`\\>\n\n#### Returns\n\n`Promise`<`any`\\>\n\n### downloadCurrentPDF()\n\n**downloadCurrentPDF**(`fileName`): `Promise`<`boolean`\\>\n\nDownload the current PDF file opened in the viewer.\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n- Return a promise that resolves with true when the PDF file is downloaded, or rejects with an error.\n    \n\n### getAnnotationManager()\n\n**getAnnotationManager**(): `Promise`<`AnnotationManager`\\>\n\nGet annotation manager for the viewer.\n\nThis method helps you to get the AnnotationManager instance to interact with the annotation feature.\n\n#### Returns\n\n`Promise`<`AnnotationManager`\\>\n\n- Return a promise that resolves with the AnnotationManager instance, or rejects with an error.\n    \n\n### getBookmarks()\n\n**getBookmarks**(): `Promise`<`Bookmark`\\[\\]>\n\nGet the bookmarks in the PDF file.\n\n#### Returns\n\n`Promise`<`Bookmark`\\[\\]>\n\n- Return a promise that resolves with the bookmarks, or rejects with an error.\n    \n\n### getCurrentPage()\n\n**getCurrentPage**(): `Promise`<`number`\\>\n\nGet the current page number in the viewer. page number starts from 1.\n\n#### Returns\n\n`Promise`<`number`\\>\n\n- Return a promise that resolves with the current page number, or rejects with an error.\n    \n\n### getPageZoom()\n\n**getPageZoom**(`pageNumber`): `Promise`<`number`\\>\n\nGet the current zoom scale of a specific page.\n\n#### Parameters\n\n‚Ä¢ **pageNumber**: `number`\n\nthe page number to get the zoom scale, starting from 1.\n\n#### Returns\n\n`Promise`<`number`\\>\n\n- Return a promise that resolves with the zoom scale, or rejects with an error.\n    \n\n### gotoLocation()\n\n**gotoLocation**(`pageNumber`, `xCoordinate`, `yCoordinate`): `Promise`<`boolean`\\>\n\nGoto specific location in the PDF file.\n\n#### Parameters\n\n‚Ä¢ **pageNumber**: `number`\n\nthe page number to go to, starting from 1. default is 1\n\n‚Ä¢ **xCoordinate**: `number`\\= `0`\n\nthe x coordinate to go to, default is 0\n\n‚Ä¢ **yCoordinate**: `number`\\= `0`\n\nthe y coordinate to go to, default is 0\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n### openBookmark()\n\n**openBookmark**(`bookmarkId`): `Promise`<`boolean`\\>\n\nJump to the bookmark by id.\n\n#### Parameters\n\n‚Ä¢ **bookmarkId**: `number`\n\nthe bookmark id to jump to. It is the id of the bookmark returned by getBookmarks method.\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n- Return a promise that resolves with true when the bookmark is opened, or rejects with an error.\n    \n\n### previewFile()\n\n**previewFile**(`params`, `options`?): `Promise`<`void`\\>\n\nOpen a PDF file in the viewer\n\n#### Parameters\n\n‚Ä¢ **params**: `Params`\n\nthe params for the viewer\n\n‚Ä¢ **options?**\n\nthe options for customizing the viewer\n\n‚Ä¢ **options.defaultViewColorStyle?**: `string`\n\n‚Ä¢ **options.defaultViewMode?**: `\"FIT_WIDTH\"` | `\"FIT_PAGE\"`\n\n‚Ä¢ **options.deviceType?**: `string`\n\n‚Ä¢ **options.embedMode?**: `EmbedMode`\n\nthe embed mode for the viewer\n\n‚Ä¢ **options.enableTextSelection?**: `boolean`\n\n‚Ä¢ **options.showDownloadPDF?**: `boolean`\n\n‚Ä¢ **options.showIcon?**: `string`\n\n‚Ä¢ **options.showLeftHandPanel?**: `boolean`\n\n‚Ä¢ **options.showPrintPDF?**: `boolean`\n\n‚Ä¢ **options.showSelectTool?**: `boolean`\n\n‚Ä¢ **options.showSnapshotTool?**: `boolean`\n\n‚Ä¢ **options.showToolControls?**: `boolean`\n\n#### Returns\n\n`Promise`<`void`\\>\n\n### search()\n\n**search**(`keywords`, `startPageNumber`, `endPageNumber`, `matchRule`): `Promise`<`SearchAPI`\\>\n\nSearch the keywords in the PDF file.\n\n#### Parameters\n\n‚Ä¢ **keywords**: `string`\n\nthe keywords to search.\n\n‚Ä¢ **startPageNumber**: `number`\n\nthe start page number to search, starting from 1.\n\n‚Ä¢ **endPageNumber**: `number`\n\nthe end page number to search, starting from 1.\n\n‚Ä¢ **matchRule**: `\"WholeWordsOnly\"` | `\"CaseSensitive\"`\n\nthe match rule for the search.\n\n#### Returns\n\n`Promise`<`SearchAPI`\\>\n\n- Return a promise that resolves with the Search object, or rejects with an error.\n    \n\n### setCustomLogo()\n\n**setCustomLogo**(`logo`): `void`\n\nSet the custom logo for the viewer.\n\n#### Parameters\n\n‚Ä¢ **logo**\n\nthe logo url, must be a valid url that can be displayed by the img tag.\n\n‚Ä¢ **logo.url**: `string`\n\n#### Returns\n\n`void`\n\n### zoomTo()\n\n**zoomTo**(`scale`): `Promise`<`boolean`\\>\n\nZoom to a specific scale in the viewer.\n\n#### Parameters\n\n‚Ä¢ **scale**: `number` | `\"fitWidth\"` | `\"fitHeight\"`\n\nthe scale to zoom to, can be a number, 'fitWidth' or 'fitHeight'.\n\n#### Returns\n\n`Promise`<`boolean`\\>\n\n- Return a promise that resolves with true when the viewer is zoomed to the specific scale, or rejects with an error."
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://na1.fusion.foxit.com",
			"type": "string"
		},
		{
			"key": "client_id",
			"value": "YOUR_CLIENT_ID",
			"type": "string"
		},
		{
			"key": "client_secret",
			"value": "YOUR_CLIENT_SECRET",
			"type": "string"
		},
		{
			"key": "esignBaseUrl",
			"value": "https://na1.foxitesign.foxit.com/api",
			"type": "string"
		}
	]
}